<?xml version="1.0" encoding="UTF-8"?>
<model name="com.vmware.vapi.std" fingerprint="7487049483d6b59577f62f4493a3a32702f654fb">
  <author>
    <name>com.vmware.vapi.idl.model.tools.XmlIdlWriter</name>
    <version>2.6.0.4750157</version>
  </author>
  <exports>
    <package name="com.vmware.vapi.std">
      <structure name="AuthenticationScheme">
        <constant name="NO_AUTHENTICATION"/>
        <constant name="SAML_BEARER_TOKEN"/>
        <constant name="SAML_HOK_TOKEN"/>
        <constant name="SESSION_ID"/>
        <constant name="USER_PASSWORD"/>
        <constant name="OAUTH_ACCESS_TOKEN"/>
      </structure>
      <structure name="DynamicID"/>
      <structure name="LocalizableMessage"/>
    </package>
    <package name="com.vmware.vapi.std.errors">
      <structure name="ArgumentLocations"/>
      <structure name="FileLocations"/>
      <structure name="TransientIndication"/>
      <error name="AlreadyExists" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="AlreadyInDesiredState" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="Canceled" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="ConcurrentChange" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="Error" parent="Exception"/>
      <error name="FeatureInUse" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="InternalServerError" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="InvalidArgument" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="InvalidElementConfiguration" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="InvalidElementType" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="InvalidRequest" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="NotAllowedInCurrentState" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="NotFound" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="OperationNotFound" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="ResourceBusy" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="ResourceInUse" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="ResourceInaccessible" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="ServiceUnavailable" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="TimedOut" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="UnableToAllocateResource" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="Unauthenticated" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="Unauthorized" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="UnexpectedInput" parent="com.vmware.vapi.std.errors.Error"/>
      <error name="Unsupported" parent="com.vmware.vapi.std.errors.Error"/>
    </package>
    <package name="com.vmware.vapi.std.interposition">
      <structure name="InvocationRequest"/>
      <structure name="InvocationResult"/>
      <structure name="SecurityPrincipal"/>
    </package>
  </exports>
  <package name="com.vmware.vapi.std" fingerprint="07414ffe7ee67adcec4336019788a7fedbcb6d8c">
    <doc>
      <descriptionModel index="0">
        <docModel>
          <text>The </text>
          <atName resolved="com.vmware.vapi.std" pkg="true" tag="name">com.vmware.vapi.std</atName>
          <text> </text>
          <atTerm>package</atTerm>
          <text> provides standard types that can be used in the interface specification of any </text>
          <atTerm>service</atTerm>
          <text>.</text>
        </docModel>
      </descriptionModel>
      <description index="0">
        <text>The {@name com.vmware.vapi.std} {@term package} provides standard</text>
        <text>types that can be used in the interface specification of any {@term service}.</text>
      </description>
    </doc>
    <structure name="AuthenticationScheme" namespace="com.vmware.vapi.std" fingerprint="67034b66ab561720478b138f680c225e233d0a4d">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atLink resolved="com.vmware.vapi.std.AuthenticationScheme" type="true">AuthenticationScheme</atLink>
            <text> class defines constants for authentication scheme identifiers for authentication mechanisms present in the vAPI infrastructure shipped by VMware. </text>
            <paragraph>
              <text> A third party extension can define and implements it's own authentication mechanism and define a constant in a different IDL file.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@link AuthenticationScheme} class defines constants for authentication</text>
          <text>scheme identifiers for authentication mechanisms present in the vAPI infrastructure</text>
          <text>shipped by VMware.</text>
          <text>&lt;p&gt;</text>
          <text>A third party extension can define and implements it's own</text>
          <text>authentication mechanism and define a constant in a different IDL file.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <constant name="NO_AUTHENTICATION">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the request doesn't need any authentication.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the request doesn't need any authentication.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.no_authentication</value>
      </constant>
      <constant name="SAML_BEARER_TOKEN">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the security context in a request is using a SAML bearer token based authentication scheme. </text>
              <paragraph>
                <text> In this scheme, the following pieces of information has to be passed in the SecurityContext structure in the execution context of the request: </text>
              </paragraph>
              <ul>
                <text> </text>
                <li>
                  <text>The scheme identifier: com.vmware.vapi.std.security.saml_bearer_token</text>
                </li>
                <text> </text>
                <li>
                  <text>The token itself</text>
                </li>
                <text> </text>
              </ul>
              <text> </text>
              <paragraph>
                <text> Sample security context in JSON format that matches the specification: </text>
                <atCode>{
'schemeId': 'com.vmware.vapi.std.security.saml_bearer_token',
'token': 'the token itself'
}</atCode>
                <text> vAPI runtime provide convenient factory methods that take SAML bearer token and to create the security context that conforms to the above mentioned format.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the security context in a request is using a SAML bearer</text>
            <text>token based authentication scheme.</text>
            <text>&lt;p&gt;</text>
            <text>In this scheme, the following pieces of information</text>
            <text>has to be passed in the SecurityContext structure in the</text>
            <text>execution context of the request:</text>
            <text>&lt;ul&gt;</text>
            <text>&lt;li&gt;The scheme identifier: com.vmware.vapi.std.security.saml_bearer_token&lt;/li&gt;</text>
            <text>&lt;li&gt;The token itself&lt;/li&gt;</text>
            <text>&lt;/ul&gt;</text>
            <text>&lt;p&gt;</text>
            <text>Sample security context in JSON format that matches the specification:</text>
            <text>{@code</text>
            <text>{</text>
            <text>'schemeId': 'com.vmware.vapi.std.security.saml_bearer_token',</text>
            <text>'token': 'the token itself'</text>
            <text>}</text>
            <text>}</text>
            <text>vAPI runtime provide convenient factory methods that take SAML bearer token</text>
            <text>and to create the security context that conforms to the above mentioned format.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.saml_bearer_token</value>
      </constant>
      <constant name="SAML_HOK_TOKEN">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the security context in a request is using a SAML holder-of-key token based authentication scheme. </text>
              <paragraph>
                <text> In this scheme, the following pieces of information has to be passed in the SecurityContext structure in the execution context of the request: </text>
              </paragraph>
              <ul>
                <text> </text>
                <li>
                  <text>The scheme identifier: com.vmware.vapi.std.security.saml_hok_token</text>
                </li>
                <text> </text>
                <li>
                  <text>Signature of the request: This includes - algorithm used for signing the request, SAML holder of key token and signature digest </text>
                </li>
                <text> </text>
                <li>
                  <text>Request timestamp: This includes the </text>
                  <atCode>created</atCode>
                  <text> and </text>
                  <atCode>expires</atCode>
                  <text> timestamp of the request. The timestamp should match the following format - YYYY-MM-DDThh:mm:ss.sssZ (e.g. 1878-03-03T19:20:30.451Z). </text>
                </li>
              </ul>
              <text> </text>
              <paragraph>
                <text> Sample security context in JSON format that matches the specification: </text>
                <atCode>{
'schemeId': 'com.vmware.vapi.std.security.saml_hok_token',
'signature': {
'alg': 'RS256',
'samlToken': ...,
'value': ...,</atCode>
                <text>, 'timestamp': { 'created': '2012-10-26T12:24:18.941Z', 'expires': '2012-10-26T12:44:18.941Z', } } } vAPI runtime provide convenient factory methods that take SAML holder of key token and private key to create the security context that conforms to the above mentioned format.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the security context in a request is using a SAML</text>
            <text>holder-of-key token based authentication scheme.</text>
            <text>&lt;p&gt;</text>
            <text>In this scheme, the following pieces of information</text>
            <text>has to be passed in the SecurityContext structure in the</text>
            <text>execution context of the request:</text>
            <text>&lt;ul&gt;</text>
            <text>&lt;li&gt;The scheme identifier: com.vmware.vapi.std.security.saml_hok_token&lt;/li&gt;</text>
            <text>&lt;li&gt;Signature of the request: This includes - algorithm used for signing</text>
            <text>the request, SAML holder of key token and signature digest &lt;/li&gt;</text>
            <text>&lt;li&gt;Request timestamp: This includes the {@code created} and {@code expires}</text>
            <text>timestamp of the request. The timestamp should match the following</text>
            <text>format - YYYY-MM-DDThh:mm:ss.sssZ (e.g. 1878-03-03T19:20:30.451Z).</text>
            <text>&lt;/ul&gt;</text>
            <text>&lt;p&gt;</text>
            <text>Sample security context in JSON format that matches the specification:</text>
            <text>{@code</text>
            <text>{</text>
            <text>'schemeId': 'com.vmware.vapi.std.security.saml_hok_token',</text>
            <text>'signature': {</text>
            <text>'alg': 'RS256',</text>
            <text>'samlToken': ...,</text>
            <text>'value': ...,</text>
            <text>},</text>
            <text>'timestamp': {</text>
            <text>'created': '2012-10-26T12:24:18.941Z',</text>
            <text>'expires': '2012-10-26T12:44:18.941Z',</text>
            <text>}</text>
            <text>}</text>
            <text>}</text>
            <text>vAPI runtime provide convenient factory methods that take SAML holder of key token</text>
            <text>and private key to create the security context that conforms to the above</text>
            <text>mentioned format.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.saml_hok_token</value>
      </constant>
      <constant name="SESSION_ID">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the security context in a request is using a session identifier based authentication scheme. </text>
              <paragraph>
                <text> In this scheme, the following pieces of information has to be passed in the SecurityContext structure in the execution context of the request: </text>
              </paragraph>
              <ul>
                <text> </text>
                <li>
                  <text>The scheme identifier - com.vmware.vapi.std.security.session_id</text>
                </li>
                <text> </text>
                <li>
                  <text>Valid session identifier - This is usually returned by a login method of a session manager interface for a particular vAPI service of this authentication scheme</text>
                </li>
                <text> </text>
              </ul>
              <text> Sample security context in JSON format that matches the specification: </text>
              <atCode>{
'schemeId': 'com.vmware.vapi.std.security.session_id',
'sessionId': ....,
}</atCode>
              <text> vAPI runtime provides convenient factory methods that take session identifier as input parameter and create a security context that conforms to the above format.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the security context in a request is using a session</text>
            <text>identifier based authentication scheme.</text>
            <text>&lt;p&gt;</text>
            <text>In this scheme, the following pieces of information</text>
            <text>has to be passed in the SecurityContext structure in the</text>
            <text>execution context of the request:</text>
            <text>&lt;ul&gt;</text>
            <text>&lt;li&gt;The scheme identifier - com.vmware.vapi.std.security.session_id&lt;/li&gt;</text>
            <text>&lt;li&gt;Valid session identifier - This is usually returned by a login</text>
            <text>method of a session manager interface for a particular vAPI service</text>
            <text>of this authentication scheme&lt;/li&gt;</text>
            <text>&lt;/ul&gt;</text>
            <text>Sample security context in JSON format that matches the specification:</text>
            <text>{@code</text>
            <text>{</text>
            <text>'schemeId': 'com.vmware.vapi.std.security.session_id',</text>
            <text>'sessionId': ....,</text>
            <text>}</text>
            <text>}</text>
            <text>vAPI runtime provides convenient factory methods that take session identifier</text>
            <text>as input parameter and create a security context that conforms to the above</text>
            <text>format.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.session_id</value>
      </constant>
      <constant name="USER_PASSWORD">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the security context in a request is using username/password based authentication scheme. </text>
              <paragraph>
                <text> In this scheme, the following pieces of information has to be passed in the SecurityContext structure in the execution context of the request: </text>
              </paragraph>
              <ul>
                <text> </text>
                <li>
                  <text>The scheme identifier - com.vmware.vapi.std.security.user_pass</text>
                </li>
                <text> </text>
                <li>
                  <text>Username</text>
                </li>
                <text> </text>
                <li>
                  <text>Password</text>
                </li>
                <text> </text>
              </ul>
              <text> </text>
              <paragraph>
                <text> Sample security context in JSON format that matches the specification: </text>
                <atCode>{
'schemeId': 'com.vmware.vapi.std.security.user_pass',
'userName': ....,
'password': ...
}</atCode>
                <text> </text>
                <breakline/>
                <text> vAPI runtime provides convenient factory methods that take username and password as input parameters and create a security context that conforms to the above format.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the security context in a request is using username/password</text>
            <text>based authentication scheme.</text>
            <text>&lt;p&gt;</text>
            <text>In this scheme, the following pieces of information</text>
            <text>has to be passed in the SecurityContext structure in the</text>
            <text>execution context of the request:</text>
            <text>&lt;ul&gt;</text>
            <text>&lt;li&gt;The scheme identifier - com.vmware.vapi.std.security.user_pass&lt;/li&gt;</text>
            <text>&lt;li&gt;Username&lt;/li&gt;</text>
            <text>&lt;li&gt;Password&lt;/li&gt;</text>
            <text>&lt;/ul&gt;</text>
            <text>&lt;p&gt;</text>
            <text>Sample security context in JSON format that matches the specification:</text>
            <text>{@code</text>
            <text>{</text>
            <text>'schemeId': 'com.vmware.vapi.std.security.user_pass',</text>
            <text>'userName': ....,</text>
            <text>'password': ...</text>
            <text>}</text>
            <text>}</text>
            <text>&lt;br&gt;</text>
            <text>vAPI runtime provides convenient factory methods that take username and password</text>
            <text>as input parameters and create a security context that conforms to the above</text>
            <text>format.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.user_pass</value>
      </constant>
      <constant name="OAUTH_ACCESS_TOKEN">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the security context in a request is using OAuth2 based authentication scheme. </text>
              <paragraph>
                <text> In this scheme, the following pieces of information has to be passed in the SecurityContext structure in the execution context of the request: </text>
              </paragraph>
              <ul>
                <text> </text>
                <li>
                  <text>The scheme identifier - com.vmware.vapi.std.security.oauth</text>
                </li>
                <text> </text>
                <li>
                  <text>Valid OAuth2 access token - This is usually acquired by OAuth2 Authorization Server after successful authentication of the end user.</text>
                </li>
                <text> </text>
              </ul>
              <text> </text>
              <paragraph>
                <text> Sample security context in JSON format that matches the specification: </text>
                <atCode>{
'schemeId': 'com.vmware.vapi.std.security.oauth',
'accesstoken': ....
}</atCode>
                <text> </text>
                <breakline/>
                <text> vAPI runtime provides convenient factory methods that takes OAuth2 access token as input parameter and creates a security context that conforms to the above format.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the security context in a request is using OAuth2</text>
            <text>based authentication scheme.</text>
            <text>&lt;p&gt;</text>
            <text>In this scheme, the following pieces of information</text>
            <text>has to be passed in the SecurityContext structure in the</text>
            <text>execution context of the request:</text>
            <text>&lt;ul&gt;</text>
            <text>&lt;li&gt;The scheme identifier - com.vmware.vapi.std.security.oauth&lt;/li&gt;</text>
            <text>&lt;li&gt;Valid OAuth2 access token - This is usually acquired by OAuth2</text>
            <text>Authorization Server after successful authentication of the</text>
            <text>end user.&lt;/li&gt;</text>
            <text>&lt;/ul&gt;</text>
            <text>&lt;p&gt;</text>
            <text>Sample security context in JSON format that matches the specification:</text>
            <text>{@code</text>
            <text>{</text>
            <text>'schemeId': 'com.vmware.vapi.std.security.oauth',</text>
            <text>'accesstoken': ....</text>
            <text>}</text>
            <text>}</text>
            <text>&lt;br&gt;</text>
            <text>vAPI runtime provides convenient factory methods that takes OAuth2 access token</text>
            <text>as input parameter and creates a security context that conforms to the above</text>
            <text>format.</text>
          </description>
        </doc>
        <value>com.vmware.vapi.std.security.oauth</value>
      </constant>
    </structure>
    <structure name="DynamicID" namespace="com.vmware.vapi.std" fingerprint="76bbd6e460ab996c748e9209feee5c27d9bb9df3">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.DynamicID" type="true" tag="name">DynamicID</atName>
            <text> </text>
            <atTerm>structure</atTerm>
            <text> represents an identifier for a resource of an arbitrary type.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name DynamicID} {@term structure} represents an identifier for a</text>
          <text>resource of an arbitrary type.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="type">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>The type of resource being identified (for example </text>
              <atCode>com.acme.Person</atCode>
              <text>). </text>
              <paragraph>
                <text> </text>
                <atTerm>Services</atTerm>
                <text> that contain </text>
                <atTerm>operations</atTerm>
                <text> for creating and deleting resources typically contain a </text>
                <atTerm>constant</atTerm>
                <text> specifying the resource type for the resources being created and deleted. The API metamodel metadata </text>
                <atTerm>services</atTerm>
                <text> include a </text>
                <atTerm>service</atTerm>
                <text> that allows retrieving all the known resource types.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>The type of resource being identified (for example</text>
            <text>{@code com.acme.Person}).</text>
            <text>&lt;p&gt;</text>
            <text>{@term Services} that contain {@term operations} for creating and</text>
            <text>deleting resources typically contain a {@term constant} specifying the</text>
            <text>resource type for the resources being created and deleted.</text>
            <text>The API metamodel metadata {@term services} include a {@term service}</text>
            <text>that allows retrieving all the known resource types.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="id">
        <type primitive="ID"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>The identifier for a resource whose type is specified by </text>
              <atLink resolved="com.vmware.vapi.std.DynamicID.type" member="true">#type</atLink>
              <text>.</text>
            </docModel>
          </descriptionModel>
          <contentModel type="metadata">
            <docModel>
              <text>When clients pass a value of this </text>
              <atTerm>structure</atTerm>
              <text> as a </text>
              <atTerm>parameter</atTerm>
              <text>, the </text>
              <atTerm>field</atTerm>
              <text> </text>
              <atName resolved="com.vmware.vapi.std.DynamicID.type" member="true" tag="name">#type</atName>
              <text> must contain the actual resource type. When </text>
              <atTerm>operations</atTerm>
              <text> return a value of this </text>
              <atTerm>structure</atTerm>
              <text> as a </text>
              <atTerm>result</atTerm>
              <text>, the </text>
              <atTerm>field</atTerm>
              <text> </text>
              <atName resolved="com.vmware.vapi.std.DynamicID.type" member="true" tag="name">#type</atName>
              <text> will contain the actual resource type.</text>
            </docModel>
          </contentModel>
          <description index="0">
            <text>The identifier for a resource whose type is specified by {@link #type}.</text>
          </description>
          <content type="metadata">
            <text>When clients pass a value of this {@term structure} as a {@term parameter}, </text>
            <text>the {@term field} {@name #type} must contain the actual resource type.</text>
            <text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text>
            <text>the {@term field} {@name #type} will contain the actual resource type.</text>
          </content>
        </doc>
        <metadata>
          <property name="Resource" type="java.util.Map">
            <entry key="typeHolder" type="java.lang.String">type</entry>
          </property>
        </metadata>
      </attribute>
    </structure>
    <structure name="LocalizableMessage" namespace="com.vmware.vapi.std" fingerprint="ff80ea71fa867a8d09b13e36ce8b9fbbac2677fd">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.LocalizableMessage" type="true" tag="name">LocalizableMessage</atName>
            <text> </text>
            <atTerm>structure</atTerm>
            <text> represents a localizable string or message template. </text>
            <atTerm>Services</atTerm>
            <text> include one or more localizable message templates in the </text>
            <atTerm>errors</atTerm>
            <text> they report so that clients can display diagnostic messages in the native language of the user. </text>
            <atTerm>Services</atTerm>
            <text> can include localizable strings in the data returned from </text>
            <atTerm>operations</atTerm>
            <text> to allow clients to display localized status information in the native language of the user.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name LocalizableMessage} {@term structure} represents a localizable</text>
          <text>string or message template.  {@term Services} include one or more localizable</text>
          <text>message templates in the {@term errors} they report so that clients can</text>
          <text>display diagnostic messages in the native language of the user.</text>
          <text>{@term Services} can include localizable strings in the data returned from</text>
          <text>{@term operations} to allow clients to display localized status information</text>
          <text>in the native language of the user.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="id">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Unique identifier of the localizable string or message template. </text>
              <paragraph>
                <text> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Unique identifier of the localizable string or message template.</text>
            <text>&lt;p&gt;</text>
            <text>This identifier is typically used to retrieve a locale-specific</text>
            <text>string or message template from a message catalog.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="defaultMessage">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>The value of this localizable string or message template in the </text>
              <atCode>en_US</atCode>
              <text> (English) locale. If </text>
              <atLink resolved="com.vmware.vapi.std.LocalizableMessage.id" member="true">#id</atLink>
              <text> refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user. It could also be used as a fallback if a client is unable to access the appropriate message catalog.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>The value of this localizable string or message template in the</text>
            <text>{@code en_US} (English) locale.  If {@link #id} refers to a message</text>
            <text>template, the default message will contain the substituted arguments.</text>
            <text>This value can be used by clients that do not need to display strings and</text>
            <text>messages in the native language of the user.  It could also be used as a</text>
            <text>fallback if a client is unable to access the appropriate message catalog.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="args">
        <type generic="List">
          <type primitive="String"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Arguments to be substituted into a message template.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Arguments to be substituted into a message template.</text>
          </description>
        </doc>
      </attribute>
    </structure>
  </package>
  <package name="com.vmware.vapi.std.activation" fingerprint="cb63668a0f9d0ef761001c6ce0080f41e211ebe4">
    <doc>
      <descriptionModel index="0">
        <docModel>
          <text>The </text>
          <atName resolved="com.vmware.vapi.std.activation" pkg="true" tag="name">com.vmware.vapi.std.activation</atName>
          <text> </text>
          <atTerm>package</atTerm>
          <text> provides </text>
          <atTerm>services</atTerm>
          <text> that TODO.</text>
        </docModel>
      </descriptionModel>
      <description index="0">
        <text>The {@name com.vmware.vapi.std.activation} {@term package} provides</text>
        <text>{@term services} that TODO.</text>
      </description>
    </doc>
    <service name="ActivationManager" namespace="com.vmware.vapi.std.activation" fingerprint="01c0a0c881a5d13ec2339cce7814d1f1ef25964d">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <bold>
              <text>WARNING:</text>
            </bold>
            <text> Use only as a sample. The API is experimental and subject to change in future versions. </text>
            <paragraph>
              <text> Activation tracking/management service. </text>
            </paragraph>
            <paragraph>
              <text> An activation describes a method invocation in the runtime.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>&lt;b&gt;WARNING:&lt;/b&gt; Use only as a sample. The API is experimental and subject to</text>
          <text>change in future versions.</text>
          <text>&lt;p&gt;</text>
          <text>Activation tracking/management service.</text>
          <text>&lt;p&gt;</text>
          <text>An activation describes a method invocation in the runtime.</text>
        </description>
      </doc>
      <operation name="cancel" fingerprint="88b831974e140bb9cf743bb3ce36e63e3d8e473b">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Asks for cancellation of a running activation. Whether or not the cancellation request will have any effect depends on the implementation of the method that has to be canceled.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Asks for cancellation of a running activation. Whether or not the</text>
            <text>cancellation request will have any effect depends on the implementation</text>
            <text>of the method that has to be canceled.</text>
          </description>
        </doc>
        <parameter name="activationId">
          <type primitive="String"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>activation identifier</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>activation identifier</text>
            </description>
          </doc>
        </parameter>
        <error name="NotFound">
          <type reference="NotFound" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.NotFound"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>there is no activation with the specified id</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>there is no activation with the specified id</text>
            </description>
          </doc>
        </error>
        <result/>
      </operation>
    </service>
  </package>
  <package name="com.vmware.vapi.std.errors" fingerprint="8134c9bbad23518a64dcf565a0594a5d1c5c6f2c">
    <doc>
      <descriptionModel index="0">
        <docModel>
          <text>The </text>
          <atName resolved="com.vmware.vapi.std.errors" pkg="true" tag="name">com.vmware.vapi.std.errors</atName>
          <text> </text>
          <atTerm>package</atTerm>
          <text> provides the standard </text>
          <atTerm>errors</atTerm>
          <text> that can be included in the list of </text>
          <atTerm>errors</atTerm>
          <text> in the specification of </text>
          <atTerm>operations</atTerm>
          <text> to indicate that the </text>
          <atTerm>operation</atTerm>
          <text> might report those </text>
          <atTerm>errors</atTerm>
          <text>. It also provides some </text>
          <atTerm>structures</atTerm>
          <text> intended to be used as payload to provide additional information about those </text>
          <atTerm>errors</atTerm>
          <text>.</text>
        </docModel>
      </descriptionModel>
      <description index="0">
        <text>The {@name com.vmware.vapi.std.errors} {@term package} provides the standard</text>
        <text>{@term errors} that can be included in the list of {@term errors} in the</text>
        <text>specification of {@term operations} to indicate that the {@term operation}</text>
        <text>might report those {@term errors}.</text>
        <text>It also provides some {@term structures} intended to be used as payload to</text>
        <text>provide additional information about those {@term errors}.</text>
      </description>
    </doc>
    <structure name="AlreadyExists" namespace="com.vmware.vapi.std.errors" fingerprint="5db9c5e7fe7fd8845f26cf04f6d4271b5f1d0ca2">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.AlreadyExists" type="true" tag="name">AlreadyExists</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that an attempt was made to create an entity but the entity already exists. Typically the entity has a name or identifier that is required to be unique in some context, but there is already an entity with that name or identifier in that context. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to create a new tag category when a tag category with the specified name already exists.</text>
              </li>
              <text> </text>
              <li>
                <text>Trying to create a new tag in tag category when a tag with the specified name already exists the tag category.</text>
              </li>
              <text> </text>
              <li>
                <text>Trying to create a LUN with a specific UUID on a node (for replication purposes) when a LUN with that UUID already exists on the node.</text>
              </li>
              <text> </text>
              <li>
                <text>Trying to create a file in a directory or move or copy a file to a directory when a file with that name already exists in the directory. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name AlreadyExists} {@term error} indicates that an attempt was made to</text>
          <text>create an entity but the entity already exists.  Typically the entity has a</text>
          <text>name or identifier that is required to be unique in some context, but there</text>
          <text>is already an entity with that name or identifier in that context.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to create a new tag category when a tag category with the</text>
          <text>specified name already exists.&lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to create a new tag in tag category when a tag with the</text>
          <text>specified name already exists the tag category.&lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to create a LUN with a specific UUID on a node (for replication</text>
          <text>purposes) when a LUN with that UUID already exists on the node.&lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to create a file in a directory or move or copy a file to a</text>
          <text>directory when a file with that name already exists in the directory.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="AlreadyInDesiredState" namespace="com.vmware.vapi.std.errors" fingerprint="ebc899d4335b267e02ccb5ce3c11f98bd4cf7684">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.AlreadyInDesiredState" type="true" tag="name">AlreadyInDesiredState</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that an attempt to change the state of a resource or service had no effect because the resource or service is already in the desired state. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power on a virtual machine that is already powered on.</text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name AlreadyInDesiredState} {@term error} indicates that an attempt to</text>
          <text>change the state of a resource or service had no effect because the resource</text>
          <text>or service is already in the desired state.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power on a virtual machine that is already powered on.&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ArgumentLocations" namespace="com.vmware.vapi.std.errors" fingerprint="db9ed310d4ea4b1fc49d62c1b066c42a9541879d">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ArgumentLocations" type="true" tag="name">ArgumentLocations</atName>
            <text> </text>
            <atTerm>structure</atTerm>
            <text> describes which part(s) of the input to the </text>
            <atTerm>operation</atTerm>
            <text> caused the </text>
            <atTerm>error</atTerm>
            <text>. </text>
            <paragraph>
              <text> Some types of </text>
              <atTerm>errors</atTerm>
              <text> are caused by the value of one of the inputs to the </text>
              <atTerm>operation</atTerm>
              <text>, possibly due to an interaction with other inputs to the </text>
              <atTerm>operation</atTerm>
              <text>. This </text>
              <atTerm>structure</atTerm>
              <text> is intended to be used as the payload to identify those inputs when the </text>
              <atTerm>operation</atTerm>
              <text> reports </text>
              <atTerm>errors</atTerm>
              <text> like </text>
              <atLink resolved="com.vmware.vapi.std.errors.InvalidArgument" type="true">InvalidArgument</atLink>
              <text> or </text>
              <atLink resolved="com.vmware.vapi.std.errors.NotFound" type="true">NotFound</atLink>
              <text>. See </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.data" member="true">Error#data</atLink>
              <text>.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ArgumentLocations} {@term structure} describes which part(s) of</text>
          <text>the input to the {@term operation} caused the {@term error}.</text>
          <text>&lt;p&gt;</text>
          <text>Some types of {@term errors} are caused by the value of one of the inputs to</text>
          <text>the {@term operation}, possibly due to an interaction with other inputs to</text>
          <text>the {@term operation}.</text>
          <text>This {@term structure} is intended to be used as the payload to identify</text>
          <text>those inputs when the {@term operation} reports {@term errors} like</text>
          <text>{@link InvalidArgument} or {@link NotFound}.</text>
          <text>See {@link Error#data}.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="primary">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>String describing the location of the input that triggered the </text>
              <atTerm>error</atTerm>
              <text>.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>String describing the location of the input that triggered the</text>
            <text>{@term error}.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="secondary">
        <type generic="List">
          <type primitive="String"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <atTerm>List</atTerm>
              <text> (possibly empty) of strings describing the locations of other inputs that caused the the primary input to trigger the </text>
              <atTerm>error</atTerm>
              <text>.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>{@term List} (possibly empty) of strings describing the locations of</text>
            <text>other inputs that caused the the primary input to trigger the</text>
            <text>{@term error}.</text>
          </description>
        </doc>
      </attribute>
    </structure>
    <structure name="Canceled" namespace="com.vmware.vapi.std.errors" fingerprint="297629c0f6f079a969ad9f484c434ee67276b382">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.Canceled" type="true" tag="name">Canceled</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> canceled itself in response to an explicit request to do so. </text>
            <atTerm>Operations</atTerm>
            <text> being "canceled" for other reasons (for example the client connection was closed, a time out occured, or due to excessive resource consumption) should not report this </text>
            <atTerm>error</atTerm>
            <text>. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A user is monitoring the progress of the </text>
                <atTerm>operation</atTerm>
                <text> in a GUI and sees that it is likely to take longer than he is willing to wait and clicks the cancel button. </text>
              </li>
              <text> </text>
              <li>
                <text>A user invokes the </text>
                <atTerm>operation</atTerm>
                <text> using a command-line tool and decides that she didn't really want to invoke that </text>
                <atTerm>operation</atTerm>
                <text>, and presses CTRL-c. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The client's connection to the server was closed. Reporting an </text>
                <atTerm>error</atTerm>
                <text> is pointless since the client will not receive the error response because the connection has been closed. </text>
              </li>
              <text> </text>
              <li>
                <text>The request is taking longer than some amount of time. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.TimedOut" type="true">TimedOut</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be reported if the time was specified as part of the input or is documented in the API contract. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name Canceled} {@term error} indicates that the {@term operation}</text>
          <text>canceled itself in response to an explicit request to do so.</text>
          <text>{@term Operations} being "canceled" for other reasons (for example the client</text>
          <text>connection was closed, a time out occured, or due to excessive resource</text>
          <text>consumption) should not report this {@term error}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A user is monitoring the progress of the {@term operation} in a GUI and</text>
          <text>sees that it is likely to take longer than he is willing to wait and</text>
          <text>clicks the cancel button. &lt;/li&gt;</text>
          <text>&lt;li&gt;A user invokes the {@term operation} using a command-line tool and</text>
          <text>decides that she didn't really want to invoke that {@term operation},</text>
          <text>and presses CTRL-c. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The client's connection to the server was closed. Reporting an</text>
          <text>{@term error} is pointless since the client will not receive the error</text>
          <text>response because the connection has been closed. &lt;/li&gt;</text>
          <text>&lt;li&gt;The request is taking longer than some amount of time.  The {@link</text>
          <text>TimedOut} {@term error} would be reported if the time was specified as</text>
          <text>part of the input or is documented in the API contract. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ConcurrentChange" namespace="com.vmware.vapi.std.errors" fingerprint="202b282c84fad8dd5e2afda5044c9cd323720d36">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ConcurrentChange" type="true" tag="name">ConcurrentChange</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that a data structure, entity, or resource has been modified since some earlier point in time. Typically this happens when the client is doing the </text>
            <italic>
              <text>write</text>
            </italic>
            <text> portion of a read-modify-write sequence and indicates that it wants the server to notify it if the data in the server has changed after it did the </text>
            <italic>
              <text>read</text>
            </italic>
            <text>, so that it can avoid overwriting that change inadvertantly.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ConcurrentChange} {@term error} indicates  that a data structure,</text>
          <text>entity, or resource has been modified since some earlier point in time.</text>
          <text>Typically this happens when the client is doing the &lt;i&gt;write&lt;/i&gt; portion of a</text>
          <text>read-modify-write sequence and indicates that it wants the server to notify</text>
          <text>it if the data in the server has changed after it did the &lt;i&gt;read&lt;/i&gt;, so</text>
          <text>that it can avoid overwriting that change inadvertantly.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="Error" namespace="com.vmware.vapi.std.errors" fingerprint="249a2781c3f559120f79707eb9520b1e943c2a10">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.Error" type="true" tag="name">Error</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> describes the</text>
            <atTerm>fields</atTerm>
            <text> common to all standard </text>
            <atTerm>errors</atTerm>
            <text>. </text>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> serves two purposes: </text>
            </paragraph>
            <ol>
              <text> </text>
              <li>
                <text>It is the </text>
                <atTerm>error</atTerm>
                <text> that clients in many programming languages can catch to handle all standard </text>
                <atTerm>errors</atTerm>
                <text>. Typically those clients will display one or more of the localizable messages from </text>
                <atLink resolved="com.vmware.vapi.std.errors.Error.messages" member="true">#messages</atLink>
                <text> to a human. </text>
              </li>
              <text> </text>
              <li>
                <text>It is the </text>
                <atTerm>error</atTerm>
                <text> that </text>
                <atTerm>operations</atTerm>
                <text> can report when they need to report some </text>
                <atTerm>error</atTerm>
                <text>, but the </text>
                <atTerm>error</atTerm>
                <text> doesn't fit into any other standard </text>
                <atTerm>error</atTerm>
                <text>, and in fact the only reasonable way for a client to react to the </text>
                <atTerm>error</atTerm>
                <text> is to display the message(s) to a human. </text>
              </li>
              <text> </text>
            </ol>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name Error} {@term error} describes the{@term fields} common to all standard {@term errors}.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} serves two purposes:</text>
          <text>&lt;ol&gt;</text>
          <text>&lt;li&gt;It is the {@term error} that clients in many programming</text>
          <text>languages can catch to handle all standard {@term errors}.  Typically</text>
          <text>those clients will display one or more of the localizable messages from</text>
          <text>{@link #messages} to a human. &lt;/li&gt;</text>
          <text>&lt;li&gt;It is the {@term error} that {@term operations} can report when</text>
          <text>they need to report some {@term error}, but the {@term error} doesn't</text>
          <text>fit into any other standard {@term error}, and in fact the only</text>
          <text>reasonable way for a client to react to the {@term error} is to display</text>
          <text>the message(s) to a human. &lt;/li&gt;</text>
          <text>&lt;/ol&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
        <property name="ErrorType" type="java.lang.String">Exception</property>
      </metadata>
      <attribute name="messages">
        <type generic="List">
          <type reference="LocalizableMessage" namespace="com.vmware.vapi.std" target="STRUCTURE" declaration="com.vmware.vapi.std.LocalizableMessage"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Stack of one or more localizable messages for human </text>
              <atTerm>error</atTerm>
              <text> consumers. </text>
              <paragraph>
                <text> The message at the top of the stack (first in the list) describes the </text>
                <atTerm>error</atTerm>
                <text> from the perspective of the </text>
                <atTerm>operation</atTerm>
                <text> the client invoked. Each subsequent message in the stack describes the "cause" of the prior message.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Stack of one or more localizable messages for human {@term error}</text>
            <text>consumers.</text>
            <text>&lt;p&gt;</text>
            <text>The message at the top of the stack (first in the list) describes</text>
            <text>the {@term error} from the perspective of the {@term operation} the</text>
            <text>client invoked.</text>
            <text>Each subsequent message in the stack describes the "cause" of the prior</text>
            <text>message.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="data">
        <type generic="Optional">
          <type primitive="DynamicStructure"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Data to facilitate clients responding to the </text>
              <atTerm>operation</atTerm>
              <text> reporting a standard </text>
              <atTerm>error</atTerm>
              <text> to indicating that it was unable to complete successfully. </text>
              <paragraph>
                <text> </text>
                <atTerm>Operations</atTerm>
                <text> may provide data that clients can use when responding to </text>
                <atTerm>errors</atTerm>
                <text>. Since the data that clients need may be specific to the context of the </text>
                <atTerm>operation</atTerm>
                <text> reporting the </text>
                <atTerm>error</atTerm>
                <text>, different </text>
                <atTerm>operations</atTerm>
                <text> that report the same </text>
                <atTerm>error</atTerm>
                <text> may provide different data in the </text>
                <atTerm>error</atTerm>
                <text>. The documentation for each each </text>
                <atTerm>operation</atTerm>
                <text> will describe what, if any, data it provides for each </text>
                <atTerm>error</atTerm>
                <text> it reports. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ArgumentLocations" type="true">ArgumentLocations</atLink>
                <text>, </text>
                <atLink resolved="com.vmware.vapi.std.errors.FileLocations" type="true">FileLocations</atLink>
                <text>, and </text>
                <atLink resolved="com.vmware.vapi.std.errors.TransientIndication" type="true">TransientIndication</atLink>
                <text> </text>
                <atTerm>structures</atTerm>
                <text> are intended as possible values for this </text>
                <atTerm>field</atTerm>
                <text>. </text>
                <atLink resolved="com.vmware.vapi.std.DynamicID" type="true">com.vmware.vapi.std.DynamicID</atLink>
                <text> may also be useful as a value for this </text>
                <atTerm>field</atTerm>
                <text> (although that is not its primary purpose). Some </text>
                <atTerm>services</atTerm>
                <text> may provide their own specific </text>
                <atTerm>structures</atTerm>
                <text> for use as the value of this </text>
                <atTerm>field</atTerm>
                <text> when reporting </text>
                <atTerm>errors</atTerm>
                <text> from their </text>
                <atTerm>operations</atTerm>
                <text>.</text>
              </paragraph>
            </docModel>
          </descriptionModel>
          <contentModel type="optionalReason">
            <docModel>
              <text>Some </text>
              <atTerm>operations</atTerm>
              <text> will not set this </text>
              <atTerm>field</atTerm>
              <text> when reporting </text>
              <atTerm>errors</atTerm>
              <text>.</text>
            </docModel>
          </contentModel>
          <description index="0">
            <text>Data to facilitate clients responding to the {@term operation} reporting</text>
            <text>a standard {@term error} to indicating that it was unable to complete</text>
            <text>successfully.</text>
            <text>&lt;p&gt;</text>
            <text>{@term Operations} may provide data that clients can use when responding</text>
            <text>to {@term errors}.  Since the data that clients need may be specific to</text>
            <text>the context of the {@term operation} reporting the {@term error},</text>
            <text>different {@term operations} that report the same {@term error} may</text>
            <text>provide different data in the {@term error}.  The documentation for each</text>
            <text>each {@term operation} will describe what, if any, data it provides for</text>
            <text>each {@term error} it reports.</text>
            <text>The {@link ArgumentLocations}, {@link FileLocations}, and</text>
            <text>{@link TransientIndication} {@term structures} are intended as possible</text>
            <text>values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may</text>
            <text>also be useful as a value for this {@term field} (although that is not</text>
            <text>its primary purpose).  Some {@term services} may provide their own</text>
            <text>specific {@term structures} for use as the value of this {@term field}</text>
            <text>when reporting {@term errors} from their {@term operations}.</text>
          </description>
          <content type="optionalReason">
            <text>Some {@term operations} will not set this {@term field}</text>
            <text>when reporting {@term errors}.</text>
          </content>
        </doc>
      </attribute>
    </structure>
    <structure name="FeatureInUse" namespace="com.vmware.vapi.std.errors" fingerprint="13560f1f64d26ce9b77c87d723cab94af738681d">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.FeatureInUse" type="true" tag="name">FeatureInUse</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that an action cannot be completed because a feature is in use. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to disable snapshots on a virtual machine which has a snapshot. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to downgrade a license that has licensed features that are in use. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name FeatureInUse} {@term error} indicates that an action cannot be</text>
          <text>completed because a feature is in use.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to disable snapshots on a virtual machine which has a</text>
          <text>snapshot. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to downgrade a license that has licensed features that are in</text>
          <text>use. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="FileLocations" namespace="com.vmware.vapi.std.errors" fingerprint="d36d7fbdbdbe0acb234b86855a28638f76215fb5">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.FileLocations" type="true" tag="name">FileLocations</atName>
            <text> </text>
            <atTerm>structure</atTerm>
            <text> identifies the file(s) that caused the </text>
            <atTerm>operation</atTerm>
            <text> to report the </text>
            <atTerm>error</atTerm>
            <text>. </text>
            <paragraph>
              <text> Some types of </text>
              <atTerm>errors</atTerm>
              <text> are caused by a problem with one or more files. This </text>
              <atTerm>structure</atTerm>
              <text> is intended to be used as the payload to identify those files when the </text>
              <atTerm>operation</atTerm>
              <text> reports </text>
              <atTerm>errors</atTerm>
              <text> like </text>
              <atLink resolved="com.vmware.vapi.std.errors.NotFound" type="true">NotFound</atLink>
              <text>. See </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.data" member="true">Error#data</atLink>
              <text>.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name FileLocations} {@term structure} identifies the file(s) that</text>
          <text>caused the {@term operation} to report the {@term error}.</text>
          <text>&lt;p&gt;</text>
          <text>Some types of {@term errors} are caused by a problem with one or more files.</text>
          <text>This {@term structure} is intended to be used as the payload to identify</text>
          <text>those files when the {@term operation} reports {@term errors} like</text>
          <text>{@link NotFound}.</text>
          <text>See {@link Error#data}.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="primary">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>String identifying the file that triggered the </text>
              <atTerm>error</atTerm>
              <text>.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>String identifying the file that triggered the {@term error}.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="secondary">
        <type generic="List">
          <type primitive="String"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <atTerm>List</atTerm>
              <text> (possibly empty) of strings identifying other files that caused the primary file to trigger the </text>
              <atTerm>error</atTerm>
              <text>.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>{@term List} (possibly empty) of strings identifying other files that</text>
            <text>caused the primary file to trigger the {@term error}.</text>
          </description>
        </doc>
      </attribute>
    </structure>
    <structure name="InternalServerError" namespace="com.vmware.vapi.std.errors" fingerprint="dad9aac2a1b7b6f89cc00d1b5dad8e223f593819">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.InternalServerError" type="true" tag="name">InternalServerError</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the server encounters an unexpected condition that prevented it from fulfilling the request. </text>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> is reported by the API infrastructure, so it could occur in response to the invocation of any </text>
              <atTerm>operation</atTerm>
              <text>. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>operation</atTerm>
                <text> returns a value whose type doesn't match the type type the </text>
                <atTerm>operation</atTerm>
                <text> says it should return.</text>
              </li>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>operation</atTerm>
                <text> reports an </text>
                <atTerm>error</atTerm>
                <text> that is not included in the list of </text>
                <atTerm>errors</atTerm>
                <text> the </text>
                <atTerm>operation</atTerm>
                <text> says that it can report.</text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name InternalServerError} {@term error} indicates that the server</text>
          <text>encounters an unexpected condition that prevented it from fulfilling the</text>
          <text>request.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} is reported by the API infrastructure, so it could occur</text>
          <text>in response to the invocation of any {@term operation}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The {@term operation} returns a value whose type doesn't match the type</text>
          <text>type the {@term operation} says it should return.&lt;/li&gt;</text>
          <text>&lt;li&gt;The {@term operation} reports an {@term error} that is not included in</text>
          <text>the list of {@term errors} the {@term operation} says that it can</text>
          <text>report.&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="InvalidArgument" namespace="com.vmware.vapi.std.errors" fingerprint="f3e844b044d917c5538c22a2e740ab55f51e7620">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.InvalidArgument" type="true" tag="name">InvalidArgument</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the values received for one or more </text>
            <atTerm>parameters</atTerm>
            <text> are not acceptable. </text>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> is reported by the API infrastructure, so it could occur in response to the invocation of any </text>
              <atTerm>operation</atTerm>
              <text>. It may also be reported as the result of </text>
              <atTerm>operation</atTerm>
              <text>-specific validation. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A </text>
                <atTerm>parameter</atTerm>
                <text> has a value that is not of the expected type. </text>
              </li>
              <text> </text>
              <li>
                <text>A </text>
                <atTerm>parameter</atTerm>
                <text> has a value that is not in the required range. </text>
              </li>
              <text> </text>
              <li>
                <text>A </text>
                <atTerm>parameter</atTerm>
                <text> has a value that is not one of the specifically allowed strings. </text>
              </li>
              <text> </text>
              <li>
                <text>One </text>
                <atTerm>field</atTerm>
                <text> of a </text>
                <atTerm>structure</atTerm>
                <text> is the tag for a tagged union, and has a specific value but another </text>
                <atTerm>field</atTerm>
                <text> of the </text>
                <atTerm>structure</atTerm>
                <text> that is required to be specified when the tag has that value is not specified, or another </text>
                <atTerm>field</atTerm>
                <text> of the </text>
                <atTerm>structure</atTerm>
                <text> that is required to be unspecified when the tag has that value is specified. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to create a new tag in tag category when a tag with the specified name already exists the tag category. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.AlreadyExists" type="true">AlreadyExists</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Invoke the </text>
                <atTerm>operation</atTerm>
                <text> to retrieve information about a virtual machine, passing an id that does not identify an existing virtual machine. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.NotFound" type="true">NotFound</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to put a virtual machine into a folder that can only contain hosts. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.InvalidElementType" type="true">InvalidElementType</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to attach a SCSI virtual disk to an IDE port. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.InvalidElementType" type="true">InvalidElementType</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name InvalidArgument} {@term error} indicates that the values received</text>
          <text>for one or more {@term parameters} are not acceptable.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} is reported by the API infrastructure, so it could occur</text>
          <text>in response to the invocation of any {@term operation}.  It may also be</text>
          <text>reported as the result of {@term operation}-specific validation.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A {@term parameter} has a value that is not of the expected type. &lt;/li&gt;</text>
          <text>&lt;li&gt;A {@term parameter} has a value that is not in the required range.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;A {@term parameter} has a value that is not one of the specifically</text>
          <text>allowed strings. &lt;/li&gt;</text>
          <text>&lt;li&gt;One {@term field} of a {@term structure} is the tag for a tagged union,</text>
          <text>and has a specific value but another {@term field} of the</text>
          <text>{@term structure} that is required to be specified when the tag has</text>
          <text>that value is not specified, or another {@term field} of the</text>
          <text>{@term structure} that is required to be unspecified when the tag has</text>
          <text>that value is specified. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to create a new tag in tag category when a tag with the</text>
          <text>specified name already exists the tag category.</text>
          <text>The {@link AlreadyExists} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Invoke the {@term operation} to retrieve information about a virtual</text>
          <text>machine, passing an id that does not identify an existing virtual</text>
          <text>machine. The {@link NotFound} {@term error} would be used instead.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to put a virtual machine into a folder that can only contain</text>
          <text>hosts. The {@link InvalidElementType} {@term error} would be used</text>
          <text>instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to attach a SCSI virtual disk to an IDE port. The</text>
          <text>{@link InvalidElementType} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="InvalidElementConfiguration" namespace="com.vmware.vapi.std.errors" fingerprint="d173e4dc7b2c482c8757616d350b87827d372c5e">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.InvalidElementConfiguration" type="true" tag="name">InvalidElementConfiguration</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that an attempt to modify the configuration of an element or a group containing the element failed due to the configuraton of the element. A typical case is when the </text>
            <atTerm>operation</atTerm>
            <text> is am attempt to change the group membership of the element fails, in which case a configuration change on the element may allow the group membership change to succeed. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Attempt to move a host with a fault tolerant virtual machine out of a cluster (i.e. make the host a standalone host). </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to remove a host from a DRS cluster without putting the host into maintenance mode. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name InvalidElementConfiguration} {@term error} indicates that an</text>
          <text>attempt to modify the configuration of an element or a group containing the</text>
          <text>element failed due to the configuraton of the element.</text>
          <text>A typical case is when the {@term operation} is am attempt to change the</text>
          <text>group membership of the element fails, in which case a configuration change</text>
          <text>on the element may allow the group membership change to succeed.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Attempt to move a host with a fault tolerant virtual machine out of a</text>
          <text>cluster (i.e. make the host a standalone host). &lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to remove a host from a DRS cluster without putting the host</text>
          <text>into maintenance mode. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="InvalidElementType" namespace="com.vmware.vapi.std.errors" fingerprint="f60897bf53d153bf3a4a0504ab319faeb3615aa9">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.InvalidElementType" type="true" tag="name">InvalidElementType</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the server was unable to fulfil the request because an element of a specific type cannot be a member of particular group. </text>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> could be reported, for example, if an attempt is made to put an element into the wrong type of container. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Attempt to put a virtual machine into a folder that can only contain hosts. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to attach a SCSI virtual disk to an IDE port. </text>
              </li>
              <text> </text>
            </ul>
            <text> Counterexamples: </text>
            <ul>
              <text> </text>
              <li>
                <text>A </text>
                <atTerm>parameter</atTerm>
                <text> has a value that is not of the expected type. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.InvalidArgument" type="true">InvalidArgument</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name InvalidElementType} {@term error} indicates that the server was</text>
          <text>unable to fulfil the request because an element of a specific type cannot be</text>
          <text>a member of particular group.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} could be reported, for example, if an attempt is made to</text>
          <text>put an element into the wrong type of container.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Attempt to put a virtual machine into a folder that can only contain</text>
          <text>hosts. &lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to attach a SCSI virtual disk to an IDE port. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A {@term parameter} has a value that is not of the expected type. The</text>
          <text>{@link InvalidArgument} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="InvalidRequest" namespace="com.vmware.vapi.std.errors" fingerprint="1f510b653adfa1a990923a8352cd641234ac4039">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.InvalidRequest" type="true" tag="name">InvalidRequest</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the request is malformed in such a way that the server is unable to process it. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The XML in a SOAP request is not well-formed so the server cannot parse the request. </text>
              </li>
              <text> </text>
              <li>
                <text>The XML in a SOAP request is well-formed but does not match the structure required by the SOAP specification. </text>
              </li>
              <text> </text>
              <li>
                <text>A JSON-RPC request is not valid JSON. </text>
              </li>
              <text> </text>
              <li>
                <text>The JSON sent in a JSON-RPC request is not a valid JSON-RPC Request object. </text>
              </li>
              <text> </text>
              <li>
                <text>The Request object from a JSON-RPC request does not match the structure required by the API infrastructure. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>parameter</atTerm>
                <text> has a value that is not with the required range. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.InvalidArgument" type="true">InvalidArgument</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>The name of the </text>
                <atTerm>operation</atTerm>
                <text> specified in the request doesn't not match any known </text>
                <atTerm>operation</atTerm>
                <text>. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.NotFound" type="true">NotFound</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Some transport protocols (for example JSON-RPC) include their own mechanism for reporting these kinds of errors, and the API infrastructure for a programming language may expose the errors using a language specific mechanism, so this </text>
              <atTerm>error</atTerm>
              <text> might not be used.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name InvalidRequest} {@term error} indicates that the request is</text>
          <text>malformed in such a way that the server is unable to process it.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The XML in a SOAP request is not well-formed so the server cannot parse</text>
          <text>the request. &lt;/li&gt;</text>
          <text>&lt;li&gt;The XML in a SOAP request is well-formed but does not match the</text>
          <text>structure required by the SOAP specification. &lt;/li&gt;</text>
          <text>&lt;li&gt;A JSON-RPC request is not valid JSON. &lt;/li&gt;</text>
          <text>&lt;li&gt;The JSON sent in a JSON-RPC request is not a valid JSON-RPC</text>
          <text>Request object. &lt;/li&gt;</text>
          <text>&lt;li&gt;The Request object from a JSON-RPC request does not match the structure</text>
          <text>required by the API infrastructure. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The {@term parameter} has a value that is not with the required range.</text>
          <text>The {@link InvalidArgument} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;The name of the {@term operation} specified in the request doesn't not</text>
          <text>match any known {@term operation}. The {@link NotFound} {@term error}</text>
          <text>would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Some transport protocols (for example JSON-RPC) include their own mechanism</text>
          <text>for reporting these kinds of errors, and the API infrastructure for a</text>
          <text>programming language may expose the errors using a language specific</text>
          <text>mechanism, so this {@term error} might not be used.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="NotAllowedInCurrentState" namespace="com.vmware.vapi.std.errors" fingerprint="b12aa0f0c310933ccc4ba3dc2ffc90a745e1e1c1">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.NotAllowedInCurrentState" type="true" tag="name">NotAllowedInCurrentState</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the requested </text>
            <atTerm>operation</atTerm>
            <text> is not allowed with a resource or service in its current state. This could be because the </text>
            <atTerm>operation</atTerm>
            <text> is performing a configuration change that is not allowed in the current state or because </text>
            <atTerm>operation</atTerm>
            <text> itself is not allowed in the current state. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to add a virtual device that cannot be hot plugged to a running virtual machine. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to upgrade the virtual hardware version for a suspended virtual machine. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to power off, reset, or suspend a virtual machine that is not powered on. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power off a virtual machine that is in the process of being powered on. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceBusy" type="true">ResourceBusy</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name NotAllowedInCurrentState} {@term error} indicates that the</text>
          <text>requested {@term operation} is not allowed with a resource or service in its</text>
          <text>current state.  This could be because the {@term operation} is performing a</text>
          <text>configuration change that is not allowed in the current state or because</text>
          <text>{@term operation} itself is not allowed in the current state.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to add a virtual device that cannot be hot plugged to a running</text>
          <text>virtual machine. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to upgrade the virtual hardware version for a suspended virtual</text>
          <text>machine. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to power off, reset, or suspend a virtual machine that is not</text>
          <text>powered on. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text>
          <text>powered on. The {@link ResourceBusy} {@term error} would be used</text>
          <text>instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="NotFound" namespace="com.vmware.vapi.std.errors" fingerprint="10113ecef80e5548bc35f8d737cb487f770aed63">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.NotFound" type="true" tag="name">NotFound</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that a specified element could not be found. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Invoke the </text>
                <atTerm>operation</atTerm>
                <text> to retrieve information about a virtual machine, passing an id that does not identify an existing virtual machine. </text>
              </li>
              <text> </text>
              <li>
                <text>Invoke the </text>
                <atTerm>operation</atTerm>
                <text> to modify the configuration of a virtual nic, passing an id that does not identify an existing virtual nic in the specified virtual machine. </text>
              </li>
              <text> </text>
              <li>
                <text>Invoke the </text>
                <atTerm>operation</atTerm>
                <text> to remove a vswitch, passing an id that does not identify an existing vswitch. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name NotFound} {@term error} indicates that a specified element could not be found.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Invoke the {@term operation} to retrieve information about a virtual</text>
          <text>machine, passing an id that does not identify an existing virtual</text>
          <text>machine. &lt;/li&gt;</text>
          <text>&lt;li&gt;Invoke the {@term operation} to modify the configuration of a virtual</text>
          <text>nic, passing an id that does not identify an existing virtual nic in</text>
          <text>the specified virtual machine. &lt;/li&gt;</text>
          <text>&lt;li&gt;Invoke the {@term operation} to remove a vswitch, passing an id that</text>
          <text>does not identify an existing vswitch. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="OperationNotFound" namespace="com.vmware.vapi.std.errors" fingerprint="9b0426fe48320866e0d1cbe77185606d3c865bba">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.OperationNotFound" type="true" tag="name">OperationNotFound</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> specified in the request could not be found. </text>
            <paragraph>
              <text> Every API request specifies a service identifier and an operation identifier along with the </text>
              <atTerm>parameters</atTerm>
              <text>. If the API infrastructure is unable to find the requested </text>
              <atTerm>service</atTerm>
              <text> or </text>
              <atTerm>operation</atTerm>
              <text> it reports this </text>
              <atTerm>error</atTerm>
              <text>. </text>
            </paragraph>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> can be reported by the API infrastructure for any </text>
              <atTerm>operation</atTerm>
              <text>, but it is specific to the API infrastructure, and should never be reported by the implementation of any </text>
              <atTerm>operation</atTerm>
              <text>. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A client provides an invalid service or operation identifier when invoking the </text>
                <atTerm>operation</atTerm>
                <text> using a dynamic interface (for example REST). </text>
              </li>
              <text> </text>
              <li>
                <text>A client invokes the </text>
                <atTerm>operation</atTerm>
                <text> from a </text>
                <atTerm>service</atTerm>
                <text>, but that </text>
                <atTerm>service</atTerm>
                <text> has not been installed. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A client invokes a task scheduling </text>
                <atTerm>operation</atTerm>
                <text>, but provides an invalid service identifier or operation identifier. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.NotFound" type="true">NotFound</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name OperationNotFound} {@term error} indicates that the</text>
          <text>{@term operation} specified in the request could not be found.</text>
          <text>&lt;p&gt;</text>
          <text>Every API request specifies a service identifier and an operation identifier</text>
          <text>along with the {@term parameters}. If the API infrastructure is unable to</text>
          <text>find the requested {@term service} or {@term operation} it reports this</text>
          <text>{@term error}.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} can be reported by the API infrastructure for any</text>
          <text>{@term operation}, but it is specific to the API infrastructure, and should</text>
          <text>never be reported by the implementation of any {@term operation}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A client provides an invalid service or operation identifier when</text>
          <text>invoking the {@term operation} using a dynamic interface (for example</text>
          <text>REST).</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;A client invokes the {@term operation} from a {@term service}, but that</text>
          <text>{@term service} has not been installed. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A client invokes a task scheduling {@term operation}, but provides an</text>
          <text>invalid service identifier or operation identifier. The</text>
          <text>{@link NotFound} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ResourceBusy" namespace="com.vmware.vapi.std.errors" fingerprint="55ee0d46be913e065ae29781ca15495bda50c218">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ResourceBusy" type="true" tag="name">ResourceBusy</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> could not be completed because a resource it needs is busy. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power off a virtual machine that is in the process of being powered on. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to remove a VMFS datastore when there is a virtual machine registered on any host attached to the datastore. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceInUse" type="true">ResourceInUse</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ResourceBusy} {@term error} indicates that the {@term operation}</text>
          <text>could not be completed because a resource it needs is busy.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text>
          <text>powered on. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to remove a VMFS datastore when there is a virtual machine</text>
          <text>registered on any host attached to the datastore. The</text>
          <text>{@link ResourceInUse} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ResourceInUse" namespace="com.vmware.vapi.std.errors" fingerprint="9b368626754ac184c472d483b510b993638acc90">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ResourceInUse" type="true" tag="name">ResourceInUse</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> could not be completed because a resource is in use. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to remove a VMFS datastore when the is a virtual machine registered on any host attached to the datastore. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to add a virtual switch if the physical network adapter being bridged is already in use. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power off a virtual machine that is in the process of being powered on. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceBusy" type="true">ResourceBusy</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ResourceInUse} {@term error} indicates that the {@term operation}</text>
          <text>could not be completed because a resource is in use.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to remove a VMFS datastore when the is a virtual machine</text>
          <text>registered on any host attached to the datastore. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to add a virtual switch if the physical network adapter being</text>
          <text>bridged is already in use. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text>
          <text>powered on. The {@link ResourceBusy} {@term error} would be used instead.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ResourceInaccessible" namespace="com.vmware.vapi.std.errors" fingerprint="aa30ec22076c3c07a334ef53c25a66c1b12e8359">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ResourceInaccessible" type="true" tag="name">ResourceInaccessible</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> could not be completed because an entity is not accessible. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Attempt to invoke some </text>
                <atTerm>operation</atTerm>
                <text> on a virtual machine when the virtual machine's configuration file is not accessible (for example due to a storage APD condition). </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Attempt to invoke some </text>
                <atTerm>operation</atTerm>
                <text> when the server is too busy. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ServiceUnavailable" type="true">ServiceUnavailable</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to invoke some </text>
                <atTerm>operation</atTerm>
                <text> when the server is undergoing maintenance. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ServiceUnavailable" type="true">ServiceUnavailable</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Some </text>
                <atTerm>operation</atTerm>
                <text> fails to contact VMware Tools running inside the virtual machine. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ServiceUnavailable" type="true">ServiceUnavailable</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ResourceInaccessible} {@term error} indicates that the</text>
          <text>{@term operation} could not be completed because an entity is not accessible.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Attempt to invoke some {@term operation} on a virtual machine when the</text>
          <text>virtual machine's configuration file is not accessible (for example due</text>
          <text>to a storage APD condition). &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Attempt to invoke some {@term operation} when the server is too busy.</text>
          <text>The {@link ServiceUnavailable} {@term error} would be used instead.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to invoke some {@term operation} when the server is undergoing</text>
          <text>maintenance. The {@link ServiceUnavailable} {@term error} would be used</text>
          <text>instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Some {@term operation} fails to contact VMware Tools running inside the</text>
          <text>virtual machine. The {@link ServiceUnavailable} {@term error} would be</text>
          <text>used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="ServiceUnavailable" namespace="com.vmware.vapi.std.errors" fingerprint="633eb28ab7c3474df21cfe4d9fc046d504b7f505">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.ServiceUnavailable" type="true" tag="name">ServiceUnavailable</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>service</atTerm>
            <text> is unavailable. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Attempt to invoke a </text>
                <atTerm>operation</atTerm>
                <text> when the server is too busy. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to invoke a </text>
                <atTerm>operation</atTerm>
                <text> when the server is undergoing maintenance. </text>
              </li>
              <text> </text>
              <li>
                <text>An </text>
                <atTerm>operation</atTerm>
                <text> fails to contact VMware Tools running inside the virtual machine. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A client provides an invalid service or operation identifier when invoking the </text>
                <atTerm>operation</atTerm>
                <text> using a dynamic interface (for example REST). The </text>
                <atLink resolved="com.vmware.vapi.std.errors.OperationNotFound" type="true">OperationNotFound</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>A client invokes the </text>
                <atTerm>operation</atTerm>
                <text> from the </text>
                <atTerm>service</atTerm>
                <text>, but that </text>
                <atTerm>service</atTerm>
                <text> has not been installed. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.OperationNotFound" type="true">OperationNotFound</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name ServiceUnavailable} {@term error} indicates that the</text>
          <text>{@term service} is unavailable.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Attempt to invoke a {@term operation} when the server is too busy.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to invoke a {@term operation} when the server is undergoing</text>
          <text>maintenance. &lt;/li&gt;</text>
          <text>&lt;li&gt;An {@term operation} fails to contact VMware Tools running inside the</text>
          <text>virtual machine. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A client provides an invalid service or operation identifier when</text>
          <text>invoking the {@term operation} using a dynamic interface (for example</text>
          <text>REST). The {@link OperationNotFound} {@term error} would be used</text>
          <text>instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;A client invokes the {@term operation} from the {@term service}, but</text>
          <text>that {@term service} has not been installed. The</text>
          <text>{@link OperationNotFound} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="TimedOut" namespace="com.vmware.vapi.std.errors" fingerprint="98311f307a95fa71c04a2a406d2dd246932ec10b">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.TimedOut" type="true" tag="name">TimedOut</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> did not complete within the allowed amount of time. The allowed amount of time might be: </text>
            <ul>
              <text> </text>
              <li>
                <text>provided by the client as an input </text>
                <atTerm>parameter</atTerm>
                <text>. </text>
              </li>
              <text> </text>
              <li>
                <text>a fixed limit of the </text>
                <atTerm>service</atTerm>
                <text> implementation that is a documented part of the contract of the </text>
                <atTerm>service</atTerm>
                <text>. </text>
              </li>
              <text> </text>
              <li>
                <text>a configurable limit used by the implementation of the </text>
                <atTerm>service</atTerm>
                <text>. </text>
              </li>
              <text> </text>
              <li>
                <text>a dynamic limit computed by the implementation of the </text>
                <atTerm>service</atTerm>
                <text>. </text>
              </li>
              <text> </text>
            </ul>
            <text> The </text>
            <atTerm>operation</atTerm>
            <text> may or may not complete after the </text>
            <atName resolved="com.vmware.vapi.std.errors.TimedOut" type="true" tag="name">TimedOut</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> was reported. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>operation</atTerm>
                <text> was unable to complete within the timeout duration specified by a </text>
                <atTerm>parameter</atTerm>
                <text> of the </text>
                <atTerm>operation</atTerm>
                <text>. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A server implementation that puts requests into a queue before dispatching them might delete a request from the queue if it doesn't get dispatched within </text>
                <italic>
                  <text>n</text>
                </italic>
                <text> minutes. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ServiceUnavailable" type="true">ServiceUnavailable</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name TimedOut} {@term error} indicates that the {@term operation} did</text>
          <text>not complete within the allowed amount of time.  The allowed amount of time</text>
          <text>might be:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;provided by the client as an input {@term parameter}. &lt;/li&gt;</text>
          <text>&lt;li&gt;a fixed limit of the {@term service} implementation that is a</text>
          <text>documented part of the contract of the {@term service}. &lt;/li&gt;</text>
          <text>&lt;li&gt;a configurable limit used by the implementation of the {@term service}.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;li&gt;a dynamic limit computed by the implementation of the {@term service}.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>The {@term operation} may or may not complete after the {@name TimedOut}</text>
          <text>{@term error} was reported.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The {@term operation} was unable to complete within the timeout</text>
          <text>duration specified by a {@term parameter} of the {@term operation}.</text>
          <text>&lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A server implementation that puts requests into a queue before</text>
          <text>dispatching them might delete a request from the queue if it doesn't</text>
          <text>get dispatched within &lt;i&gt;n&lt;/i&gt; minutes.  The {@link ServiceUnavailable}</text>
          <text>{@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="TransientIndication" namespace="com.vmware.vapi.std.errors" fingerprint="17c1a3072e3152b0e6cabb03e8a200380efeecb2">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.TransientIndication" type="true" tag="name">TransientIndication</atName>
            <text> </text>
            <atTerm>structure</atTerm>
            <text> indicates whether or not the </text>
            <atTerm>error</atTerm>
            <text> is transient. </text>
            <paragraph>
              <text> Some types of </text>
              <atTerm>errors</atTerm>
              <text> are transient in certain situtations and not transient in other situtations. This </text>
              <atTerm>error</atTerm>
              <text> payload can be used to indicate to clients whether a particular </text>
              <atTerm>error</atTerm>
              <text> is transient. See </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.data" member="true">Error#data</atLink>
              <text>.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name TransientIndication} {@term structure} indicates whether or not</text>
          <text>the {@term error} is transient.</text>
          <text>&lt;p&gt;</text>
          <text>Some types of {@term errors} are transient in certain situtations and not</text>
          <text>transient in other situtations.  This {@term error} payload can be used to</text>
          <text>indicate to clients whether a particular {@term error} is transient.</text>
          <text>See {@link Error#data}.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="isTransient">
        <type primitive="boolean"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Indicates that the </text>
              <atTerm>error</atTerm>
              <text> this </text>
              <atTerm>structure</atTerm>
              <text> is attached to is transient.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Indicates that the {@term error} this {@term structure} is attached to is</text>
            <text>transient.</text>
          </description>
        </doc>
      </attribute>
    </structure>
    <structure name="UnableToAllocateResource" namespace="com.vmware.vapi.std.errors" fingerprint="d644da8c86120ad9d989882224efefdc068c1c54">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.UnableToAllocateResource" type="true" tag="name">UnableToAllocateResource</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> failed because it was unable to allocate or acquire a required resource. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power on a virtual machine when there are not enough licenses to do so. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to power on a virtual machine that would violate a resource usage policy. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to power off a virtual machine that is in the process of being powered on. A </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceBusy" type="true">ResourceBusy</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to remove a VMFS datastore when the is a virtual machine registered on any host attached to the datastore. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceInUse" type="true">ResourceInUse</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to add a virtual switch if the physical network adapter being bridged is already in use. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceInUse" type="true">ResourceInUse</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>Attempt to invoke some </text>
                <atTerm>operation</atTerm>
                <text> on a virtual machine when the virtual machine's configuration file is not accessible (for example due to a storage APD condition). The </text>
                <atLink resolved="com.vmware.vapi.std.errors.ResourceInaccessible" type="true">ResourceInaccessible</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name UnableToAllocateResource} {@term error} indicates that the</text>
          <text>{@term operation} failed because it was unable to allocate or acquire a</text>
          <text>required resource.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power on a virtual machine when there are not enough licenses</text>
          <text>to do so. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to power on a virtual machine that would violate a resource</text>
          <text>usage policy. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text>
          <text>powered on. A {@link ResourceBusy} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to remove a VMFS datastore when the is a virtual machine</text>
          <text>registered on any host attached to the datastore. The</text>
          <text>{@link ResourceInUse} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to add a virtual switch if the physical network adapter being</text>
          <text>bridged is already in use. The {@link ResourceInUse} {@term error}</text>
          <text>would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;Attempt to invoke some {@term operation} on a virtual machine when the</text>
          <text>virtual machine's configuration file is not accessible (for example due</text>
          <text>to a storage APD condition). The {@link ResourceInaccessible}</text>
          <text>{@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="Unauthenticated" namespace="com.vmware.vapi.std.errors" fingerprint="0e184d2bd642101097cb6fc92914d8563a45e7bb">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.Unauthenticated" type="true" tag="name">Unauthenticated</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> requires authentication and the user is not authenticated. </text>
            <paragraph>
              <text> API requests may include a security context containing user credentials. For example, the user credentials could be a SAML token, a user name and password, or the session identifier for a previously established session. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The SAML token in the request's security context has expired. </text>
              </li>
              <text> </text>
              <li>
                <text>The user name and password in the request's security context are invalid. </text>
              </li>
              <text> </text>
              <li>
                <text>The session identifier in the request's security context identifies a session that has expired. </text>
              </li>
              <text> </text>
            </ul>
            <text> Counterexamples: </text>
            <ul>
              <text> </text>
              <li>
                <text> The user is authenticated but isn't authorized to perform the requested </text>
                <atTerm>operation</atTerm>
                <text>. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.Unauthorized" type="true">Unauthorized</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> For security reasons, the </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.data" member="true">Error#data</atLink>
              <text> </text>
              <atTerm>field</atTerm>
              <text> in this </text>
              <atTerm>error</atTerm>
              <text> is </text>
              <atTerm>unset</atTerm>
              <text>, and the </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.messages" member="true">Error#messages</atLink>
              <text> </text>
              <atTerm>field</atTerm>
              <text> in this </text>
              <atTerm>error</atTerm>
              <text> does not disclose which part of the security context is correct or incorrect. For example the messages would not disclose whether a username or a password is valid or invalid, but only that a combination of username and password is invalid.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name Unauthenticated} {@term error} indicates that the</text>
          <text>{@term operation} requires authentication and the user is not authenticated.</text>
          <text>&lt;p&gt;</text>
          <text>API requests may include a security context containing user credentials.</text>
          <text>For example, the user credentials could be a SAML token, a user name and</text>
          <text>password, or the session identifier for a previously established session.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The SAML token in the request's security context has expired. &lt;/li&gt;</text>
          <text>&lt;li&gt;The user name and password in the request's security context are</text>
          <text>invalid. &lt;/li&gt;</text>
          <text>&lt;li&gt;The session identifier in the request's security context identifies a</text>
          <text>session that has expired. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt; The user is authenticated but isn't authorized to perform the</text>
          <text>requested {@term operation}. The {@link Unauthorized} {@term error}</text>
          <text>would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>For security reasons, the {@link Error#data} {@term field} in this</text>
          <text>{@term error} is {@term unset}, and the {@link Error#messages} {@term field}</text>
          <text>in this {@term error} does not disclose which part of the security context is</text>
          <text>correct or incorrect.  For example the messages would not disclose whether a</text>
          <text>username or a password is valid or invalid, but only that a combination of</text>
          <text>username and password is invalid.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="Unauthorized" namespace="com.vmware.vapi.std.errors" fingerprint="6e54c0709d06a3d0351201a8233fa57b27effab0">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.Unauthorized" type="true" tag="name">Unauthorized</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the user is not authorized to perform the </text>
            <atTerm>operation</atTerm>
            <text>. </text>
            <paragraph>
              <text> API requests may include a security context containing user credentials. For example, the user credentials could be a SAML token, a user name and password, or the session identifier for a previously established session. Invoking the </text>
              <atTerm>operation</atTerm>
              <text> may require that the user identified by those credentials has particular privileges on the </text>
              <atTerm>operation</atTerm>
              <text> or on one or more resource identifiers passed to the </text>
              <atTerm>operation</atTerm>
              <text>. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>operation</atTerm>
                <text> requires that the user have one or more privileges on the </text>
                <atTerm>operation</atTerm>
                <text>, but the user identified by the credentials in the security context does not have the required privileges. </text>
              </li>
              <text> </text>
              <li>
                <text>The </text>
                <atTerm>operation</atTerm>
                <text> requires that the user have one or more privileges on a resource identifier passed to the </text>
                <atTerm>operation</atTerm>
                <text>, but the user identified by the credentials in the security context does not have the required privileges. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> </text>
            </paragraph>
            <paragraph>
              <text> Counterexamples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>The SAML token in the request's security context has expired. A </text>
                <atLink resolved="com.vmware.vapi.std.errors.Unauthenticated" type="true">Unauthenticated</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>The user name and password in the request's security context are invalid. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.Unauthenticated" type="true">Unauthenticated</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
              <li>
                <text>The session identifier in the request's security context identifies a session that has expired. The </text>
                <atLink resolved="com.vmware.vapi.std.errors.Unauthenticated" type="true">Unauthenticated</atLink>
                <text> </text>
                <atTerm>error</atTerm>
                <text> would be used instead. </text>
              </li>
              <text> </text>
            </ul>
            <text> </text>
            <paragraph>
              <text> For security reasons, the </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.data" member="true">Error#data</atLink>
              <text> </text>
              <atTerm>field</atTerm>
              <text> in this </text>
              <atTerm>error</atTerm>
              <text> is </text>
              <atTerm>unset</atTerm>
              <text>, and the </text>
              <atLink resolved="com.vmware.vapi.std.errors.Error.messages" member="true">Error#messages</atLink>
              <text> </text>
              <atTerm>field</atTerm>
              <text> in this </text>
              <atTerm>error</atTerm>
              <text> does not disclose why the user is not authorized to perform the </text>
              <atTerm>operation</atTerm>
              <text>. For example the messages would not disclose which privilege the user did not have or which resource identifier the user did not have the required privilege to access. The API documentation should indicate what privileges are required.</text>
            </paragraph>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name Unauthorized} {@term error} indicates that the user is not</text>
          <text>authorized to perform the {@term operation}.</text>
          <text>&lt;p&gt;</text>
          <text>API requests may include a security context containing user credentials.</text>
          <text>For example, the user credentials could be a SAML token, a user name and</text>
          <text>password, or the session identifier for a previously established session.</text>
          <text>Invoking the {@term operation} may require that the user identified by those</text>
          <text>credentials has particular privileges on the {@term operation} or on one or</text>
          <text>more  resource identifiers passed to the {@term operation}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The {@term operation} requires that the user have one or more</text>
          <text>privileges on the {@term operation}, but the user identified by the</text>
          <text>credentials in the security context does not have the required</text>
          <text>privileges. &lt;/li&gt;</text>
          <text>&lt;li&gt;The {@term operation} requires that the user have one or more</text>
          <text>privileges on a resource identifier passed to the {@term operation},</text>
          <text>but the user identified by the credentials in the security context does</text>
          <text>not have the required privileges. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>&lt;p&gt;</text>
          <text>Counterexamples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;The SAML token in the request's security context has expired.  A</text>
          <text>{@link Unauthenticated} {@term error} would be used instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;The user name and password in the request's security context are</text>
          <text>invalid.  The {@link Unauthenticated} {@term error} would be used</text>
          <text>instead. &lt;/li&gt;</text>
          <text>&lt;li&gt;The session identifier in the request's security context identifies a</text>
          <text>session that has expired.  The {@link Unauthenticated} {@term error}</text>
          <text>would be used instead. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
          <text>&lt;p&gt;</text>
          <text>For security reasons, the {@link Error#data} {@term field} in this</text>
          <text>{@term error} is {@term unset}, and the {@link Error#messages} {@term field}</text>
          <text>in this {@term error} does not disclose why the user is not authorized to</text>
          <text>perform the {@term operation}.  For example the messages would not disclose</text>
          <text>which privilege the user did not have or which resource identifier the user</text>
          <text>did not have the required privilege to access.  The API documentation should</text>
          <text>indicate what privileges are required.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="UnexpectedInput" namespace="com.vmware.vapi.std.errors" fingerprint="dcaf22ce3acff7194e12c09a6496016f4efa1dff">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.UnexpectedInput" type="true" tag="name">UnexpectedInput</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the request contained a </text>
            <atTerm>parameter</atTerm>
            <text> or </text>
            <atTerm>field</atTerm>
            <text> whose name is not known by the server. </text>
            <paragraph>
              <text> Every </text>
              <atTerm>operation</atTerm>
              <text> expects </text>
              <atTerm>parameters</atTerm>
              <text> with known names. Some of those </text>
              <atTerm>parameters</atTerm>
              <text> may be (or contain) </text>
              <atTerm>structures</atTerm>
              <text>, and the </text>
              <atTerm>operation</atTerm>
              <text> expects those </text>
              <atTerm>structures</atTerm>
              <text> to contain </text>
              <atTerm>fields</atTerm>
              <text> with known names. If the </text>
              <atTerm>operation</atTerm>
              <text> receives </text>
              <atTerm>parameters</atTerm>
              <text> or </text>
              <atTerm>fields</atTerm>
              <text> with names that is does not expect, this </text>
              <atTerm>error</atTerm>
              <text> may be reported. </text>
            </paragraph>
            <paragraph>
              <text> This </text>
              <atTerm>error</atTerm>
              <text> can be reported by the API infrastructure for any </text>
              <atTerm>operation</atTerm>
              <text>, but it is specific to the API infrastructure, and should never be reported by the implementation of any </text>
              <atTerm>operation</atTerm>
              <text>. </text>
            </paragraph>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>A client using stubs generated from the interface specification for version2 of a </text>
                <atTerm>service</atTerm>
                <text> invokes the </text>
                <atTerm>operation</atTerm>
                <text> passing one or more </text>
                <atTerm>parameters</atTerm>
                <text> that were added in version2, but they are communicating with a server that only supports version1 of the </text>
                <atTerm>service</atTerm>
                <text>. </text>
              </li>
              <text> </text>
              <li>
                <text>A client provides an unexpected </text>
                <atTerm>parameter</atTerm>
                <text> or </text>
                <atTerm>field</atTerm>
                <text> name when invoking the </text>
                <atTerm>operation</atTerm>
                <text> using a dynamic interface (for example REST). </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name UnexpectedInput} {@term error} indicates that the request</text>
          <text>contained a {@term parameter} or {@term field} whose name is not known by</text>
          <text>the server.</text>
          <text>&lt;p&gt;</text>
          <text>Every {@term operation} expects {@term parameters} with known names.  Some of</text>
          <text>those {@term parameters} may be (or contain) {@term structures}, and the</text>
          <text>{@term operation} expects those {@term structures} to contain {@term fields}</text>
          <text>with known names. If the {@term operation} receives</text>
          <text>{@term parameters} or {@term fields} with names that is does not expect, this</text>
          <text>{@term error} may be reported.</text>
          <text>&lt;p&gt;</text>
          <text>This {@term error} can be reported by the API infrastructure for any</text>
          <text>{@term operation}, but it is specific to the API infrastructure, and should</text>
          <text>never be reported by the implementation of any {@term operation}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;A client using stubs generated from the interface specification for</text>
          <text>version2 of a {@term service} invokes the {@term operation} passing one</text>
          <text>or more {@term parameters} that were added in version2, but they are</text>
          <text>communicating with a server that only supports version1 of the</text>
          <text>{@term service}. &lt;/li&gt;</text>
          <text>&lt;li&gt;A client provides an unexpected {@term parameter} or {@term field} name</text>
          <text>when invoking the {@term operation} using a dynamic interface (for</text>
          <text>example REST). &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
    <structure name="Unsupported" namespace="com.vmware.vapi.std.errors" fingerprint="01f4ebbd397724e3629fde60eca854b336e85278">
      <extendsType>
        <type reference="Error" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.Error"/>
      </extendsType>
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atName resolved="com.vmware.vapi.std.errors.Unsupported" type="true" tag="name">Unsupported</atName>
            <text> </text>
            <atTerm>error</atTerm>
            <text> indicates that the </text>
            <atTerm>operation</atTerm>
            <text> is not supported by the </text>
            <atTerm>service</atTerm>
            <text>. </text>
            <paragraph>
              <text> Examples: </text>
            </paragraph>
            <ul>
              <text> </text>
              <li>
                <text>Trying to hot-plug a CPU when the current configuration of the VM does not support hot-plugging of CPUs. </text>
              </li>
              <text> </text>
              <li>
                <text>Trying to change the memory size to a value that is not within the acceptable guest memory bounds supported by the virtual machine's host. </text>
              </li>
              <text> </text>
            </ul>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@name Unsupported} {@term error} indicates that the {@term operation} is</text>
          <text>not supported by the {@term service}.</text>
          <text>&lt;p&gt;</text>
          <text>Examples:</text>
          <text>&lt;ul&gt;</text>
          <text>&lt;li&gt;Trying to hot-plug a CPU when the current configuration of the VM does</text>
          <text>not support hot-plugging of CPUs. &lt;/li&gt;</text>
          <text>&lt;li&gt;Trying to change the memory size to a value that is not within the</text>
          <text>acceptable guest memory bounds supported by the virtual machine's</text>
          <text>host. &lt;/li&gt;</text>
          <text>&lt;/ul&gt;</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
    </structure>
  </package>
  <package name="com.vmware.vapi.std.interposition" fingerprint="1a98b230394310b5ed416e62340e603c48383cac">
    <doc>
      <descriptionModel index="0">
        <docModel>
          <text>The </text>
          <atName resolved="com.vmware.vapi.std.interposition" pkg="true" tag="name">com.vmware.vapi.std.interposition</atName>
          <text> </text>
          <atTerm>package</atTerm>
          <text> provides </text>
          <atTerm>services</atTerm>
          <text> that TODO.</text>
        </docModel>
      </descriptionModel>
      <description index="0">
        <text>The {@name com.vmware.vapi.std.interposition} {@term package} provides</text>
        <text>{@term services} that TODO.</text>
      </description>
    </doc>
    <structure name="InvocationRequest" namespace="com.vmware.vapi.std.interposition" fingerprint="3995ace6528e8c5b75c099741d7c11be8990ec8e">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>Information about an interposed request for operation invocation. All interposers would receive an instance of this structure as an input parameter.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>Information about an interposed request for operation invocation. All</text>
          <text>interposers would receive an instance of this structure as an input</text>
          <text>parameter.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="serviceId">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Fully qualified name of the service which contains the interposed operation. In canonical format. For example org.example.hello.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Fully qualified name of the service which contains the interposed</text>
            <text>operation. In canonical format. For example org.example.hello.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="operationId">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Name of the interposed operation. In canonical format. For example say_hello.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Name of the interposed operation. In canonical format. For example</text>
            <text>say_hello.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="operationInput">
        <type primitive="Opaque"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Input of the interposed operation.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Input of the interposed operation.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="user">
        <type generic="Optional">
          <type reference="SecurityPrincipal" namespace="com.vmware.vapi.std.interposition" target="STRUCTURE" declaration="com.vmware.vapi.std.interposition.SecurityPrincipal"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>User which started the interposed operation.</text>
            </docModel>
          </descriptionModel>
          <contentModel type="optionalReason">
            <docModel>
              <text>There could be no authentication information. For example when methods are invoked anonymously.</text>
            </docModel>
          </contentModel>
          <description index="0">
            <text>User which started the interposed operation.</text>
          </description>
          <content type="optionalReason">
            <text>There could be no authentication information.</text>
            <text>For example when methods are invoked anonymously.</text>
          </content>
        </doc>
      </attribute>
      <attribute name="groups">
        <type generic="List">
          <type reference="SecurityPrincipal" namespace="com.vmware.vapi.std.interposition" target="STRUCTURE" declaration="com.vmware.vapi.std.interposition.SecurityPrincipal"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Groups of the user who started the interposed operation. Would be empty if there is no authentication information.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Groups of the user who started the interposed operation. Would be empty</text>
            <text>if there is no authentication information.</text>
          </description>
        </doc>
      </attribute>
    </structure>
    <structure name="InvocationResult" namespace="com.vmware.vapi.std.interposition" fingerprint="ebbdd4d2c1f001eb2ea52b331ae4dd267c8f6795">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>Information about the result from an interposed operation invocation. All POST interposers will receive an instance of this structure.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>Information about the result from an interposed operation invocation. All</text>
          <text>POST interposers will receive an instance of this structure.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <enumeration name="ResultType" namespace="com.vmware.vapi.std.interposition.InvocationResult" fingerprint="b07fe457f011dd3483c07d2d95de9f20d9613742">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Type of the invocation result.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Type of the invocation result.</text>
          </description>
        </doc>
        <constant name="NORMAL_RESULT">
          <type reference="ResultType" namespace="com.vmware.vapi.std.interposition.InvocationResult" target="ENUMERATION" declaration="com.vmware.vapi.std.interposition.InvocationResult.ResultType"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Normal invocation result.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>Normal invocation result.</text>
            </description>
          </doc>
          <value/>
        </constant>
        <constant name="ERROR_RESULT">
          <type reference="ResultType" namespace="com.vmware.vapi.std.interposition.InvocationResult" target="ENUMERATION" declaration="com.vmware.vapi.std.interposition.InvocationResult.ResultType"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Error invocation result.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>Error invocation result.</text>
            </description>
          </doc>
          <value/>
        </constant>
      </enumeration>
      <attribute name="resultType">
        <type reference="ResultType" namespace="com.vmware.vapi.std.interposition.InvocationResult" target="ENUMERATION" declaration="com.vmware.vapi.std.interposition.InvocationResult.ResultType"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Type of the invocation result.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Type of the invocation result.</text>
          </description>
        </doc>
        <metadata>
          <property name="UnionTag" type="java.lang.Boolean">true</property>
        </metadata>
      </attribute>
      <attribute name="output">
        <type primitive="Opaque"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Normal result value.</text>
            </docModel>
          </descriptionModel>
          <contentModel type="optionalReason">
            <docModel>
              <text>This </text>
              <atTerm>field</atTerm>
              <text> is optional and it is only relevant when the value of </text>
              <atName resolved="com.vmware.vapi.std.interposition.InvocationResult.resultType" member="true" tag="name">#resultType</atName>
              <text> is </text>
              <atLink resolved="com.vmware.vapi.std.interposition.InvocationResult.ResultType.NORMAL_RESULT" member="true">ResultType#NORMAL_RESULT</atLink>
              <text>.</text>
            </docModel>
          </contentModel>
          <description index="0">
            <text>Normal result value.</text>
          </description>
        </doc>
        <metadata>
          <property name="UnionCase" type="java.util.Map">
            <entry key="tag" type="java.lang.String">resultType</entry>
            <entry key="value" type="java.lang.String">NORMAL_RESULT</entry>
          </property>
        </metadata>
      </attribute>
      <attribute name="error">
        <type primitive="DynamicStructure"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Error result value.</text>
            </docModel>
          </descriptionModel>
          <contentModel type="optionalReason">
            <docModel>
              <text>This </text>
              <atTerm>field</atTerm>
              <text> is optional and it is only relevant when the value of </text>
              <atName resolved="com.vmware.vapi.std.interposition.InvocationResult.resultType" member="true" tag="name">#resultType</atName>
              <text> is </text>
              <atLink resolved="com.vmware.vapi.std.interposition.InvocationResult.ResultType.ERROR_RESULT" member="true">ResultType#ERROR_RESULT</atLink>
              <text>.</text>
            </docModel>
          </contentModel>
          <description index="0">
            <text>Error result value.</text>
          </description>
        </doc>
        <metadata>
          <property name="UnionCase" type="java.util.Map">
            <entry key="tag" type="java.lang.String">resultType</entry>
            <entry key="value" type="java.lang.String">ERROR_RESULT</entry>
          </property>
        </metadata>
      </attribute>
    </structure>
    <structure name="SecurityPrincipal" namespace="com.vmware.vapi.std.interposition" fingerprint="b50af0620bee11cbe4812966735e22a16cd1f99c">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>VMODL equivalent of com.vmware.vapi.security.PrincipalId.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>VMODL equivalent of com.vmware.vapi.security.PrincipalId.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
      </metadata>
      <attribute name="name">
        <type primitive="String"/>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Principal name.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Principal name.</text>
          </description>
        </doc>
      </attribute>
      <attribute name="domain">
        <type generic="Optional">
          <type primitive="String"/>
        </type>
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Principal domain.</text>
            </docModel>
          </descriptionModel>
          <contentModel type="optionalReason">
            <docModel>
              <text>Domain is optional in </text>
              <atCode>com.vmware.vapi.security.PrincipalId</atCode>
            </docModel>
          </contentModel>
          <description index="0">
            <text>Principal domain.</text>
          </description>
          <content type="optionalReason">
            <text>Domain is optional in {@code com.vmware.vapi.security.PrincipalId}</text>
          </content>
        </doc>
      </attribute>
    </structure>
  </package>
  <package name="com.vmware.vapi.std.introspection" fingerprint="446f0c4d5b7f5f7cf74c9c4c97899825acb4bd10">
    <doc>
      <descriptionModel index="0">
        <docModel>
          <text>The </text>
          <atLink resolved="com.vmware.vapi.std.introspection" pkg="true">com.vmware.vapi.std.introspection</atLink>
          <text> </text>
          <atTerm>package</atTerm>
          <text> provides </text>
          <atTerm>services</atTerm>
          <text> that expose basic information about the vAPI </text>
          <atTerm>services</atTerm>
          <text> registered with a vAPI provider.</text>
        </docModel>
      </descriptionModel>
      <description index="0">
        <text>The {@link com.vmware.vapi.std.introspection} {@term package} provides</text>
        <text>{@term services} that expose basic information about the vAPI</text>
        <text>{@term services} registered with a vAPI provider.</text>
      </description>
    </doc>
    <service name="Operation" namespace="com.vmware.vapi.std.introspection" fingerprint="47639924026823614409404d78d00d7737340c2a">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atLink resolved="com.vmware.vapi.std.introspection.Operation" type="true">Operation</atLink>
            <text> service provides operations to retrieve information about the operations present in a vAPI service.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@link Operation} service provides operations to retrieve</text>
          <text>information about the operations present in a vAPI service.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
        <property name="Resource" type="java.lang.String">com.vmware.vapi.operation</property>
      </metadata>
      <structure name="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" fingerprint="e0e4e6834c7e5095804abddd177db0b19525a924">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>The </text>
              <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition" type="true">DataDefinition</atLink>
              <text> structure describes a vAPI data type.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>The {@link DataDefinition} structure describes a vAPI data type.</text>
          </description>
        </doc>
        <enumeration name="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" fingerprint="15c380149b686ad862ac4b4e8d99fe7ecc32bbcb">
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>The </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType" type="true">DataType</atLink>
                <text> enumeration provides values representing the data types supported by the vAPI infrastructure.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>The {@link DataType} enumeration provides values representing the data types</text>
              <text>supported by the vAPI infrastructure.</text>
            </description>
          </doc>
          <constant name="BINARY">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a binary type.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a binary type.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="BOOLEAN">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a boolean type. The possible values are True and False equivalent of the language used to invoke this operation.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a boolean type. The possible values are</text>
                <text>True and False equivalent of the language used to invoke</text>
                <text>this operation.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="DOUBLE">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a double type. It is a 64 bit floating point number.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a double type. It is a 64 bit floating point</text>
                <text>number.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="DYNAMIC_STRUCTURE">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a dynamic structure. This means, any data of type </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.STRUCTURE" member="true">DataType#STRUCTURE</atLink>
                  <text> can be used.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a dynamic structure. This means, any data of type</text>
                <text>{@link DataType#STRUCTURE} can be used.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="ERROR">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a specific error type.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a specific error type.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="ANY_ERROR">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is arbitrary error type. This means, any data of type </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.ERROR" member="true">DataType#ERROR</atLink>
                  <text> can be used.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is arbitrary error type. This means, any data of type</text>
                <text>{@link DataType#ERROR} can be used.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="LIST">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a list data type. Any value of this type can have zero or more elements in the list.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a list data type. Any value of this type can have zero</text>
                <text>or more elements in the list.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="LONG">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a long data type. It is a 64 bit signed integer number.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a long data type. It is a 64 bit signed integer number.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="OPAQUE">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is an opaque type. This means, data of any </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType" type="true">DataType</atLink>
                  <text> can be used.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is an opaque type. This means, data of any {@link DataType}</text>
                <text>can be used.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="OPTIONAL">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is an optional data type. Any value of this type can be null.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is an optional data type. Any value of this type can be null.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="SECRET">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a secret data type. This is used for sensitive information. The server will not log any data of this type and if possible wipe the data from the memory after usage.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a secret data type. This is used for sensitive information. The</text>
                <text>server will not log any data of this type and if possible wipe the data from</text>
                <text>the memory after usage.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="STRING">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a string data type. This is a unicode string.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a string data type. This is a unicode string.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="STRUCTURE">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a structure data type. A structure has string identifier and a set of fields with corresponding values.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a structure data type. A structure has string identifier and a set of fields</text>
                <text>with corresponding values.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="STRUCTURE_REF">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a structure reference. This is used to break circular dependencies in the type references. This just has a string identifier of the structure. Clients have to maintain a list of structures already visited and use that to resolve this reference.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a structure reference. This is used to break circular dependencies in the</text>
                <text>type references. This just has a string identifier of the structure. Clients have to maintain</text>
                <text>a list of structures already visited and use that to resolve this reference.</text>
              </description>
            </doc>
            <value/>
          </constant>
          <constant name="VOID">
            <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
            <doc>
              <descriptionModel index="0">
                <docModel>
                  <text>Indicates the value is a void data type.</text>
                </docModel>
              </descriptionModel>
              <description index="0">
                <text>Indicates the value is a void data type.</text>
              </description>
            </doc>
            <value/>
          </constant>
        </enumeration>
        <attribute name="type">
          <type reference="DataType" namespace="com.vmware.vapi.std.introspection.Operation.DataDefinition" target="ENUMERATION" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Data type of the value.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>Data type of the value.</text>
            </description>
          </doc>
          <metadata>
            <property name="UnionTag" type="java.lang.Boolean">true</property>
          </metadata>
        </attribute>
        <attribute name="elementDefinition">
          <type reference="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Contains the element definition for generic data types like List and Optional.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="optionalReason">
              <docModel>
                <text>This </text>
                <atTerm>field</atTerm>
                <text> is optional and it is only relevant when the value of </text>
                <atName resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.type" member="true" tag="name">#type</atName>
                <text> is one of </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.OPTIONAL" member="true">DataType#OPTIONAL</atLink>
                <text> or </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.LIST" member="true">DataType#LIST</atLink>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>Contains the element definition for generic data types like List and Optional.</text>
            </description>
          </doc>
          <metadata>
            <property name="UnionCase" type="java.util.Map">
              <entry key="tag" type="java.lang.String">type</entry>
              <entry key="value" type="java.util.List">
                <item type="java.lang.String">OPTIONAL</item>
                <item type="java.lang.String">LIST</item>
              </entry>
            </property>
          </metadata>
        </attribute>
        <attribute name="name">
          <type primitive="String"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Fully qualified name of the structure.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="optionalReason">
              <docModel>
                <text>This </text>
                <atTerm>field</atTerm>
                <text> is optional and it is only relevant when the value of </text>
                <atName resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.type" member="true" tag="name">#type</atName>
                <text> is one of </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.STRUCTURE" member="true">DataType#STRUCTURE</atLink>
                <text>, </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.STRUCTURE_REF" member="true">DataType#STRUCTURE_REF</atLink>
                <text>, or </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.ERROR" member="true">DataType#ERROR</atLink>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>Fully qualified name of the structure.</text>
            </description>
          </doc>
          <metadata>
            <property name="UnionCase" type="java.util.Map">
              <entry key="tag" type="java.lang.String">type</entry>
              <entry key="value" type="java.util.List">
                <item type="java.lang.String">STRUCTURE</item>
                <item type="java.lang.String">STRUCTURE_REF</item>
                <item type="java.lang.String">ERROR</item>
              </entry>
            </property>
          </metadata>
        </attribute>
        <attribute name="fields">
          <type generic="Map">
            <type primitive="String"/>
            <type reference="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition"/>
          </type>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Fields of the structure type. The key of the map is the canonical name of the field and the value is the </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition" type="true">DataDefinition</atLink>
                <text> for the field. The order of the structure fields defined in IDL is not maintained by the </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation" type="true">Operation</atLink>
                <text> service.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="optionalReason">
              <docModel>
                <text>This </text>
                <atTerm>field</atTerm>
                <text> is optional and it is only relevant when the value of </text>
                <atName resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.type" member="true" tag="name">#type</atName>
                <text> is one of </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.STRUCTURE" member="true">DataType#STRUCTURE</atLink>
                <text> or </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.ERROR" member="true">DataType#ERROR</atLink>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>Fields of the structure type. The key of the map is the canonical name of the field</text>
              <text>and the value is the {@link DataDefinition} for the field. The order of the structure fields</text>
              <text>defined in IDL is not maintained by the {@link Operation} service.</text>
            </description>
          </doc>
          <metadata>
            <property name="UnionCase" type="java.util.Map">
              <entry key="tag" type="java.lang.String">type</entry>
              <entry key="value" type="java.util.List">
                <item type="java.lang.String">STRUCTURE</item>
                <item type="java.lang.String">ERROR</item>
              </entry>
            </property>
          </metadata>
        </attribute>
      </structure>
      <structure name="Info" namespace="com.vmware.vapi.std.introspection.Operation" fingerprint="f422be0cbd3dda1a8a59df334f735b4aaa40e1a6">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Information about a vAPI operation.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Information about a vAPI operation.</text>
          </description>
        </doc>
        <attribute name="inputDefinition">
          <type reference="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition" type="true">DataDefinition</atLink>
                <text> describing the operation input. </text>
                <paragraph>
                  <text> The </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.type" member="true">DataDefinition#type</atLink>
                  <text> of this field will be </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.STRUCTURE" member="true">DataDefinition.DataType#STRUCTURE</atLink>
                  <text>. The keys of </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.fields" member="true">DataDefinition#fields</atLink>
                  <text> are the names of the operation parameters, and the values of </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.fields" member="true">DataDefinition#fields</atLink>
                  <text> describe the type of the operation parameters.</text>
                </paragraph>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>{@link DataDefinition} describing the operation input.</text>
              <text>&lt;p&gt;</text>
              <text>The {@link DataDefinition#type} of this field will be</text>
              <text>{@link DataDefinition.DataType#STRUCTURE}. The keys of</text>
              <text>{@link DataDefinition#fields} are the names of the operation</text>
              <text>parameters, and the values of {@link DataDefinition#fields}</text>
              <text>describe the type of the operation parameters.</text>
            </description>
          </doc>
        </attribute>
        <attribute name="outputDefinition">
          <type reference="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition" type="true">DataDefinition</atLink>
                <text> describing the operation output.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>{@link DataDefinition} describing the operation output.</text>
            </description>
          </doc>
        </attribute>
        <attribute name="errorDefinitions">
          <type generic="List">
            <type reference="DataDefinition" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.DataDefinition"/>
          </type>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>List of </text>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition" type="true">DataDefinition</atLink>
                <text> describing the errors that the operation might report. </text>
                <paragraph>
                  <text> The </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.type" member="true">DataDefinition#type</atLink>
                  <text> of every element in this list will be </text>
                  <atLink resolved="com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType.ERROR" member="true">DataDefinition.DataType#ERROR</atLink>
                  <text>.</text>
                </paragraph>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>List of {@link DataDefinition} describing the errors that the operation</text>
              <text>might report.</text>
              <text>&lt;p&gt;</text>
              <text>The {@link DataDefinition#type} of every element in this list will be</text>
              <text>{@link DataDefinition.DataType#ERROR}.</text>
            </description>
          </doc>
        </attribute>
      </structure>
      <operation name="list" fingerprint="0ec5f18185d98d57a0cf71f5b3c366de18bc63f3">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Returns the set of operation identifiers for a given vAPI service.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Returns the set of operation identifiers for a given vAPI service.</text>
          </description>
        </doc>
        <parameter name="serviceId">
          <type primitive="ID"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>service identifier.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>parameter</atTerm>
                <text> must be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.service</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>service identifier.</text>
            </description>
            <content type="metadata">
              <text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text>
            </content>
          </doc>
          <metadata>
            <property name="Resource" type="java.lang.String">com.vmware.vapi.service</property>
          </metadata>
        </parameter>
        <error name="NotFound">
          <type reference="NotFound" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.NotFound"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>If the service identifier does not exist.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>If the service identifier does not exist.</text>
            </description>
          </doc>
        </error>
        <result>
          <type generic="Set">
            <type primitive="ID"/>
          </type>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>set of operation identifiers for a given vAPI service.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>result</atTerm>
                <text> will contain identifiers for the resource type: </text>
                <atCode>com.vmware.vapi.operation</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>set of operation identifiers for a given vAPI service.</text>
            </description>
            <content type="metadata">
              <text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text>
            </content>
          </doc>
        </result>
      </operation>
      <operation name="get" fingerprint="14550224737126c9b6e7061c9d01439c8c44ba85">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Returns the </text>
              <atLink resolved="com.vmware.vapi.std.introspection.Operation.Info" type="true">Info</atLink>
              <text> for a given vAPI operation.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Returns the {@link Info} for a given vAPI operation.</text>
          </description>
        </doc>
        <parameter name="serviceId">
          <type primitive="ID"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>service identifier.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>parameter</atTerm>
                <text> must be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.service</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>service identifier.</text>
            </description>
            <content type="metadata">
              <text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text>
            </content>
          </doc>
          <metadata>
            <property name="Resource" type="java.lang.String">com.vmware.vapi.service</property>
          </metadata>
        </parameter>
        <parameter name="operationId">
          <type primitive="ID"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>operation identifier.</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>parameter</atTerm>
                <text> must be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.operation</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>operation identifier.</text>
            </description>
            <content type="metadata">
              <text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text>
            </content>
          </doc>
        </parameter>
        <error name="NotFound">
          <type reference="NotFound" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.NotFound"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>If the operation identifier does not exist.</text>
              </docModel>
            </descriptionModel>
            <descriptionModel index="1">
              <docModel>
                <text>If the service identifier does not exist.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>If the operation identifier does not exist.</text>
            </description>
            <description index="1">
              <text>If the service identifier does not exist.</text>
            </description>
          </doc>
        </error>
        <result>
          <type reference="Info" namespace="com.vmware.vapi.std.introspection.Operation" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Operation.Info"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <atLink resolved="com.vmware.vapi.std.introspection.Operation.Info" type="true">Info</atLink>
                <text> for a given vAPI operation.</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>{@link Info} for a given vAPI operation.</text>
            </description>
          </doc>
        </result>
      </operation>
    </service>
    <service name="Provider" namespace="com.vmware.vapi.std.introspection" fingerprint="8249e35c01c837259529457c5a7cbc12c9471332">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atLink resolved="com.vmware.vapi.std.introspection.Provider" type="true">Provider</atLink>
            <text> service provides operations to retrieve information about a vAPI Provider. A provider is a container that exposes one or more vAPI services.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@link Provider} service provides operations to retrieve information about a</text>
          <text>vAPI Provider. A provider is a container that exposes one or more vAPI services.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
        <property name="Resource" type="java.lang.String">com.vmware.vapi.provider</property>
      </metadata>
      <structure name="Info" namespace="com.vmware.vapi.std.introspection.Provider" fingerprint="52394a07e54e5aeea38c3d676969c4a3e711ac1a">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Information about a vAPI provider</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Information about a vAPI provider</text>
          </description>
        </doc>
        <attribute name="id">
          <type primitive="ID"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Identifier of the provider</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>When clients pass a value of this </text>
                <atTerm>structure</atTerm>
                <text> as a </text>
                <atTerm>parameter</atTerm>
                <text>, the </text>
                <atTerm>field</atTerm>
                <text> must be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.provider</atCode>
                <text>. When </text>
                <atTerm>operations</atTerm>
                <text> return a value of this </text>
                <atTerm>structure</atTerm>
                <text> as a </text>
                <atTerm>result</atTerm>
                <text>, the </text>
                <atTerm>field</atTerm>
                <text> will be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.provider</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>Identifier of the provider</text>
            </description>
            <content type="metadata">
              <text>When clients pass a value of this {@term structure} as a {@term parameter}, </text>
              <text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.provider}.</text>
              <text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text>
              <text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.provider}.</text>
            </content>
          </doc>
        </attribute>
        <attribute name="checksum">
          <type primitive="String"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Checksum of the information present in the provider. </text>
                <paragraph>
                  <text> Clients can use this information to check if the service information has changed. When a new service is added or removed (or) one of the existing service information is modified, the value of the checksum changes. </text>
                </paragraph>
                <paragraph>
                  <text> The information used to calculate the checksum includes: </text>
                </paragraph>
                <ul>
                  <text> </text>
                  <li>
                    <text>service identifiers</text>
                  </li>
                  <text> </text>
                  <li>
                    <text>operation identifiers inside the service</text>
                  </li>
                  <text> </text>
                  <li>
                    <text>input, output and error definitions of an operation</text>
                  </li>
                  <text> </text>
                </ul>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>Checksum of the information present in the provider.</text>
              <text>&lt;p&gt;</text>
              <text>Clients can use this information to check if the service information has changed.</text>
              <text>When a new service is added or removed (or) one of the existing service information</text>
              <text>is modified, the value of the checksum changes.</text>
              <text>&lt;p&gt;</text>
              <text>The information used to calculate the checksum includes:</text>
              <text>&lt;ul&gt;</text>
              <text>&lt;li&gt;service identifiers&lt;/li&gt;</text>
              <text>&lt;li&gt;operation identifiers inside the service&lt;/li&gt;</text>
              <text>&lt;li&gt;input, output and error definitions of an operation&lt;/li&gt;</text>
              <text>&lt;/ul&gt;</text>
            </description>
          </doc>
        </attribute>
      </structure>
      <operation name="get" fingerprint="583240d0fb2850c19182ee3ae6dcae3d4b8897b0">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Returns a </text>
              <atLink resolved="com.vmware.vapi.std.introspection.Provider.Info" type="true">Info</atLink>
              <text> describing the vAPI provider on which the operation is invoked</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Returns a {@link Info} describing the vAPI provider on which</text>
            <text>the operation is invoked</text>
          </description>
        </doc>
        <result>
          <type reference="Info" namespace="com.vmware.vapi.std.introspection.Provider" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Provider.Info"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <atLink resolved="com.vmware.vapi.std.introspection.Provider.Info" type="true">Info</atLink>
                <text> describing the vAPI provider on which the operation is invoked</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>{@link Info} describing the vAPI provider on which the</text>
              <text>operation is invoked</text>
            </description>
          </doc>
        </result>
      </operation>
    </service>
    <service name="Service" namespace="com.vmware.vapi.std.introspection" fingerprint="86271835397ba73652457158a471acd0b0f5a7b4">
      <doc>
        <descriptionModel index="0">
          <docModel>
            <text>The </text>
            <atLink resolved="com.vmware.vapi.std.introspection.Service" type="true">Service</atLink>
            <text> service provides operations to retrieve information about the services exposed by a vAPI provider. A provider is a container that exposes one or more vAPI services.</text>
          </docModel>
        </descriptionModel>
        <description index="0">
          <text>The {@link Service} service provides operations to retrieve information about the</text>
          <text>services exposed by a vAPI provider. A provider is a container that exposes one or</text>
          <text>more vAPI services.</text>
        </description>
      </doc>
      <metadata>
        <property name="Export" type="java.lang.Boolean">true</property>
        <property name="Resource" type="java.lang.String">com.vmware.vapi.service</property>
      </metadata>
      <structure name="Info" namespace="com.vmware.vapi.std.introspection.Service" fingerprint="eb4034655706d6b47b403266f9568954b1dbf32b">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Information about a vAPI service</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Information about a vAPI service</text>
          </description>
        </doc>
        <attribute name="operations">
          <type generic="Set">
            <type primitive="ID"/>
          </type>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>Set of identifiers of operations present in the service</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>When clients pass a value of this </text>
                <atTerm>structure</atTerm>
                <text> as a </text>
                <atTerm>parameter</atTerm>
                <text>, the </text>
                <atTerm>field</atTerm>
                <text> must contain identifiers for the resource type: </text>
                <atCode>com.vmware.vapi.operation</atCode>
                <text>. When </text>
                <atTerm>operations</atTerm>
                <text> return a value of this </text>
                <atTerm>structure</atTerm>
                <text> as a </text>
                <atTerm>result</atTerm>
                <text>, the </text>
                <atTerm>field</atTerm>
                <text> will contain identifiers for the resource type: </text>
                <atCode>com.vmware.vapi.operation</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>Set of identifiers of operations present in the service</text>
            </description>
            <content type="metadata">
              <text>When clients pass a value of this {@term structure} as a {@term parameter}, </text>
              <text>the {@term field} must contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text>
              <text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text>
              <text>the {@term field} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text>
            </content>
          </doc>
          <metadata>
            <property name="Resource" type="java.lang.String">com.vmware.vapi.operation</property>
          </metadata>
        </attribute>
      </structure>
      <operation name="list" fingerprint="208c741532e61eccf25febb07b0fbefd734057ef">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Returns the set of service identifiers.</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Returns the set of service identifiers.</text>
          </description>
        </doc>
        <result>
          <type generic="Set">
            <type primitive="ID"/>
          </type>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>set of service identifiers</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>result</atTerm>
                <text> will contain identifiers for the resource type: </text>
                <atCode>com.vmware.vapi.service</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>set of service identifiers</text>
            </description>
            <content type="metadata">
              <text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text>
            </content>
          </doc>
        </result>
      </operation>
      <operation name="get" fingerprint="1da1ab048a589ba9b8374e3251ffbefc5963dac9">
        <doc>
          <descriptionModel index="0">
            <docModel>
              <text>Returns the </text>
              <atLink resolved="com.vmware.vapi.std.introspection.Service.Info" type="true">Info</atLink>
              <text> for the specified service</text>
            </docModel>
          </descriptionModel>
          <description index="0">
            <text>Returns the {@link Info} for the specified service</text>
          </description>
        </doc>
        <parameter name="id">
          <type primitive="ID"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>service identifier</text>
              </docModel>
            </descriptionModel>
            <contentModel type="metadata">
              <docModel>
                <text>The </text>
                <atTerm>parameter</atTerm>
                <text> must be an identifier for the resource type: </text>
                <atCode>com.vmware.vapi.service</atCode>
                <text>.</text>
              </docModel>
            </contentModel>
            <description index="0">
              <text>service identifier</text>
            </description>
            <content type="metadata">
              <text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text>
            </content>
          </doc>
        </parameter>
        <error name="NotFound">
          <type reference="NotFound" namespace="com.vmware.vapi.std.errors" target="STRUCTURE" declaration="com.vmware.vapi.std.errors.NotFound"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <text>If the service identifier does not exist</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>If the service identifier does not exist</text>
            </description>
          </doc>
        </error>
        <result>
          <type reference="Info" namespace="com.vmware.vapi.std.introspection.Service" target="STRUCTURE" declaration="com.vmware.vapi.std.introspection.Service.Info"/>
          <doc>
            <descriptionModel index="0">
              <docModel>
                <atLink resolved="com.vmware.vapi.std.introspection.Service.Info" type="true">Info</atLink>
                <text> for the specified service</text>
              </docModel>
            </descriptionModel>
            <description index="0">
              <text>{@link Info} for the specified service</text>
            </description>
          </doc>
        </result>
      </operation>
    </service>
  </package>
</model>
