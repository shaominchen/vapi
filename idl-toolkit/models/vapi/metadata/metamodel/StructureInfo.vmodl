/* **********************************************************
 * Copyright 2014 VMware, Inc.  All rights reserved. -- VMware Confidential
 * **********************************************************/

package com.vmware.vapi.metadata.metamodel;

import vmodl.lang.ID;
import vmodl.lang.List;
import vmodl.lang.Map;

import com.vmware.vapi.metadata.Resources;

/**
 * The {@name StructureInfo} {@term structure} contains the metamodel information
 * of all the field elements, constant elements and enumeration elements
 * contained in the structure element.
 * <p>
 * In the interface definition language, API designers have the ability to include
 * all the fields from one structure to another structure. This is done by using
 * an annotation {@code @Include} on the structure in which we want to add the fields.
 * If this annotation is present, the list of fields in the {@name StructureInfo} will
 * also contain the fields that are being included. The annotation information is
 * also retained in the {@link StructureInfo#metadata} element as well.
 */
class StructureInfo {
    /**
     * Dot separated name of the structure element. The segments in the name reflect
     * the organization of the APIs. The format of each segment is lower case
     * with underscores. Each underscore represents a word boundary. If there
     * are acronyms in the word, the capitalization is preserved. This format
     * makes it easy to translate the segment into a different naming convention.
     */
    String name;

    /**
     * The {@name Type} {@term enumerated type} defines the kind of this structure
     * element. In the interface definition language, structure element and
     * error element have similar characteristics. The difference is that only
     * error elements can be used to describe the {@term errors} of an operation
     * element.
     */
    enum Type {
        /** If the type is a structure element. */
        STRUCTURE,

        /** If the type is an error element. */
        ERROR
    }

    /** Type of the structure. */
    Type type;

    /**
     * Metamodel information of all the enumeration elements contained in the
     * structure element. The key in the {@term map} is the identifier
     * of the enumeration element and the value is the metamodel information of the
     * enumeration element.
     */
    @vmodl.lang.Resource(Resources.ENUMERATION)
    Map<ID, EnumerationInfo> enumerations;

    /**
     * Metamodel information of all the constant elements contained in the structure
     * element. The key in the {@term map} is the name of the constant element and
     * the value in the {@term map} is the metamodel information for the constant element.
     */
    Map<String, ConstantInfo> constants;

    /**
     * Metamodel information of all the field elements. The order of the field elements
     * in the list matches the order in which the fields are defined in the service.
     */
    List<FieldInfo> fields;

    /**
     * Generic metadata elements for the structure element. The key in the
     * {@term map} is the name of the metadata element and the value is the data associated
     * with that metadata element.
     * <p>
     * The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains possible
     * string values for keys in the {@term map}.
     **/
    Map<String, ElementMap> metadata;

    /**
     * English language documentation for a structure element. It can contain HTML
     * markup and Javadoc tags. The first sentence of the structure documentation is a
     * complete sentence that identifies the structure by name and summarizes the purpose
     * of the structure.
     */
    String documentation;
}
