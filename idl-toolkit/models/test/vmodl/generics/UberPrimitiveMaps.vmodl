/*
 * Copyright 2012-2014 VMware, Inc.  All rights reserved.
 */
package vmodl.test.uber.generics;

import vmodl.test.uber.UberResources;

import vmodl.lang.*;

/**
 * Specifies a test interface for VMODL2 {@literal Map<K,V>} types,
 * where the value ({@code V}) is any primitive type.
 * <p>
 * The key ({@code K}) MUST be a primitive type for equals/hash reasons,
 * as constrained by the VMODL2 spec.  The VMODL2 spec further constrains
 * the primitive type to one of the following:
 * <ul>
 *  <li> {@code String}
 *  <li> {@code Long}
 *  <li> {@code ID}
 * </ul>
 */
@Resource(UberResources.FOO)
interface UberPrimitiveMaps {

    //TODO: should test Optional<Map<K,V>> scenarios too

    // K is String, V is one of the primitive types

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, Boolean> echoStringToBooleanMap(
            Map<String, Boolean> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, Double> echoStringToDoubleMap(
            Map<String, Double> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, Long> echoStringToLongMap(
            Map<String, Long> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, String> echoStringToStringMap(
            Map<String, String> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, Binary> echoStringToBinaryMap(
            Map<String, Binary> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, DateTime> echoStringToDateTimeMap(
            Map<String, DateTime> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, ID> echoStringToIdMap(
            Map<String, ID> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, Secret> echoStringToSecretMap(
            Map<String, Secret> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<String, URI> echoStringToUriMap(
            Map<String, URI> input);

    // K is Long, V is one of the primitive types

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, Boolean> echoLongToBooleanMap(
            Map<Long, Boolean> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, Double> echoLongToDoubleMap(
            Map<Long, Double> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, Long> echoLongToLongMap(
            Map<Long, Long> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, String> echoLongToStringMap(
            Map<Long, String> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, Binary> echoLongToBinaryMap(
            Map<Long, Binary> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, DateTime> echoLongToDateTimeMap(
            Map<Long, DateTime> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, ID> echoLongToIdMap(
            Map<Long, ID> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, Secret> echoLongToSecretMap(
            Map<Long, Secret> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<Long, URI> echoLongToUriMap(
            Map<Long, URI> input);

    // K is ID, V is one of the primitive types

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, Boolean> echoIdToBooleanMap(
            Map<ID, Boolean> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, Double> echoIdToDoubleMap(
            Map<ID, Double> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, Long> echoIdToLongMap(
            Map<ID, Long> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, String> echoIdToStringMap(
            Map<ID, String> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, Binary> echoIdToBinaryMap(
            Map<ID, Binary> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, DateTime> echoIdToDateTimeMap(
            Map<ID, DateTime> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, ID> echoIdToIdMap(
            Map<ID, ID> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, Secret> echoIdToSecretMap(
            Map<ID, Secret> input);

    /**
     * Test for simple map as argument and as return value.
     *
     * @param input test input
     * @return same as {@param.name input}
     */
    Map<ID, URI> echoIdToUriMap(
            Map<ID, URI> input);
}
