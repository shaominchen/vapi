/*
 * Copyright 2012-2014 VMware, Inc.  All rights reserved.
 */
package vmodl.test.uber.structures;

import vmodl.test.uber.UberResources;
import vmodl.lang.*;

/** Specifies a test interface for VMODL2 structure types. */
interface UberStructures {

    /**
     * echo structure
     *
     * @param input test value
     * @return same as {@param.name input}
     */
    NestedSimpleStruct echoNestedSimpleStruct(NestedSimpleStruct input);

    /**
     * echo optional structure
     *
     * @param input test value
     * @param.optional input reason
     *
     * @return same as {@param.name input}
     * @return.optional reason
     */
    Optional<NestedSimpleStruct> echoNestedSimpleStructOptional(
            Optional<NestedSimpleStruct> input);

    /**
     * echo structure
     *
     * @param input test value
     * @return same as {@param.name input}
     */
    NestedComplexStruct echoNestedComplexStruct(NestedComplexStruct input);

    /**
     * echo optional structure
     *
     * @param input test value
     * @param.optional input reason
     *
     * @return same as {@param.name input}
     * @return.optional reason
     */
    Optional<NestedComplexStruct> echoNestedComplexStructOptional(
            Optional<NestedComplexStruct> input);

    /**
     * echo empty structure
     *
     * @param input test value
     * @return same as {@param.name input}
     */
    NestedEmptyStruct echoEmptyStruct(NestedEmptyStruct input);


    /** Empty structure (without fields) */
    class NestedEmptyStruct {
    }

    /** simple test structure */
    class NestedSimpleStruct {

        /** string field */
        String stringField;
    }

    /** more complex test structure */
    class NestedComplexStruct {
        /** doc enum */
        enum TestEnum {
            /** doc A */ A,
            /** doc B */ B,
            /** doc C */ C,
        }

        /** boolean field */
        boolean booleanField;

        /** String field */
        String stringField;

        /** long field */
        long longField;

        /** double field */
        double doubleField;

        /** DateTime field */
        DateTime dateTimeField;

        /** URI field */
        URI uriField;

        /** Secret field */
        Secret secretField;

        /** field using enum */
        TestEnum enumField;

        /** list field */
        List<String> listPrimitiveField;

        /** optional String field
         * @field.optional reason
         */
        Optional<String> optionalPrimitiveField;

        /** field using other structure */
        NestedSimpleStruct structureField;
    }

    /** Nested non-model structure with... */
    class NestedNonModelStruct {
        /** ...ID field */
        @Resource(UberResources.UBER)
        ID foreign1;
    }

    /** test structure with constants */
    class NestedStructWithConstants {
        /** String constant in structure */
        static final String structConstantString = "val";

        /** Long constant in structure */
        static final long structConstantLong = 100;
    }
}
