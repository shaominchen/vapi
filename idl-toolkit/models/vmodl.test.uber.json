{
    "author": {
        "name": "com.vmware.vapi.idl.model.tools.JsonIdlWriter",
        "version": "2.6.0.4750157"
    },
    "exports": {
        "name": "vmodl.test.uber",
        "type": "exports",
        "packages": [
        ]
    },
    "imports": [
        {
            "name": "com.vmware.vapi.std",
            "type": "imports",
            "packages": [
                {
                    "name": "com.vmware.vapi.std",
                    "structures": [
                        {
                            "name": "AuthenticationScheme",
                            "constants": {
                                "NO_AUTHENTICATION": "NO_AUTHENTICATION",
                                "SAML_BEARER_TOKEN": "SAML_BEARER_TOKEN",
                                "SAML_HOK_TOKEN": "SAML_HOK_TOKEN",
                                "SESSION_ID": "SESSION_ID",
                                "USER_PASSWORD": "USER_PASSWORD",
                                "OAUTH_ACCESS_TOKEN": "OAUTH_ACCESS_TOKEN"
                            }
                        },
                        {
                            "name": "DynamicID"
                        },
                        {
                            "name": "LocalizableMessage"
                        }
                    ]
                },
                {
                    "name": "com.vmware.vapi.std.errors",
                    "structures": [
                        {
                            "name": "ArgumentLocations"
                        },
                        {
                            "name": "FileLocations"
                        },
                        {
                            "name": "TransientIndication"
                        }
                    ],
                    "errors": [
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "AlreadyExists"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "AlreadyInDesiredState"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "Canceled"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "ConcurrentChange"
                        },
                        {
                            "parent": "Exception",
                            "name": "Error"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "FeatureInUse"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "InternalServerError"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "InvalidArgument"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "InvalidElementConfiguration"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "InvalidElementType"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "InvalidRequest"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "NotAllowedInCurrentState"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "NotFound"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "OperationNotFound"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "ResourceBusy"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "ResourceInUse"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "ResourceInaccessible"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "ServiceUnavailable"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "TimedOut"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "UnableToAllocateResource"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "Unauthenticated"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "Unauthorized"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "UnexpectedInput"
                        },
                        {
                            "parent": "com.vmware.vapi.std.errors.Error",
                            "name": "Unsupported"
                        }
                    ]
                },
                {
                    "name": "com.vmware.vapi.std.interposition",
                    "structures": [
                        {
                            "name": "InvocationRequest"
                        },
                        {
                            "name": "InvocationResult"
                        },
                        {
                            "name": "SecurityPrincipal"
                        }
                    ]
                }
            ]
        }
    ],
    "privilege": {
        "component": {
            "name": "vmodl.test.uber",
            "default": {
                "vmodl.test.uber.privileges": ["System.Read"]
            }
            ,
            "vmodl.test.uber.privileges.uber_privileges": {
                "simple_operation" : ["vapi.operation"],
                "operation_with_id_parameter.id" : ["vapi.id.parameter"],
                "operation_with_id_parameters.foreign_id" : ["vapi.id.foreign.parameter"],
                "operation_with_map_parameters1.id_map#key" : ["vapi.id.map.key"],
                "operation_with_map_parameters2.id_map#value" : ["vapi.id.map.value"],
                "operation_with_map_parameters3.id_map#key" : ["vapi.id.map.key"],
                "operation_with_map_parameters4.id_map#value" : ["vapi.id.map.key"],
                "operation_with_struct_parameter1.spec.id" : ["vapi.id.field"],
                "operation_with_struct_parameter2.spec.foreign_id" : ["vapi.id.foreign.field"],
                "operation_with_struct_parameter5.spec.map_field#key" : ["vapi.id.map.key.field"],
                "operation_mix.id" : ["vapi.id.parameter"],
                "operation_mix.nested_spec.get_spec.id" : ["vapi.id.field"]
            }
            ,
            "vmodl.test.uber.privileges_more.more_privileges": {
                "simple_operation" : ["vapi.operation"],
                "operation_with_id_parameter.id" : ["vapi.id.parameter"]
            }
        }
    },
    "authentication": {
        "component": {
            "name": "vmodl.test.uber",
            "schemes": {
                "Scheme1": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.saml_hok_token"
                },
                "Scheme2": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.session_id"
                },
                "Scheme3": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.user_pass"
                },
                "Scheme4": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.saml_bearer_token"
                },
                "Scheme5": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.no_authentication"
                },
                "Scheme6": {
                    "type": "SessionLess",
                    "authenticationScheme": "com.vmware.vapi.std.security.oauth"
                }
            },
            "packages": {
            },
            "services": {
                "vmodl.test.uber.security.authentication": ["Scheme1", "Scheme4", "Scheme6"],
                "vmodl.test.uber.security.session": ["Scheme2"]
            },
            "operations": {
                "vmodl.test.uber.security.session.login": ["Scheme1"],
                "vmodl.test.uber.security.authentication.authenticate_using_user_pass": ["Scheme3"],
                "vmodl.test.uber.security.authentication.authenticate_using_user_pass_or_no_auth": ["Scheme5", "Scheme3"],
                "vmodl.test.uber.security.session.no_authn": ["Scheme5"]
            }
        }
    },
    "routing": {
        "component": {
            "name": "vmodl.test.uber"
        }
    },
    "cli": [
        {
            "path": "vmodl.test",
            "name": "uber",
            "type": "namespace",
            "description": "Defines an uber test model in VMODL2"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "hasfieldsof",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.hasfieldsof",
            "name": "hasfieldsof",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 @HasFieldsOf annotation."
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.hasfieldsof.hasfieldsof",
            "name": "testhasfieldsofstruct",
            "type": "command",
            "description": "echo HasFieldsOf structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex-hasfieldsof",
                        "generic": "optional"
                    },
                    {
                        "long_option": "long-field",
                        "short_option": "",
                        "field_name": "input.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of",
                "operation_id": "test_has_fields_of_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.hasfieldsof.hasfieldsof",
            "name": "testnestedhasfieldsofstruct",
            "type": "command",
            "description": "echo NestedHasFieldsOf structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex-hasfieldsof",
                        "generic": "optional"
                    },
                    {
                        "long_option": "long-field",
                        "short_option": "",
                        "field_name": "input.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-struct-field-long-field",
                        "short_option": "",
                        "field_name": "input.nested_struct_field.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-struct-field-string-field",
                        "short_option": "",
                        "field_name": "input.nested_struct_field.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of",
                "operation_id": "test_nested_has_fields_of_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "names",
            "type": "namespace",
            "description": "Contains tests for identifier names in a model"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.names",
            "name": "canonicalnames",
            "type": "namespace",
            "description": "test canonicalizer on a service name"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.names.canonicalnames",
            "name": "testlocalstruct",
            "type": "command",
            "description": "test canonicalizer on a method name and param name",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "enum-field",
                        "short_option": "",
                        "field_name": "input.enum_field",
                        "description": "enumField",
                        "type": "vmodl.test.uber.annotations.names.uber_local_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "field",
                        "short_option": "",
                        "field_name": "input.field",
                        "description": "test canonicalizer on a field name",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.names.local_struct",
                        "output_fields": [
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "field",
                                "display_name": "Field"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.names.canonical_names",
                "operation_id": "test_local_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.names",
            "name": "vapi12canonical",
            "type": "namespace",
            "description": "Interface to test @CanonicalNames"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.names.vapi12canonical",
            "name": "echo3d",
            "type": "command",
            "description": "Echo - params and result structure with interesting canonical names.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "is-cd-rom",
                        "short_option": "",
                        "field_name": "is_CD_rom",
                        "description": "is it a CD-ROM",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "vds-port-1-2",
                        "short_option": "",
                        "field_name": "vDS_port_1_2",
                        "description": "vDS port 12?",
                        "type": "boolean",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.names.vAPI_1_2_canonical.sample_1_2",
                        "output_fields": [
                            {
                                "field_name": "vDS_port_1_2",
                                "display_name": "VDSPort12"
                            },
                            {
                                "field_name": "VMware",
                                "display_name": "VMware"
                            },
                            {
                                "field_name": "ICH_7m_present",
                                "display_name": "ICH7mPresent"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.names.vAPI_1_2_canonical",
                "operation_id": "echo_3_D"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "combos",
            "type": "namespace",
            "description": "Contains tests for various annotation combinations in models"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.combos",
            "name": "inventoryservicehelper",
            "type": "namespace",
            "description": "Service which contains definitions of structures used to test the Inventory Service serializer."
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "crud",
            "type": "namespace",
            "description": "Contains tests for CRUD annotations"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud",
            "name": "ubercrud",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 structure types that utilize the CRUD semantics."
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud.ubercrud",
            "name": "list",
            "type": "command",
            "description": "list method",
            "node_metadata": {
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.crud.uber_CRUD.thing",
                        "output_fields": [
                            {
                                "field_name": "string_CR_RR_UR",
                                "display_name": "StringCRRRUR"
                            },
                            {
                                "field_name": "string_CR_RR_UO",
                                "display_name": "StringCRRRUO"
                            },
                            {
                                "field_name": "string_CR_RR_UU",
                                "display_name": "StringCRRRUU"
                            },
                            {
                                "field_name": "string_CO_RR_UR",
                                "display_name": "StringCORRUR"
                            },
                            {
                                "field_name": "string_CU_RR_UR",
                                "display_name": "StringCURRUR"
                            },
                            {
                                "field_name": "string_CR_RO_UR",
                                "display_name": "StringCRROUR"
                            },
                            {
                                "field_name": "string_CR_RU_UR",
                                "display_name": "StringCRRUUR"
                            },
                            {
                                "field_name": "string_CO_RO_UO",
                                "display_name": "StringCOROUO"
                            },
                            {
                                "field_name": "string_CO_RO_UR",
                                "display_name": "StringCOROUR"
                            },
                            {
                                "field_name": "string_CO_RO_UU",
                                "display_name": "StringCOROUU"
                            },
                            {
                                "field_name": "string_CR_RO_UO",
                                "display_name": "StringCRROUO"
                            },
                            {
                                "field_name": "string_CU_RO_UO",
                                "display_name": "StringCUROUO"
                            },
                            {
                                "field_name": "string_CO_RR_UO",
                                "display_name": "StringCORRUO"
                            },
                            {
                                "field_name": "string_CO_RU_UO",
                                "display_name": "StringCORUUO"
                            },
                            {
                                "field_name": "string_CU_RU_UU",
                                "display_name": "StringCURUUU"
                            },
                            {
                                "field_name": "string_CU_RU_UR",
                                "display_name": "StringCURUUR"
                            },
                            {
                                "field_name": "string_CU_RU_UO",
                                "display_name": "StringCURUUO"
                            },
                            {
                                "field_name": "string_CR_RU_UU",
                                "display_name": "StringCRRUUU"
                            },
                            {
                                "field_name": "string_CO_RU_UU",
                                "display_name": "StringCORUUU"
                            },
                            {
                                "field_name": "string_CU_RR_UU",
                                "display_name": "StringCURRUU"
                            },
                            {
                                "field_name": "string_CU_RO_UU",
                                "display_name": "StringCUROUU"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.crud.uber_CRUD",
                "operation_id": "list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud.ubercrud",
            "name": "get",
            "type": "command",
            "description": "get method",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "the identifier of the thing",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.crud.uber_CRUD.thing",
                        "output_fields": [
                            {
                                "field_name": "string_CR_RR_UR",
                                "display_name": "StringCRRRUR"
                            },
                            {
                                "field_name": "string_CR_RR_UO",
                                "display_name": "StringCRRRUO"
                            },
                            {
                                "field_name": "string_CR_RR_UU",
                                "display_name": "StringCRRRUU"
                            },
                            {
                                "field_name": "string_CO_RR_UR",
                                "display_name": "StringCORRUR"
                            },
                            {
                                "field_name": "string_CU_RR_UR",
                                "display_name": "StringCURRUR"
                            },
                            {
                                "field_name": "string_CR_RO_UR",
                                "display_name": "StringCRROUR"
                            },
                            {
                                "field_name": "string_CR_RU_UR",
                                "display_name": "StringCRRUUR"
                            },
                            {
                                "field_name": "string_CO_RO_UO",
                                "display_name": "StringCOROUO"
                            },
                            {
                                "field_name": "string_CO_RO_UR",
                                "display_name": "StringCOROUR"
                            },
                            {
                                "field_name": "string_CO_RO_UU",
                                "display_name": "StringCOROUU"
                            },
                            {
                                "field_name": "string_CR_RO_UO",
                                "display_name": "StringCRROUO"
                            },
                            {
                                "field_name": "string_CU_RO_UO",
                                "display_name": "StringCUROUO"
                            },
                            {
                                "field_name": "string_CO_RR_UO",
                                "display_name": "StringCORRUO"
                            },
                            {
                                "field_name": "string_CO_RU_UO",
                                "display_name": "StringCORUUO"
                            },
                            {
                                "field_name": "string_CU_RU_UU",
                                "display_name": "StringCURUUU"
                            },
                            {
                                "field_name": "string_CU_RU_UR",
                                "display_name": "StringCURUUR"
                            },
                            {
                                "field_name": "string_CU_RU_UO",
                                "display_name": "StringCURUUO"
                            },
                            {
                                "field_name": "string_CR_RU_UU",
                                "display_name": "StringCRRUUU"
                            },
                            {
                                "field_name": "string_CO_RU_UU",
                                "display_name": "StringCORUUU"
                            },
                            {
                                "field_name": "string_CU_RR_UU",
                                "display_name": "StringCURRUU"
                            },
                            {
                                "field_name": "string_CU_RO_UU",
                                "display_name": "StringCUROUU"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.crud.uber_CRUD",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud.ubercrud",
            "name": "create",
            "type": "command",
            "description": "create method",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "string-cr-rr-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RR_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "string-cr-rr-uo",
                        "short_option": "",
                        "field_name": "thing.string_CR_RR_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-rr-uu",
                        "short_option": "",
                        "field_name": "thing.string_CR_RR_UU",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-rr-ur",
                        "short_option": "",
                        "field_name": "thing.string_CO_RR_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ro-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RO_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ru-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RU_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ro-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RO_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ro-ur",
                        "short_option": "",
                        "field_name": "thing.string_CO_RO_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ro-uu",
                        "short_option": "",
                        "field_name": "thing.string_CO_RO_UU",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ro-uo",
                        "short_option": "",
                        "field_name": "thing.string_CR_RO_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-rr-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RR_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ru-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RU_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ru-uu",
                        "short_option": "",
                        "field_name": "thing.string_CR_RU_UU",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ru-uu",
                        "short_option": "",
                        "field_name": "thing.string_CO_RU_UU",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.crud.uber_CRUD",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud.ubercrud",
            "name": "update",
            "type": "command",
            "description": "update method",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "the identifier of the thing",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "string-cr-rr-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RR_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "string-cr-rr-uo",
                        "short_option": "",
                        "field_name": "thing.string_CR_RR_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-rr-ur",
                        "short_option": "",
                        "field_name": "thing.string_CO_RR_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cu-rr-ur",
                        "short_option": "",
                        "field_name": "thing.string_CU_RR_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ro-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RO_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ru-ur",
                        "short_option": "",
                        "field_name": "thing.string_CR_RU_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ro-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RO_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ro-ur",
                        "short_option": "",
                        "field_name": "thing.string_CO_RO_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cr-ro-uo",
                        "short_option": "",
                        "field_name": "thing.string_CR_RO_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cu-ro-uo",
                        "short_option": "",
                        "field_name": "thing.string_CU_RO_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-rr-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RR_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-co-ru-uo",
                        "short_option": "",
                        "field_name": "thing.string_CO_RU_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cu-ru-ur",
                        "short_option": "",
                        "field_name": "thing.string_CU_RU_UR",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-cu-ru-uo",
                        "short_option": "",
                        "field_name": "thing.string_CU_RU_UO",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.crud.uber_CRUD",
                "operation_id": "update"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.crud.ubercrud",
            "name": "delete",
            "type": "command",
            "description": "delete method",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "the identifier of the thing",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.crud.uber_CRUD",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "fobd",
            "type": "namespace",
            "description": "Contains tests for FOBD (Fields Optional By Default) annotations"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "includes",
            "type": "namespace",
            "description": "Contains tests for annotations that enable including structures in other structures (a more literal form of composition.) "
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "models",
            "type": "namespace",
            "description": "Contains tests for annotations relating to (data) models"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models",
            "name": "ubermodels",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 models."
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testlocalsimplemodel",
            "type": "command",
            "description": "echo model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.local_simple_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_local_simple_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testoptionallocalsimplemodel",
            "type": "command",
            "description": "echo optional model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.local_simple_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_optional_local_simple_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testlocalcomplexmodel",
            "type": "command",
            "description": "echo model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "id2",
                        "short_option": "",
                        "field_name": "input.id2",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.local_complex_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "id2",
                                "display_name": "Id2"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_local_complex_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testoptionallocalcomplexmodel",
            "type": "command",
            "description": "echo optional model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "id2",
                        "short_option": "",
                        "field_name": "input.id2",
                        "description": "Id of the structure.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.local_complex_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "id2",
                                "display_name": "Id2"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_optional_local_complex_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testnestedsimplemodel",
            "type": "command",
            "description": "echo model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "the model key",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "input.name",
                        "description": "a model property",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_nested_simple_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testoptionalnestedsimplemodel",
            "type": "command",
            "description": "echo optional model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "input.id",
                        "description": "the model key",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "input.name",
                        "description": "a model property",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_optional_nested_simple_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testnestedcomplexmodel",
            "type": "command",
            "description": "echo model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "primary",
                        "short_option": "",
                        "field_name": "input.primary",
                        "description": "Primary ID - the model key",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign1",
                        "short_option": "",
                        "field_name": "input.foreign1",
                        "description": "Other ID field",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign2",
                        "short_option": "",
                        "field_name": "input.foreign2",
                        "description": "Third ID field",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-boolean-field",
                        "short_option": "",
                        "field_name": "input.nested.boolean_field",
                        "description": "boolean field",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-double-field",
                        "short_option": "",
                        "field_name": "input.nested.double_field",
                        "description": "double field",
                        "type": "double",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-long-field",
                        "short_option": "",
                        "field_name": "input.nested.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-string-field",
                        "short_option": "",
                        "field_name": "input.nested.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-date-time-field",
                        "short_option": "",
                        "field_name": "input.nested.date_time_field",
                        "description": "DateTime field",
                        "type": "datetime",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-secret-field",
                        "short_option": "",
                        "field_name": "input.nested.secret_field",
                        "description": "Secret field",
                        "type": "secret",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-uri-field",
                        "short_option": "",
                        "field_name": "input.nested.uri_field",
                        "description": "URI field",
                        "type": "uri",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-enum-field",
                        "short_option": "",
                        "field_name": "input.nested.enum_field",
                        "description": "field using enum",
                        "type": "vmodl.test.uber.shared.shared_greek_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-list-primitive-field",
                        "short_option": "",
                        "field_name": "input.nested.list_primitive_field",
                        "description": "list field",
                        "type": "string",
                        "generic": "list"
                    },
                    {
                        "long_option": "nested-optional-primitive-field",
                        "short_option": "",
                        "field_name": "input.nested.optional_primitive_field",
                        "description": "optional String field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "nested-structure-field-string-field",
                        "short_option": "",
                        "field_name": "input.nested.structure_field.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model",
                        "output_fields": [
                            {
                                "field_name": "primary",
                                "display_name": "Primary"
                            },
                            {
                                "field_name": "foreign1",
                                "display_name": "Foreign1"
                            },
                            {
                                "field_name": "foreign2",
                                "display_name": "Foreign2"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "nested",
                                "display_name": "Nested"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_nested_complex_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.models.ubermodels",
            "name": "testoptionalnestedcomplexmodel",
            "type": "command",
            "description": "echo optional model",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "primary",
                        "short_option": "",
                        "field_name": "input.primary",
                        "description": "Primary ID - the model key",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign1",
                        "short_option": "",
                        "field_name": "input.foreign1",
                        "description": "Other ID field",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign2",
                        "short_option": "",
                        "field_name": "input.foreign2",
                        "description": "Third ID field",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-boolean-field",
                        "short_option": "",
                        "field_name": "input.nested.boolean_field",
                        "description": "boolean field",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-double-field",
                        "short_option": "",
                        "field_name": "input.nested.double_field",
                        "description": "double field",
                        "type": "double",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-long-field",
                        "short_option": "",
                        "field_name": "input.nested.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-string-field",
                        "short_option": "",
                        "field_name": "input.nested.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-date-time-field",
                        "short_option": "",
                        "field_name": "input.nested.date_time_field",
                        "description": "DateTime field",
                        "type": "datetime",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-secret-field",
                        "short_option": "",
                        "field_name": "input.nested.secret_field",
                        "description": "Secret field",
                        "type": "secret",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-uri-field",
                        "short_option": "",
                        "field_name": "input.nested.uri_field",
                        "description": "URI field",
                        "type": "uri",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-enum-field",
                        "short_option": "",
                        "field_name": "input.nested.enum_field",
                        "description": "field using enum",
                        "type": "vmodl.test.uber.shared.shared_greek_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "nested-list-primitive-field",
                        "short_option": "",
                        "field_name": "input.nested.list_primitive_field",
                        "description": "list field",
                        "type": "string",
                        "generic": "list"
                    },
                    {
                        "long_option": "nested-optional-primitive-field",
                        "short_option": "",
                        "field_name": "input.nested.optional_primitive_field",
                        "description": "optional String field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "nested-structure-field-string-field",
                        "short_option": "",
                        "field_name": "input.nested.structure_field.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model",
                        "output_fields": [
                            {
                                "field_name": "primary",
                                "display_name": "Primary"
                            },
                            {
                                "field_name": "foreign1",
                                "display_name": "Foreign1"
                            },
                            {
                                "field_name": "foreign2",
                                "display_name": "Foreign2"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "nested",
                                "display_name": "Nested"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.models.uber_models",
                "operation_id": "test_optional_nested_complex_model"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "annotations",
            "type": "namespace",
            "description": "Contains tests for VMODL2 annotations"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "resources",
            "type": "namespace",
            "description": "Contains tests for resource annotations"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources",
            "name": "uberpolymorphicresource",
            "type": "namespace",
            "description": "vAPI test types for dynamic resource ID support"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources.uberpolymorphicresource",
            "name": "testdynamicidsupportwithouttypeholder",
            "type": "command",
            "description": "Test operation for polymorphic ID support.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "device_type",
                        "description": "device type",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "device_id",
                        "description": "device ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                "operation_id": "test_dynamic_id_support_without_type_holder"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources.uberpolymorphicresource",
            "name": "testdynamicidsupport",
            "type": "command",
            "description": "Test operation for polymorphic ID support.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "device_type",
                        "description": "device type",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "device_id",
                        "description": "device ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                "operation_id": "test_dynamic_id_support"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources.uberpolymorphicresource",
            "name": "testmodelwithdynamicidsupport",
            "type": "command",
            "description": "Test operation for polymorphic ID support.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "model-id",
                        "short_option": "",
                        "field_name": "model.model_id",
                        "description": "model ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "model.device_type",
                        "description": "device type",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "model.device_id",
                        "description": "device ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                "operation_id": "test_model_with_dynamic_id_support"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources.uberpolymorphicresource",
            "name": "testoptionalmodelwithdynamicidsupport",
            "type": "command",
            "description": "test operation with optional model with polymorphic ID.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "model-id",
                        "short_option": "",
                        "field_name": "model.model_id",
                        "description": "model ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "model.device_type",
                        "description": "device type",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "model.device_id",
                        "description": "device ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                "operation_id": "test_optional_model_with_dynamic_id_support"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.resources.uberpolymorphicresource",
            "name": "applyvmpolicies",
            "type": "command",
            "description": "Test method for bug 1059199.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "vm-id",
                        "short_option": "",
                        "field_name": "vm_id",
                        "description": "VM ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "resource-id",
                        "short_option": "",
                        "field_name": "old_resource.resource_id",
                        "description": "resource ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "resource-type",
                        "short_option": "",
                        "field_name": "old_resource.resource_type",
                        "description": "resource type",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                "operation_id": "apply_vm_policies"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "unions",
            "type": "namespace",
            "description": "Contains tests for union annotations"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions",
            "name": "uberunions",
            "type": "namespace",
            "description": "Service for testing discriminated unions support in language bindings."
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "echonestedteststruct",
            "type": "command",
            "description": "Echoes a local\/nested structure value which contains a discriminated union.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "tag",
                        "short_option": "",
                        "field_name": "input.tag",
                        "description": "enum field - union tag",
                        "type": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "long-val",
                        "short_option": "",
                        "field_name": "input.long_val",
                        "description": "long field",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-val",
                        "short_option": "",
                        "field_name": "input.string_val",
                        "description": "string field",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct",
                        "output_fields": [
                            {
                                "field_name": "tag",
                                "display_name": "Tag"
                            },
                            {
                                "field_name": "long_val",
                                "display_name": "LongVal"
                            },
                            {
                                "field_name": "string_val",
                                "display_name": "StringVal"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "echo_nested_test_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "echonestedteststruct2",
            "type": "command",
            "description": "Echoes a local\/nested structure value which contains a multi-value case discriminated union.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "test-enum",
                        "short_option": "",
                        "field_name": "input.test_enum",
                        "description": "enum field - union tag",
                        "type": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2",
                        "generic": ""
                    },
                    {
                        "long_option": "remote-host",
                        "short_option": "",
                        "field_name": "input.remote_host",
                        "description": "remote host",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "port",
                        "short_option": "",
                        "field_name": "input.port",
                        "description": "remote port",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "all",
                        "short_option": "",
                        "field_name": "input.all",
                        "description": "JTB: test",
                        "type": "long",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct2",
                        "output_fields": [
                            {
                                "field_name": "test_enum",
                                "display_name": "TestEnum"
                            },
                            {
                                "field_name": "remote_host",
                                "display_name": "RemoteHost"
                            },
                            {
                                "field_name": "port",
                                "display_name": "Port"
                            },
                            {
                                "field_name": "all",
                                "display_name": "All"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "echo_nested_test_struct2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "echoteststruct",
            "type": "command",
            "description": "Echoes a top-level structure value which contains a discriminated union.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "tag",
                        "short_option": "",
                        "field_name": "input.tag",
                        "description": "Field of enum type.",
                        "type": "vmodl.test.uber.annotations.unions.local_union_struct.tag_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "long-val",
                        "short_option": "",
                        "field_name": "input.long_val",
                        "description": "long field, in the union",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "boolean-val",
                        "short_option": "",
                        "field_name": "input.boolean_val",
                        "description": "boolean field, in the union",
                        "type": "boolean",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-val",
                        "short_option": "",
                        "field_name": "input.string_val",
                        "description": "string field, in the union",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "num-uri-fields",
                        "short_option": "",
                        "field_name": "input.num_URI_fields",
                        "description": "uri field, in the union",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "uri-val",
                        "short_option": "",
                        "field_name": "input.URI_val",
                        "description": "uri field, in the union",
                        "type": "uri",
                        "generic": "optional"
                    },
                    {
                        "long_option": "double-val",
                        "short_option": "",
                        "field_name": "input.double_val",
                        "description": "double field - out of the union",
                        "type": "double",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.unions.local_union_struct",
                        "output_fields": [
                            {
                                "field_name": "tag",
                                "display_name": "Tag"
                            },
                            {
                                "field_name": "long_val",
                                "display_name": "LongVal"
                            },
                            {
                                "field_name": "boolean_val",
                                "display_name": "BooleanVal"
                            },
                            {
                                "field_name": "string_val",
                                "display_name": "StringVal"
                            },
                            {
                                "field_name": "num_URI_fields",
                                "display_name": "NumURIFields"
                            },
                            {
                                "field_name": "URI_val",
                                "display_name": "URIVal"
                            },
                            {
                                "field_name": "double_val",
                                "display_name": "DoubleVal"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "echo_test_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "validateunionparams",
            "type": "command",
            "description": "Test method for the validity of the union in method parameters.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "test-enum",
                        "short_option": "",
                        "field_name": "test_enum",
                        "description": "test enum",
                        "type": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "long-val",
                        "short_option": "",
                        "field_name": "long_val",
                        "description": "union case long value",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "string-val",
                        "short_option": "",
                        "field_name": "string_val",
                        "description": "union case long value",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "boolean-val",
                        "short_option": "",
                        "field_name": "boolean_val",
                        "description": "boolean value (not in union)",
                        "type": "boolean",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "validate_union_params"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "validateunionparams2",
            "type": "command",
            "description": "Test method for the validity of a multi-value case union in method parameters.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "test-enum",
                        "short_option": "",
                        "field_name": "test_enum",
                        "description": "test enum",
                        "type": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2",
                        "generic": ""
                    },
                    {
                        "long_option": "remote-host",
                        "short_option": "",
                        "field_name": "remote_host",
                        "description": "union case remote host address",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "port",
                        "short_option": "",
                        "field_name": "port",
                        "description": "union case port",
                        "type": "long",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "validate_union_params2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.unions.uberunions",
            "name": "validateunionparams3",
            "type": "command",
            "description": "Test method for the validity of a multi-value case union in method parameters.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "test-enum",
                        "short_option": "",
                        "field_name": "test_enum",
                        "description": "test enum",
                        "type": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2",
                        "generic": ""
                    },
                    {
                        "long_option": "remote-host",
                        "short_option": "",
                        "field_name": "remote_host",
                        "description": "union case remote host address",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "port",
                        "short_option": "",
                        "field_name": "port",
                        "description": "union case port",
                        "type": "long",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.unions.uber_unions",
                "operation_id": "validate_union_params3"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "constants",
            "type": "namespace",
            "description": "Contains tests for VMODL2 constants"
        }
        ,
        {
            "path": "vmodl.test.uber.constants",
            "name": "uberconstants",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 constants types."
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "docs",
            "type": "namespace",
            "description": "Example 1: Exercising various bits of markup"
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "enumerations",
            "type": "namespace",
            "description": "Contains tests for VMODL2 enumerations"
        }
        ,
        {
            "path": "vmodl.test.uber.enumerations",
            "name": "uberenumerations",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 enumeration types."
        }
        ,
        {
            "path": "vmodl.test.uber.enumerations.uberenumerations",
            "name": "echoenum",
            "type": "command",
            "description": "echo an enumeration value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.enumerations.uber_enumerations",
                "operation_id": "echo_enum"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.enumerations.uberenumerations",
            "name": "echoenumoptional",
            "type": "command",
            "description": "echo optional enum value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.enumerations.uber_enumerations",
                "operation_id": "echo_enum_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.enumerations.uberenumerations",
            "name": "echoenumlist",
            "type": "command",
            "description": "echo List of enum",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.enumerations.uber_enumerations",
                "operation_id": "echo_enum_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.enumerations.uberenumerations",
            "name": "echosharedenum",
            "type": "command",
            "description": "echo an enumeration value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "vmodl.test.uber.shared.shared_english_enum",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.enumerations.uber_enumerations",
                "operation_id": "echo_shared_enum"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "errors",
            "type": "namespace",
            "description": "Contains tests for VMODL2 error types (aka., exceptions)"
        }
        ,
        {
            "path": "vmodl.test.uber.errors",
            "name": "ubererrorreporting",
            "type": "namespace",
            "description": "vAPI test interface for end-to-end error reporting"
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testnoerror",
            "type": "command",
            "description": "Test operation that does not report an error",
            "node_metadata": {
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_no_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testfiltererrors",
            "type": "command",
            "description": "Test error reporting filter - ApiProvider decorator (like Authnentication filter which reports different errors)",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "error-name",
                        "short_option": "",
                        "field_name": "error_name",
                        "description": "the cannonical name of the error to be reported by the filter",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_filter_errors"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testoperationspecificerror",
            "type": "command",
            "description": "Test operation that reports an operation-specific error (e.g",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "not used",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_operation_specific_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testoperationmultipleerrors",
            "type": "command",
            "description": "Test operation that declares multiple errors and reports different ones based on input",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "determines reported error (1:NotFound, 2:ResourceInUse, 3:InvalidElementType)",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_operation_multiple_errors"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testundeclarederror",
            "type": "command",
            "description": "Test operation that reports an error that isn't specified in the errors clause which should result in the runtime reporting an InternalServerError",
            "node_metadata": {
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_undeclared_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testbindingspecificerror",
            "type": "command",
            "description": "Test operation that throws a programming language specific error which should result in the runtime reporting an InternalServerError",
            "node_metadata": {
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_binding_specific_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrorreporting",
            "name": "testbaseerror",
            "type": "command",
            "description": "Test operation that reports the base Error type",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "report-derived-error",
                        "short_option": "",
                        "field_name": "report_derived_error",
                        "description": "if true the operation will report NotFound which clients will see as InternalServerError because NotFound is not listed in the throws clause",
                        "type": "boolean",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_error_reporting",
                "operation_id": "test_base_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors",
            "name": "ubererrors",
            "type": "namespace",
            "description": "vAPI test interface for integration tests"
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoerror",
            "type": "command",
            "description": "echo an error",
            "node_metadata": {
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "com.vmware.vapi.std.errors.invalid_argument",
                        "output_fields": [
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoerroroptional",
            "type": "command",
            "description": "echo an optional error",
            "node_metadata": {
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "com.vmware.vapi.std.errors.invalid_argument",
                        "output_fields": [
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_error_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoerrorlist",
            "type": "command",
            "description": "echo a list of errors",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "com.vmware.vapi.std.errors.invalid_argument",
                        "output_fields": [
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_error_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoanyerror",
            "type": "command",
            "description": "echo any error",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "exception",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_any_error"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoanyerroroptional",
            "type": "command",
            "description": "echo any optional error",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "exception",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_any_error_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.errors.ubererrors",
            "name": "echoanyerrorlist",
            "type": "command",
            "description": "echo any list of errors",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "exception",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.errors.uber_errors",
                "operation_id": "echo_any_error_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "generics",
            "type": "namespace",
            "description": "Contains tests for VMODL2 generic types"
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "ubergenerics",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 generic types"
        }
        ,
        {
            "path": "vmodl.test.uber.generics.ubergenerics",
            "name": "echonestedcombostructlist",
            "type": "command",
            "description": "Test for complex list as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.generics.uber_generics.nested_combo_struct",
                        "output_fields": [
                            {
                                "field_name": "set_field",
                                "display_name": "SetField"
                            },
                            {
                                "field_name": "set_field_with_id",
                                "display_name": "SetFieldWithId"
                            },
                            {
                                "field_name": "set_field_with_long",
                                "display_name": "SetFieldWithLong"
                            },
                            {
                                "field_name": "map_field_with_string",
                                "display_name": "MapFieldWithString"
                            },
                            {
                                "field_name": "map_field_with_id",
                                "display_name": "MapFieldWithId"
                            },
                            {
                                "field_name": "map_field_with_long",
                                "display_name": "MapFieldWithLong"
                            }
                        ]
                    },
                    {
                        "structure_id": "map-entry",
                        "output_fields": [
                            {
                                "field_name": "key",
                                "display_name": "Key"
                            },
                            {
                                "field_name": "value",
                                "display_name": "Value"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_generics",
                "operation_id": "echo_nested_combo_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.ubergenerics",
            "name": "echoidtonestedcombostructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_generics",
                "operation_id": "echo_id_to_nested_combo_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "uberprimitivelists",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 List<T> types, where the item (T) is a primitive type."
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echobooleanlist",
            "type": "command",
            "description": "echo List of Boolean",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "boolean",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_boolean_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echodoublelist",
            "type": "command",
            "description": "echo List of Double",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "double",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_double_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echolonglist",
            "type": "command",
            "description": "echo List of Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_long_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echostringlist",
            "type": "command",
            "description": "echo List of String",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "string",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_string_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echobinarylist",
            "type": "command",
            "description": "echo List of Binary",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "binary",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_binary_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echodatetimelist",
            "type": "command",
            "description": "echo List of DateTime",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "datetime",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_date_time_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echoidlist",
            "type": "command",
            "description": "echo List of ID",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "id",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_id_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echosecretlist",
            "type": "command",
            "description": "echo List of Secret",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "secret",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_secret_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echourilist",
            "type": "command",
            "description": "echo List of URI",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "uri",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_uri_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echolongoptionallist",
            "type": "command",
            "description": "echo optional List of Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "optional_list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_long_optional_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echolonglistoptional",
            "type": "command",
            "description": "echo List of optional Long values",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "list_optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_long_list_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echolonglistlist",
            "type": "command",
            "description": "echo List of List of Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_long_list_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echostringlistoptional",
            "type": "command",
            "description": "echo List of optional String values",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "string",
                        "generic": "list_optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_string_list_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivelists",
            "name": "echolonglistoptionallist",
            "type": "command",
            "description": "echo List of optional List of Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "list_optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_lists",
                "operation_id": "echo_long_list_optional_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "uberprimitivemaps",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 Map<K,V> types, where the value (V) is any primitive type"
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtobooleanmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_boolean_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtodoublemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_double_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtolongmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_long_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtostringmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_string_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtobinarymap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_binary_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtodatetimemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_date_time_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtoidmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_id_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtosecretmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_secret_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echostringtourimap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_string_to_uri_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtobooleanmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_boolean_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtodoublemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_double_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtolongmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_long_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtostringmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_string_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtobinarymap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_binary_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtodatetimemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_date_time_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtoidmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_id_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtosecretmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_secret_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echolongtourimap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_long_to_uri_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtobooleanmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_boolean_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtodoublemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_double_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtolongmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_long_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtostringmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_string_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtobinarymap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_binary_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtodatetimemap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_date_time_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtoidmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_id_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtosecretmap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_secret_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivemaps",
            "name": "echoidtourimap",
            "type": "command",
            "description": "Test for simple map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_maps",
                "operation_id": "echo_id_to_uri_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "uberprimitivesets",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 Set<T> types"
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echostringset",
            "type": "command",
            "description": "Test for simple set as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "string",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_string_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echolongset",
            "type": "command",
            "description": "Test for simple set as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "long",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_long_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echoidset",
            "type": "command",
            "description": "Test for simple set as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "id",
                        "generic": "list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_id_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echostringoptionalset",
            "type": "command",
            "description": "echo optional Set of String",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "string",
                        "generic": "optional_list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_string_optional_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echolongoptionalset",
            "type": "command",
            "description": "echo optional Set of Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "optional_list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_long_optional_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberprimitivesets",
            "name": "echoidoptionalset",
            "type": "command",
            "description": "echo optional Set of ID",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "id",
                        "generic": "optional_list"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_primitive_sets",
                "operation_id": "echo_id_optional_set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "uberstructurelists",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 List<T> types, where the item (T) is a structure type."
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echosharedemptystructlist",
            "type": "command",
            "description": "echo List of SharedEmptyStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_empty_struct",
                        "output_fields": [
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_shared_empty_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echosharedsimplestructlist",
            "type": "command",
            "description": "echo List of SharedSimpleStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_shared_simple_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echosharedcomplexstructlist",
            "type": "command",
            "description": "echo List of SharedComplexStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.shared.shared_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_shared_complex_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echolocalsimplestructlist",
            "type": "command",
            "description": "echo List of LocalSimpleStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.generics.local_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_local_simple_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echolocalcomplexstructlist",
            "type": "command",
            "description": "echo List of LocalComplexStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.generics.local_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.generics.local_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_local_complex_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructurelists",
            "name": "echonestedsimplestructlist",
            "type": "command",
            "description": "echo List of NestedSimpleStruct",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.generics.uber_structure_lists.nested_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.generics.uber_structure_lists",
                "operation_id": "echo_nested_simple_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics",
            "name": "uberstructuremaps",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 Map<K,V> types, where the value (V) is a structure type"
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echostringtosharedemptystructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_string_to_shared_empty_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echostringtosharedsimplestructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_string_to_shared_simple_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echostringtosharedcomplexstructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_string_to_shared_complex_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echolongtolocalsimplestructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_long_to_local_simple_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echolongtolocalcomplexstructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_long_to_local_complex_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.generics.uberstructuremaps",
            "name": "echoidtonestedsimplestructmap",
            "type": "command",
            "description": "Test for complex map as argument and as return value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.generics.uber_structure_maps",
                "operation_id": "echo_id_to_nested_simple_struct_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "names",
            "type": "namespace",
            "description": "Contains tests for VMODL2 names (or identifiers)"
        }
        ,
        {
            "path": "vmodl.test.uber.names",
            "name": "uberpythonkeywords",
            "type": "namespace",
            "description": "Service that has names which clash with python keywords."
        }
        ,
        {
            "path": "vmodl.test.uber.names.uberpythonkeywords",
            "name": "lambda",
            "type": "command",
            "description": "Method name and parameters clash with python keyword",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "yield",
                        "short_option": "",
                        "field_name": "yield",
                        "description": "doc",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "from",
                        "short_option": "",
                        "field_name": "from",
                        "description": "doc",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "from-2",
                        "short_option": "",
                        "field_name": "struct.from",
                        "description": "from",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.names.uber_python_keywords.struct",
                        "output_fields": [
                            {
                                "field_name": "from",
                                "display_name": "From"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.names.uber_python_keywords.pass",
                        "output_fields": [
                            {
                                "field_name": "struct",
                                "display_name": "Struct"
                            },
                            {
                                "field_name": "struct1",
                                "display_name": "Struct1"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.names.uber_python_keywords",
                "operation_id": "lambda"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "primitives",
            "type": "namespace",
            "description": "Contains tests for VMODL2 primitives"
        }
        ,
        {
            "path": "vmodl.test.uber.primitives",
            "name": "uberprimitives",
            "type": "namespace",
            "description": "Specifies a test interface for all VMODL2 primitive types."
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echonothing",
            "type": "command",
            "description": "void operation",
            "node_metadata": {
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_nothing"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echoboolean",
            "type": "command",
            "description": "echo a Boolean value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "boolean",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_boolean"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echodouble",
            "type": "command",
            "description": "echo a Double value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "double",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_double"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echolong",
            "type": "command",
            "description": "echo a Long value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_long"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echostring",
            "type": "command",
            "description": "echo a String value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_string"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echobinary",
            "type": "command",
            "description": "echo a Binary value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "binary",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_binary"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echodatetime",
            "type": "command",
            "description": "echo a DateTime value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "datetime",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_date_time"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echoid",
            "type": "command",
            "description": "echo an ID value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_id"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echoopaque",
            "type": "command",
            "description": "echo an Opaque value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "opaque",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_opaque"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echosecret",
            "type": "command",
            "description": "echo a Secret value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "secret",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_secret"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echouri",
            "type": "command",
            "description": "echo an URI value",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "uri",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_uri"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echobooleanoptional",
            "type": "command",
            "description": "echo optional Boolean",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "boolean",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_boolean_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echodoubleoptional",
            "type": "command",
            "description": "echo optional Double",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "double",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_double_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echolongoptional",
            "type": "command",
            "description": "echo optional Long",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "long",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_long_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echostringoptional",
            "type": "command",
            "description": "echo optional String",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_string_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echobinaryoptional",
            "type": "command",
            "description": "echo optional Binary",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "binary",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_binary_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echodatetimeoptional",
            "type": "command",
            "description": "echo optional DateTime",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "datetime",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_date_time_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echoidoptional",
            "type": "command",
            "description": "echo optional ID",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "id",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_id_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echosecretoptional",
            "type": "command",
            "description": "echo optional Secret",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "secret",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_secret_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.primitives.uberprimitives",
            "name": "echourioptional",
            "type": "command",
            "description": "echo optional URI",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test value",
                        "type": "uri",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.primitives.uber_primitives",
                "operation_id": "echo_uri_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "privileges",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.privileges",
            "name": "uberprivileges",
            "type": "namespace",
            "description": "Sample test service for testing automatic generation of privilege documentation."
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "simpleoperation",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations without ID parameters.",
            "node_metadata": {
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "simple_operation"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithidparameter",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "an ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_id_parameter"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithidparameter2",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a single ID parameter that has default privilege.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "an ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_id_parameter2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithidparameters",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a ID parameters that has defined and default privileges.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "an ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign-id",
                        "short_option": "",
                        "field_name": "foreign_id",
                        "description": "another ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_id_parameters"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithmapparameters1",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a map parameter whose key is ID.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id-map",
                        "short_option": "",
                        "field_name": "id_map",
                        "description": "a map whose key in an ID",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_map_parameters1"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithmapparameters2",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id-map",
                        "short_option": "",
                        "field_name": "id_map",
                        "description": "a map whose value in an ID",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_map_parameters2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithmapparameters3",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id-map",
                        "short_option": "",
                        "field_name": "id_map",
                        "description": "a map whose key and value in an ID",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_map_parameters3"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithmapparameters4",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id-map",
                        "short_option": "",
                        "field_name": "id_map",
                        "description": "a map whose key and value in an ID",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_map_parameters4"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithstructparameter1",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "spec.id",
                        "description": "Primary key of the resource.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign-id",
                        "short_option": "",
                        "field_name": "spec.foreign_id",
                        "description": "foreign id.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_struct_parameter1"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithstructparameter2",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "spec",
                        "short_option": "",
                        "field_name": "spec",
                        "description": "is the get specification",
                        "type": "complex-hasfieldsof",
                        "generic": "optional"
                    },
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "spec.id",
                        "description": "Primary key of the resource.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign-id",
                        "short_option": "",
                        "field_name": "spec.foreign_id",
                        "description": "foreign id.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_struct_parameter2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithstructparameter3",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "spec",
                        "short_option": "",
                        "field_name": "spec",
                        "description": "is the get specification",
                        "type": "complex-hasfieldsof",
                        "generic": "optional"
                    },
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "spec.id",
                        "description": "Primary key of the resource.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "foreign-id",
                        "short_option": "",
                        "field_name": "spec.foreign_id",
                        "description": "foreign id.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_struct_parameter3"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithstructparameter4",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "spec",
                        "short_option": "",
                        "field_name": "spec",
                        "description": "is the get specification",
                        "type": "complex-hasfieldsof",
                        "generic": "optional"
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_struct_parameter4"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationwithstructparameter5",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields in map.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "map-field",
                        "short_option": "",
                        "field_name": "spec.map_field",
                        "description": "Map of IDs to get privileges assigned on.",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_with_struct_parameter5"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationmix",
            "type": "command",
            "description": "Operation with a mix of IDL constructs.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "is an ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "get-spec-id",
                        "short_option": "",
                        "field_name": "nested_spec.get_spec.id",
                        "description": "Primary key of the resource.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "get-spec-foreign-id",
                        "short_option": "",
                        "field_name": "nested_spec.get_spec.foreign_id",
                        "description": "foreign id.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "map-spec-map-field",
                        "short_option": "",
                        "field_name": "nested_spec.map_spec.map_field",
                        "description": "Map of IDs to get privileges assigned on.",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_mix"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationmix2",
            "type": "command",
            "description": "Operation with a mix of IDL constructs.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "is an ID",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "get-spec-id",
                        "short_option": "",
                        "field_name": "nested_map_spec.get_spec.id",
                        "description": "Primary key of the resource.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "get-spec-foreign-id",
                        "short_option": "",
                        "field_name": "nested_map_spec.get_spec.foreign_id",
                        "description": "foreign id.",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "map-spec-map-field",
                        "short_option": "",
                        "field_name": "nested_map_spec.map_spec.map_field",
                        "description": "Map of IDs to get privileges assigned on.",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_mix2"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationmix3",
            "type": "command",
            "description": "Operation with a mix of IDL constructs.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "spec.device_type",
                        "description": "Device Type.",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "spec.device_id",
                        "description": "device ID.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_mix3"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privileges.uberprivileges",
            "name": "operationmix4",
            "type": "command",
            "description": "Operation with a mix of IDL constructs.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "device-type",
                        "short_option": "",
                        "field_name": "spec.device_type",
                        "description": "Device Type.",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "device-id",
                        "short_option": "",
                        "field_name": "spec.device_id",
                        "description": "Device ID.",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges.uber_privileges",
                "operation_id": "operation_mix4"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "privilegesmore",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.privilegesmore",
            "name": "moreprivileges",
            "type": "namespace",
            "description": "Sample test service for testing automatic generation of privilege documentation"
        }
        ,
        {
            "path": "vmodl.test.uber.privilegesmore.moreprivileges",
            "name": "simpleoperation",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations without ID parameters.",
            "node_metadata": {
                "service_id": "vmodl.test.uber.privileges_more.more_privileges",
                "operation_id": "simple_operation"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.privilegesmore.moreprivileges",
            "name": "operationwithidparameter",
            "type": "command",
            "description": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "an ID",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.privileges_more.more_privileges",
                "operation_id": "operation_with_id_parameter"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "rest",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.rest",
            "name": "configuration",
            "type": "namespace",
            "description": "Configuration for user service"
        }
        ,
        {
            "path": "vmodl.test.uber.rest.configuration",
            "name": "get",
            "type": "command",
            "description": "Create User",
            "node_metadata": {
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.configuration.info",
                        "output_fields": [
                            {
                                "field_name": "max_users",
                                "display_name": "MaxUsers"
                            },
                            {
                                "field_name": "min_age",
                                "display_name": "MinAge"
                            },
                            {
                                "field_name": "num_users",
                                "display_name": "NumUsers"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.configuration",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.configuration",
            "name": "update",
            "type": "command",
            "description": "Update User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "max-users",
                        "short_option": "",
                        "field_name": "spec.max_users",
                        "description": "max users",
                        "type": "long",
                        "generic": "optional"
                    },
                    {
                        "long_option": "min-age",
                        "short_option": "",
                        "field_name": "spec.min_age",
                        "description": "min age",
                        "type": "long",
                        "generic": "optional"
                    }
                ],
                "service_id": "vmodl.test.uber.rest.configuration",
                "operation_id": "update"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.configuration",
            "name": "set",
            "type": "command",
            "description": "Set User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "max-users",
                        "short_option": "",
                        "field_name": "spec.max_users",
                        "description": "max users",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "min-age",
                        "short_option": "",
                        "field_name": "spec.min_age",
                        "description": "min age",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.rest.configuration",
                "operation_id": "set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest",
            "name": "cruduser",
            "type": "namespace",
            "description": "User service"
        }
        ,
        {
            "path": "vmodl.test.uber.rest.cruduser",
            "name": "create",
            "type": "command",
            "description": "Create User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "user.name",
                        "description": "name",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "user.email",
                        "description": "email",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.crud_user.user_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.crud_user",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.cruduser",
            "name": "get",
            "type": "command",
            "description": "Get User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.crud_user.user_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.crud_user",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.cruduser",
            "name": "list",
            "type": "command",
            "description": "List User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "is-active",
                        "short_option": "",
                        "field_name": "filter.is_active",
                        "description": "Filter active users",
                        "type": "boolean",
                        "generic": "optional"
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.crud_user.user_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.crud_user",
                "operation_id": "list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.cruduser",
            "name": "update",
            "type": "command",
            "description": "Update User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "user.name",
                        "description": "name",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "user.email",
                        "description": "email",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.crud_user.user_model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.crud_user",
                "operation_id": "update"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.cruduser",
            "name": "delete",
            "type": "command",
            "description": "Delete User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.rest.crud_user",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest",
            "name": "filter",
            "type": "namespace",
            "description": "Service to test query parameters functionality"
        }
        ,
        {
            "path": "vmodl.test.uber.rest.filter",
            "name": "list",
            "type": "command",
            "description": "List",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "struct.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "boolean-field",
                        "short_option": "",
                        "field_name": "struct.boolean_field",
                        "description": "boolean field",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "long-field",
                        "short_option": "",
                        "field_name": "struct.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "struct-field-string-field",
                        "short_option": "",
                        "field_name": "struct.struct_field.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "struct-field-long-field",
                        "short_option": "",
                        "field_name": "struct.struct_field.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "optional-string",
                        "short_option": "",
                        "field_name": "struct.optional_string",
                        "description": "optional string field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "list-string",
                        "short_option": "",
                        "field_name": "struct.list_string",
                        "description": "list string field",
                        "type": "string",
                        "generic": "list"
                    },
                    {
                        "long_option": "list-list-long",
                        "short_option": "",
                        "field_name": "struct.list_list_long",
                        "description": "list of list string field",
                        "type": "long",
                        "generic": "list"
                    },
                    {
                        "long_option": "map-simple",
                        "short_option": "",
                        "field_name": "struct.map_simple",
                        "description": "map of string string field",
                        "type": "complex",
                        "generic": ""
                    },
                    {
                        "long_option": "map-struct",
                        "short_option": "",
                        "field_name": "struct.map_struct",
                        "description": "map of string struct field",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.filter.complex_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "struct_field",
                                "display_name": "StructField"
                            },
                            {
                                "field_name": "optional_string",
                                "display_name": "OptionalString"
                            },
                            {
                                "field_name": "list_string",
                                "display_name": "ListString"
                            },
                            {
                                "field_name": "list_list_long",
                                "display_name": "ListListLong"
                            },
                            {
                                "field_name": "map_simple",
                                "display_name": "MapSimple"
                            },
                            {
                                "field_name": "map_struct",
                                "display_name": "MapStruct"
                            }
                        ]
                    },
                    {
                        "structure_id": "map-entry",
                        "output_fields": [
                            {
                                "field_name": "key",
                                "display_name": "Key"
                            },
                            {
                                "field_name": "value",
                                "display_name": "Value"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.rest.filter.simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.filter",
                "operation_id": "list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest",
            "name": "user",
            "type": "namespace",
            "description": "User service"
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "create",
            "type": "command",
            "description": "Create User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "spec.name",
                        "description": "name",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "spec.email",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "get",
            "type": "command",
            "description": "Create User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.rest.user.info",
                        "output_fields": [
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "list",
            "type": "command",
            "description": "List User",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "update",
            "type": "command",
            "description": "Update User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "spec.name",
                        "description": "name",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "spec.email",
                        "description": "email",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "update"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "set",
            "type": "command",
            "description": "Set User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "spec.name",
                        "description": "name",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "spec.email",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "delete",
            "type": "command",
            "description": "Delete User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "register",
            "type": "command",
            "description": "Register User",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id param",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "register"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.rest.user",
            "name": "compare",
            "type": "command",
            "description": "Compares two Users and returns -1,0 or 1 based on whether the first user is better, equal or lower than the second user",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "user id of first user",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "other-user-id",
                        "short_option": "",
                        "field_name": "other_user_id",
                        "description": "user id of second user",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.rest.user",
                "operation_id": "compare"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations",
            "name": "rest",
            "type": "namespace",
            "description": "Copyright 2016 VMware, Inc"
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest",
            "name": "custommappingsuser",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "create",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "user.id",
                        "description": "id",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "user.name",
                        "description": "name",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "user.email",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "get",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "list",
            "type": "command",
            "description": "",
            "node_metadata": {
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "name",
                                "display_name": "Name"
                            },
                            {
                                "field_name": "email",
                                "display_name": "Email"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "set",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "user_info.id",
                        "description": "id",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "name",
                        "short_option": "",
                        "field_name": "user_info.name",
                        "description": "name",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "email",
                        "short_option": "",
                        "field_name": "user_info.email",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "delete",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.custommappingsuser",
            "name": "updatename",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "user-name",
                        "short_option": "",
                        "field_name": "user_name",
                        "description": "",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                "operation_id": "update_name"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest",
            "name": "restannotations",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "create",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "create_spec.id",
                        "description": "email",
                        "type": "id",
                        "generic": "optional"
                    },
                    {
                        "long_option": "user-name",
                        "short_option": "",
                        "field_name": "create_spec.user_name",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "company-id",
                        "short_option": "",
                        "field_name": "create_spec.company_id",
                        "description": "email",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.rest.rest_annotations.model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "user_name",
                                "display_name": "UserName"
                            },
                            {
                                "field_name": "company_id",
                                "display_name": "CompanyId"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "getit",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "get_it"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "get1",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "id1",
                        "short_option": "",
                        "field_name": "id1",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "id2",
                        "short_option": "",
                        "field_name": "id2",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "get1"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "get",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "email",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.annotations.rest.rest_annotations.model",
                        "output_fields": [
                            {
                                "field_name": "id",
                                "display_name": "Id"
                            },
                            {
                                "field_name": "user_name",
                                "display_name": "UserName"
                            },
                            {
                                "field_name": "company_id",
                                "display_name": "CompanyId"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "get"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "set",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "id",
                        "short_option": "",
                        "field_name": "update_spec.id",
                        "description": "email",
                        "type": "id",
                        "generic": "optional"
                    },
                    {
                        "long_option": "user-name",
                        "short_option": "",
                        "field_name": "update_spec.user_name",
                        "description": "email",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "company-id",
                        "short_option": "",
                        "field_name": "update_spec.company_id",
                        "description": "email",
                        "type": "string",
                        "generic": "optional"
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "set"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.annotations.rest.restannotations",
            "name": "delete",
            "type": "command",
            "description": "",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "user-id",
                        "short_option": "",
                        "field_name": "user_id",
                        "description": "",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "action-id",
                        "short_option": "",
                        "field_name": "action_id",
                        "description": "",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.annotations.rest.rest_annotations",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "security",
            "type": "namespace",
            "description": ""
        }
        ,
        {
            "path": "vmodl.test.uber.security",
            "name": "authentication",
            "type": "namespace",
            "description": "Provides an authenticaion service for test purposes"
        }
        ,
        {
            "path": "vmodl.test.uber.security.authentication",
            "name": "authenticateusingsamltoken",
            "type": "command",
            "description": "Test operation for SAML authn (Bearer or Holder of Key token)",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.authentication",
                "operation_id": "authenticate_using_saml_token"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authentication",
            "name": "authenticateusingoauth",
            "type": "command",
            "description": "Test operation for OAuth2 authn.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.authentication",
                "operation_id": "authenticate_using_oauth"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authentication",
            "name": "authenticateusinguserpass",
            "type": "command",
            "description": "Test operation for user\/pass authn.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.authentication",
                "operation_id": "authenticate_using_user_pass"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authentication",
            "name": "authenticateusinguserpassornoauth",
            "type": "command",
            "description": "Test operation marked both for no authentication (or) user\/pass authentication.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.authentication",
                "operation_id": "authenticate_using_user_pass_or_no_auth"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security",
            "name": "authorization",
            "type": "namespace",
            "description": "Provides an authorization service for test purposes."
        }
        ,
        {
            "path": "vmodl.test.uber.security.authorization",
            "name": "authorize",
            "type": "command",
            "description": "Authorizes the user for the given resource.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "default-resource",
                        "short_option": "",
                        "field_name": "default_resource",
                        "description": "an ID of a default resource",
                        "type": "id",
                        "generic": ""
                    },
                    {
                        "long_option": "named-id",
                        "short_option": "",
                        "field_name": "named_id",
                        "description": "an ID of a named resource",
                        "type": "id",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.security.authorization",
                "operation_id": "authorize"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authorization",
            "name": "authorizedefault",
            "type": "command",
            "description": "Authorizes the user for an operation without any resource parameters.",
            "node_metadata": {
                "service_id": "vmodl.test.uber.security.authorization",
                "operation_id": "authorize_default"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authorization",
            "name": "authorizenested",
            "type": "command",
            "description": "Authorizes the user for the given resource specified in a nested structure.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "struct-map",
                        "short_option": "",
                        "field_name": "structs.struct_map",
                        "description": "The structure Map to Authorization.Struct values.",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.security.authorization",
                "operation_id": "authorize_nested"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.authorization",
            "name": "authorizemap",
            "type": "command",
            "description": "Authorizes the user for the given resource specified in the nested structure present in the map value.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "struct-map",
                        "short_option": "",
                        "field_name": "struct_map",
                        "description": "a map of Authorization.Struct values",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "service_id": "vmodl.test.uber.security.authorization",
                "operation_id": "authorize_map"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security",
            "name": "session",
            "type": "namespace",
            "description": "Provides an test service that echos back session ID from security context."
        }
        ,
        {
            "path": "vmodl.test.uber.security.session",
            "name": "echosessionid",
            "type": "command",
            "description": "Returns sessionId as found in request's SecurityContext.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.session",
                "operation_id": "echo_session_id"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.session",
            "name": "login",
            "type": "command",
            "description": "Login with SSO token; returns session identifier.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.session",
                "operation_id": "login"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.session",
            "name": "noauthn",
            "type": "command",
            "description": "Login with NoAuthentication security scheme.",
            "node_metadata": {
                "service_id": "vmodl.test.uber.security.session",
                "operation_id": "no_authn"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.session",
            "name": "create",
            "type": "command",
            "description": "Login with SSO token; returns session identifier.",
            "node_metadata": {
                "formatter": "simple",
                "service_id": "vmodl.test.uber.security.session",
                "operation_id": "create"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.security.session",
            "name": "delete",
            "type": "command",
            "description": "Terminates the validity of a session token",
            "node_metadata": {
                "service_id": "vmodl.test.uber.security.session",
                "operation_id": "delete"
            }
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "shared",
            "type": "namespace",
            "description": "Contains tests for VMODL2 shared types"
        }
        ,
        {
            "path": "vmodl.test.uber",
            "name": "structures",
            "type": "namespace",
            "description": "Contains tests for VMODL2 structures"
        }
        ,
        {
            "path": "vmodl.test.uber.structures",
            "name": "uberdynamic",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 dynamic structure types."
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberdynamic",
            "name": "echodynamicstructure",
            "type": "command",
            "description": "Echo dynamic structure.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "service_id": "vmodl.test.uber.structures.uber_dynamic",
                "operation_id": "echo_dynamic_structure"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures",
            "name": "uberrecursive",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 recursive structure types."
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberrecursive",
            "name": "echoselfrecursivestruct",
            "type": "command",
            "description": "Echo structure.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "data",
                        "short_option": "",
                        "field_name": "input.data",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct",
                        "output_fields": [
                            {
                                "field_name": "data",
                                "display_name": "Data"
                            },
                            {
                                "field_name": "next",
                                "display_name": "Next"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_recursive",
                "operation_id": "echo_self_recursive_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberrecursive",
            "name": "echoselfrecursivestructoptional",
            "type": "command",
            "description": "Echo optional structure.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "data",
                        "short_option": "",
                        "field_name": "input.data",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct",
                        "output_fields": [
                            {
                                "field_name": "data",
                                "display_name": "Data"
                            },
                            {
                                "field_name": "next",
                                "display_name": "Next"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_recursive",
                "operation_id": "echo_self_recursive_struct_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberrecursive",
            "name": "echoselfrecursivestructlist",
            "type": "command",
            "description": "Echo list of structures.",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "input",
                        "short_option": "",
                        "field_name": "input",
                        "description": "test input",
                        "type": "complex",
                        "generic": ""
                    }
                ],
                "formatter": "table",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct",
                        "output_fields": [
                            {
                                "field_name": "data",
                                "display_name": "Data"
                            },
                            {
                                "field_name": "next",
                                "display_name": "Next"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_recursive",
                "operation_id": "echo_self_recursive_struct_list"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures",
            "name": "uberstructures",
            "type": "namespace",
            "description": "Specifies a test interface for VMODL2 structure types."
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberstructures",
            "name": "echonestedsimplestruct",
            "type": "command",
            "description": "echo structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_structures",
                "operation_id": "echo_nested_simple_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberstructures",
            "name": "echonestedsimplestructoptional",
            "type": "command",
            "description": "echo optional structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_structures",
                "operation_id": "echo_nested_simple_struct_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberstructures",
            "name": "echonestedcomplexstruct",
            "type": "command",
            "description": "echo structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "boolean-field",
                        "short_option": "",
                        "field_name": "input.boolean_field",
                        "description": "boolean field",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "long-field",
                        "short_option": "",
                        "field_name": "input.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "double-field",
                        "short_option": "",
                        "field_name": "input.double_field",
                        "description": "double field",
                        "type": "double",
                        "generic": ""
                    },
                    {
                        "long_option": "date-time-field",
                        "short_option": "",
                        "field_name": "input.date_time_field",
                        "description": "DateTime field",
                        "type": "datetime",
                        "generic": ""
                    },
                    {
                        "long_option": "uri-field",
                        "short_option": "",
                        "field_name": "input.uri_field",
                        "description": "URI field",
                        "type": "uri",
                        "generic": ""
                    },
                    {
                        "long_option": "secret-field",
                        "short_option": "",
                        "field_name": "input.secret_field",
                        "description": "Secret field",
                        "type": "secret",
                        "generic": ""
                    },
                    {
                        "long_option": "enum-field",
                        "short_option": "",
                        "field_name": "input.enum_field",
                        "description": "field using enum",
                        "type": "vmodl.test.uber.structures.uber_structures.nested_complex_struct.test_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "list-primitive-field",
                        "short_option": "",
                        "field_name": "input.list_primitive_field",
                        "description": "list field",
                        "type": "string",
                        "generic": "list"
                    },
                    {
                        "long_option": "optional-primitive-field",
                        "short_option": "",
                        "field_name": "input.optional_primitive_field",
                        "description": "optional String field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "structure-field-string-field",
                        "short_option": "",
                        "field_name": "input.structure_field.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_structures",
                "operation_id": "echo_nested_complex_struct"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberstructures",
            "name": "echonestedcomplexstructoptional",
            "type": "command",
            "description": "echo optional structure",
            "node_metadata": {
                "options": [
                    {
                        "long_option": "boolean-field",
                        "short_option": "",
                        "field_name": "input.boolean_field",
                        "description": "boolean field",
                        "type": "boolean",
                        "generic": ""
                    },
                    {
                        "long_option": "string-field",
                        "short_option": "",
                        "field_name": "input.string_field",
                        "description": "String field",
                        "type": "string",
                        "generic": ""
                    },
                    {
                        "long_option": "long-field",
                        "short_option": "",
                        "field_name": "input.long_field",
                        "description": "long field",
                        "type": "long",
                        "generic": ""
                    },
                    {
                        "long_option": "double-field",
                        "short_option": "",
                        "field_name": "input.double_field",
                        "description": "double field",
                        "type": "double",
                        "generic": ""
                    },
                    {
                        "long_option": "date-time-field",
                        "short_option": "",
                        "field_name": "input.date_time_field",
                        "description": "DateTime field",
                        "type": "datetime",
                        "generic": ""
                    },
                    {
                        "long_option": "uri-field",
                        "short_option": "",
                        "field_name": "input.uri_field",
                        "description": "URI field",
                        "type": "uri",
                        "generic": ""
                    },
                    {
                        "long_option": "secret-field",
                        "short_option": "",
                        "field_name": "input.secret_field",
                        "description": "Secret field",
                        "type": "secret",
                        "generic": ""
                    },
                    {
                        "long_option": "enum-field",
                        "short_option": "",
                        "field_name": "input.enum_field",
                        "description": "field using enum",
                        "type": "vmodl.test.uber.structures.uber_structures.nested_complex_struct.test_enum",
                        "generic": ""
                    },
                    {
                        "long_option": "list-primitive-field",
                        "short_option": "",
                        "field_name": "input.list_primitive_field",
                        "description": "list field",
                        "type": "string",
                        "generic": "list"
                    },
                    {
                        "long_option": "optional-primitive-field",
                        "short_option": "",
                        "field_name": "input.optional_primitive_field",
                        "description": "optional String field",
                        "type": "string",
                        "generic": "optional"
                    },
                    {
                        "long_option": "structure-field-string-field",
                        "short_option": "",
                        "field_name": "input.structure_field.string_field",
                        "description": "string field",
                        "type": "string",
                        "generic": ""
                    }
                ],
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_simple_struct",
                        "output_fields": [
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            }
                        ]
                    },
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_complex_struct",
                        "output_fields": [
                            {
                                "field_name": "boolean_field",
                                "display_name": "BooleanField"
                            },
                            {
                                "field_name": "string_field",
                                "display_name": "StringField"
                            },
                            {
                                "field_name": "long_field",
                                "display_name": "LongField"
                            },
                            {
                                "field_name": "double_field",
                                "display_name": "DoubleField"
                            },
                            {
                                "field_name": "date_time_field",
                                "display_name": "DateTimeField"
                            },
                            {
                                "field_name": "uri_field",
                                "display_name": "UriField"
                            },
                            {
                                "field_name": "secret_field",
                                "display_name": "SecretField"
                            },
                            {
                                "field_name": "enum_field",
                                "display_name": "EnumField"
                            },
                            {
                                "field_name": "list_primitive_field",
                                "display_name": "ListPrimitiveField"
                            },
                            {
                                "field_name": "optional_primitive_field",
                                "display_name": "OptionalPrimitiveField"
                            },
                            {
                                "field_name": "structure_field",
                                "display_name": "StructureField"
                            }
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_structures",
                "operation_id": "echo_nested_complex_struct_optional"
            }
        }
        ,
        {
            "path": "vmodl.test.uber.structures.uberstructures",
            "name": "echoemptystruct",
            "type": "command",
            "description": "echo empty structure",
            "node_metadata": {
                "formatter": "simple",
                "output_field_list": [
                    {
                        "structure_id": "vmodl.test.uber.structures.uber_structures.nested_empty_struct",
                        "output_fields": [
                        ]
                    }
                ],
                "service_id": "vmodl.test.uber.structures.uber_structures",
                "operation_id": "echo_empty_struct"
            }
        }
    ],
    "metamodel": {
        "component": {
            "name": "vmodl.test.uber",
            "documentation": "",
            "docModels": {
            },
            "metadata": {
                "authn": {"value": "com.vmware.vapi.idl.model.metadata.AuthenticationMetadata@282c90"},
                "authz": {"value": "com.vmware.vapi.idl.model.metadata.AuthorizationMetadata@21990a"}
            },
            "fingerprint": "18ee051c8efb4b6425b5db713062ef3ce69a8716",
            "packages": [
                {
                    "name": "vmodl.test.uber",
                    "documentation": "Defines an uber test model in VMODL2. \n The purpose of this model is to provide exhaustive coverage of the types and constructs available in VMODL2. This model is purely a positive test case, which is primarily used by language toolkits for the following purposes: \n\n   -  unit testing templates for code generation \n  -  integration testing client bindings against a provider implementation \n Contains tests for model components. \n Model components are declared with the following annotations: \n\n   -  @Component (implicitly uses the current package name) \n  -  @Component(\"com.acme.foo.bar\") \n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Defines an "},
                                    {
                                        "italic": [
                                            {"text": "uber"}
                                        ]
                                    }
,
                                    {"text": " test model in VMODL2. "},
                                    {
                                        "paragraph": [
                                            {"text": " The purpose of this model is to provide exhaustive coverage of the types and constructs available in VMODL2. This model is purely a positive test case, which is primarily used by language toolkits for the following purposes: "}
                                        ]
                                    }
,
                                    {
                                        "ul": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " unit testing templates for code generation "}
                                                ]
                                            }
,
                                            {
                                                "li": [
                                                    {"text": " integration testing client bindings against a provider implementation "}
                                                ]
                                            }

                                        ]
                                    }
,
                                    {"text": " Contains tests for model components. "},
                                    {
                                        "paragraph": [
                                            {"text": " Model components are declared with the following annotations: "}
                                        ]
                                    }
,
                                    {
                                        "ul": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Component"},
                                                    {"text": " (implicitly uses the current package name) "}
                                                ]
                                            }
,
                                            {
                                                "li": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Component(\"com.acme.foo.bar\")"},
                                                    {"text": " "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                        "Component": {"value": "true"},
                        "Copyright": {"value": ["Copyright 2013-2014 VMware Inc.", "All rights reserved."]}
                    },
                    "fingerprint": "816adc1704f575d4e93be54e9c48e5f46abb6688",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.hasfieldsof",
                    "documentation": "",
                    "docModels": {
                    },
                    "metadata": {
                    },
                    "fingerprint": "f222415ca25eb3d4fe99d71b3a78ac414bb6e126",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of",
                            "documentation": "Specifies a test interface for VMODL2 @HasFieldsOf annotation.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 @HasFieldsOf annotation."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "CanonicalName": {"value": "has_fields_of"}
                            },
                            "fingerprint": "79c16795b19b6771d57d97c8616c8cf4ec6efd6e",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of.has_fields_of_struct",
                                    "documentation": "Simple HasFieldsOf structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Simple HasFieldsOf structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f41fb12b9e7dd4bd04868b314154e0310906e07b",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "long_field",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "string_field",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of.nested_has_fields_of_struct",
                                    "documentation": "Nested HasFieldsOf structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested HasFieldsOf structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7a0b853bfaf53a92bff58edbbe5dd96bb04b5516",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "long_field",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "nested_struct_field",
                                            "documentation": "Nested struct field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Nested struct field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of.has_fields_of_struct"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "test_has_fields_of_struct",
                                    "documentation": "echo HasFieldsOf structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo HasFieldsOf structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a452e8900005062f00b268b7eb46f04363c7baf4",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nThe parameter must contain all the attributes defined in UberHasFieldsOf.HasFieldsOfStruct.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.hasfieldsof.UberHasFieldsOf.HasFieldsOfStruct", "isToType": true, "text": "vmodl.test.uber.annotations.hasfieldsof.UberHasFieldsOf.HasFieldsOfStruct"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of.has_fields_of_struct"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atCode": "input"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_nested_has_fields_of_struct",
                                    "documentation": "echo NestedHasFieldsOf structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo NestedHasFieldsOf structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e49f18d61e127103baf6f54b511d5bbcd7c3993f",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nThe parameter must contain all the attributes defined in UberHasFieldsOf.NestedHasFieldsOfStruct.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.hasfieldsof.UberHasFieldsOf.NestedHasFieldsOfStruct", "isToType": true, "text": "vmodl.test.uber.annotations.hasfieldsof.UberHasFieldsOf.NestedHasFieldsOfStruct"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.annotations.hasfieldsof.has_fields_of.nested_has_fields_of_struct"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atCode": "input"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.names",
                    "documentation": "Contains tests for identifier names in a model. \n The naming annotations consist of the following: \n\n      @CanonicalName \n   This annotation is used to supply a canonical name for an identifier. In general, this is only necessary when an identifier is an edge case and does not naturally work in the algorithm that creates our canonical form from identifers that follow standard Java naming conventions. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for identifier names in a model. "},
                                    {
                                        "paragraph": [
                                            {"text": " The naming annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@CanonicalName"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This annotation is used to supply a canonical name for an identifier. In general, this is only necessary when an identifier is an edge case and does not naturally work in the algorithm that creates our canonical form from identifers that follow standard Java naming conventions. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "db7cd0158b41aaf7dd674597592f86a98e926b0b",
                    "enumerations": [
                        {
                            "name": "vmodl.test.uber.annotations.names.local_enum",
                            "documentation": "test canonicalizer on a enum name",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "test canonicalizer on a enum name"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "437e1dd4ae2395460037f2e5360e701d9e33b13a",
                            "values": [
                                {
                                    "documentation": "test canonicalizer on a constant name",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test canonicalizer on a constant name"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "UBER_FOO"
                                }
                                ,
                                {
                                    "documentation": "regular constant name",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "regular constant name"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "BAR"
                                }
                            ]
                        }
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.names.local_struct",
                            "documentation": "test canonicalizer on a structure name",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "test canonicalizer on a structure name"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "CanonicalName": {"value": "local_struct"}
                            },
                            "fingerprint": "feffd8a3db117f1e93ead4d728e824c6d321583a",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "enum_field",
                                    "documentation": "enumField",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "enumField"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.names.local_enum"}
                                }
                                ,
                                {
                                    "name": "field",
                                    "documentation": "test canonicalizer on a field name",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test canonicalizer on a field name"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "CanonicalName": {"value": "field"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.names.canonical_names",
                            "documentation": "test canonicalizer on a service name",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "test canonicalizer on a service name"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "CanonicalName": {"value": "canonical_names"}
                            },
                            "fingerprint": "57eec5daa8d84ecf2394019cff0a687ff8877093",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "test_local_struct",
                                    "documentation": "test canonicalizer on a method name and param name",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test canonicalizer on a method name and param name"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "CanonicalName": {"value": "test_local_struct"}
                                    },
                                    "fingerprint": "2d41015e6ed2005def5b2522bfc38ee35019f2b7",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "input"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.names.local_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "test result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "test result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.names.local_struct"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.annotations.names.vAPI_1_2_canonical",
                            "documentation": "Interface to test @CanonicalNames",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Interface to test @CanonicalNames"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "CanonicalName": {"value": "vAPI_1_2_canonical"}
                            },
                            "fingerprint": "cb8d0dd419d5c976dff31b532bac5d03e23b5a34",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.names.vAPI_1_2_canonical.sample_1_2",
                                    "documentation": "doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "CanonicalName": {"value": "sample_1_2"}
                                    },
                                    "fingerprint": "3c3855c07d1abde9181a52ec9d9a64ec58ba8086",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "vDS_port_1_2",
                                            "documentation": "doc",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "vDS_port_1_2"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                        ,
                                        {
                                            "name": "VMware",
                                            "documentation": "doc\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "VMware"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                        ,
                                        {
                                            "name": "ICH_7m_present",
                                            "documentation": "doc\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "ICH_7m_present"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_3_D",
                                    "documentation": "Echo - params and result structure with interesting canonical names.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echo - params and result structure with interesting canonical names."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "CanonicalName": {"value": "echo_3_D"}
                                    },
                                    "fingerprint": "ab750f100457cf9ee8303b52590c35ba652c6366",
                                    "params": [
                                        {
                                            "name": "is_CD_rom",
                                            "documentation": "is it a CD-ROM",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is it a CD-ROM"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "is_CD_rom"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                        ,
                                        {
                                            "name": "vDS_port_1_2",
                                            "documentation": "vDS port 12?\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "vDS port 12?"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "CanonicalName": {"value": "vDS_port_1_2"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "structure with result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "structure with result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.names.vAPI_1_2_canonical.sample_1_2"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.combos",
                    "documentation": "Contains tests for various annotation combinations in models. \n The purpose of this category of tests is to use the other annotation categories together, in combination with one another. This usage is more realistic for \"real world\" models and it is important to ensure they all play nice together.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for various annotation combinations in models. "},
                                    {
                                        "paragraph": [
                                            {"text": " The purpose of this category of tests is to use the other annotation categories together, in combination with one another. This usage is more realistic for \"real world\" models and it is important to ensure they all play nice together."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "fa3616be4a349722226fdf4e7090a9f7d3f605d4",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.combos.inventory_service_helper",
                            "documentation": "Service which contains definitions of structures used to test the Inventory Service serializer.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Service which contains definitions of structures used to test the Inventory Service serializer."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "8c4777a79e74df290ad18aa678d0445089bf7203",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_dynamic_structure_field",
                                    "documentation": "Resource model which has a dynamic structure field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has a dynamic structure field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "75a001d15f89059d32b5b72c83280c480daed000",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "struct",
                                            "documentation": "Any structure.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Any structure."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.structure_with_dynamic_field",
                                    "documentation": "Ordinary structure which has a dynamic structure field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Ordinary structure which has a dynamic structure field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fcdc7c07878949940df416cf955828d9c3b5527c",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "struct",
                                            "documentation": "Any structure.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Any structure."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_optional_of_structure_with_dynamic_field",
                                    "documentation": "Resource model which has Optional of structure with a dynamic field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has Optional of structure with a dynamic field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "1927940bcde39602ac473a4be59f510732239c23",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "optional",
                                            "documentation": "Any structure.\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Any structure."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.structure_with_dynamic_field"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_list_of_structure_with_dynamic_field",
                                    "documentation": "Resource model which has List of structure with a dynamic field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has List of structure with a dynamic field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "d7d692f4312c9bd08926c14f08e2430f90c168e2",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "list",
                                            "documentation": "list",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.structure_with_dynamic_field"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_map_of_structure_with_dynamic_field",
                                    "documentation": "Resource model which has Map of structure with a dynamic field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has Map of structure with a dynamic field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "1e9a9371721a5a2a8289277ead5786bd1859193f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "map",
                                            "documentation": "map",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "map"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.structure_with_dynamic_field"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_list_of_dynamic_structure_field",
                                    "documentation": "Resource model which has a list of dynamic structure field. NOT SUPPORTED - negative test case",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has a list of dynamic structure field. "},
                                                    {
                                                        "bold": [
                                                            {"text": "NOT SUPPORTED"}
                                                        ]
                                                    }
,
                                                    {"text": " - negative test case"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "2c97305f84282bae61b68bc79083807ad80a5d00",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "list",
                                            "documentation": "list",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_map_of_dynamic_structure_field",
                                    "documentation": "Resource model which has a Map of dynamic structure field. NOT SUPPORTED - negative test case",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has a Map of dynamic structure field. "},
                                                    {
                                                        "bold": [
                                                            {"text": "NOT SUPPORTED"}
                                                        ]
                                                    }
,
                                                    {"text": " - negative test case"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "1d3253fb74cd27b89cafaf92e951ae93c48f9f79",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "map",
                                            "documentation": "list",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.model_with_opaque_field",
                                    "documentation": "Resource model which has an opaque field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource model which has an opaque field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "2d9f7faeee62483ea34b40d1175a701b476e288a",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.inventory_service_helper. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.inventory_service_helper.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.inventory_service_helper"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.inventory_service_helper"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "opaq",
                                            "documentation": "Any data value.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Any data value."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "opaque"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.library",
                                    "documentation": "Library from vCD-e API",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Library from vCD-e API"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Includable": {"value": "true"},
                                        "Crud": {"value": "true"},
                                        "Create": {"value": "OPTIONAL"},
                                        "Read": {"value": "REQUIRED"},
                                        "Update": {"value": "OPTIONAL"}
                                    },
                                    "fingerprint": "d0b2841eb49186d94f534fdf784037abe0629677",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "content_version",
                                            "documentation": "content version\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "content version"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "creation_date",
                                            "documentation": "creation date\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "creation date"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                        ,
                                        {
                                            "name": "current_storage_backings",
                                            "documentation": "current storage backings\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "current storage backings"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing"}}}
                                        }
                                        ,
                                        {
                                            "name": "description",
                                            "documentation": "description\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "description"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "last_modified_date",
                                            "documentation": "last modified date\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "last modified date"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                        ,
                                        {
                                            "name": "name",
                                            "documentation": "name\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "storage_backings",
                                            "documentation": "storage backings\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "storage backings"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing"}}}
                                        }
                                        ,
                                        {
                                            "name": "type",
                                            "documentation": "type\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "version",
                                            "documentation": "version\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "version"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.local_library",
                                    "documentation": "LocalLibrary from vCD-e API",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "LocalLibrary from vCD-e API"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"},
                                        "Include": {"value": "vmodl.test.uber.annotations.combos.inventory_service_helper.library"},
                                        "Crud": {"value": "true"},
                                        "Create": {"value": "OPTIONAL"},
                                        "Read": {"value": "REQUIRED"},
                                        "Update": {"value": "OPTIONAL"}
                                    },
                                    "fingerprint": "bae39cc639d1cf8daaa7495e4c6bcbdb0541a5d2",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "ID\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.content.Library.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.content.Library"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.content.Library"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"},
                                                "Resource": {"value": "com.vmware.content.Library"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "publish_info",
                                            "documentation": "publish info\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "publish info"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.publish_info"}}
                                        }
                                        ,
                                        {
                                            "name": "content_version",
                                            "documentation": "content version\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "content version"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "creation_date",
                                            "documentation": "creation date\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "creation date"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                        ,
                                        {
                                            "name": "current_storage_backings",
                                            "documentation": "current storage backings\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "current storage backings"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing"}}}
                                        }
                                        ,
                                        {
                                            "name": "description",
                                            "documentation": "description\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "description"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "last_modified_date",
                                            "documentation": "last modified date\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "last modified date"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                        ,
                                        {
                                            "name": "name",
                                            "documentation": "name\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "storage_backings",
                                            "documentation": "storage backings\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "storage backings"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing"}}}
                                        }
                                        ,
                                        {
                                            "name": "type",
                                            "documentation": "type\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "version",
                                            "documentation": "version\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "version"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing",
                                    "documentation": "StorageBacking from vCD-e API",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "StorageBacking from vCD-e API"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Includable": {"value": "true"},
                                        "Crud": {"value": "true"},
                                        "Create": {"value": "OPTIONAL"},
                                        "Read": {"value": "REQUIRED"},
                                        "Update": {"value": "OPTIONAL"}
                                    },
                                    "fingerprint": "e44d3d41c45b0429ad335e170ad933d932255b55",
                                    "enumerations": [
                                        {
                                            "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing.authentication_method",
                                            "documentation": "Authn method enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Authn method enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "fingerprint": "d4b375f8a42b7c289346b926f0e8e27b9ed18954",
                                            "values": [
                                                {
                                                    "documentation": "password",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "password"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "PASSWORD"
                                                }
                                                ,
                                                {
                                                    "documentation": "no authn",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "no authn"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "NONE"
                                                }
                                            ]
                                        }
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "storage_uri",
                                            "documentation": "storage URI",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "storage URI"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "URI"}
                                        }
                                        ,
                                        {
                                            "name": "authentication_method",
                                            "documentation": "authn method",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "authn method"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"},
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.storage_backing.authentication_method"}
                                        }
                                        ,
                                        {
                                            "name": "user_name",
                                            "documentation": "user name\nThis field is optional and it is only relevant when the value of InventoryServiceHelper.StorageBacking.authentication-method is PASSWORD.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.StorageBacking.authenticationMethod", "isToMember": true, "text": "#authenticationMethod", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.StorageBacking.AuthenticationMethod.PASSWORD", "isToMember": true, "text": "AuthenticationMethod#PASSWORD"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "authentication_method", "value": ["PASSWORD"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "password",
                                            "documentation": "password\nThis field is optional and it is only relevant when the value of InventoryServiceHelper.StorageBacking.authentication-method is PASSWORD.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "password"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.StorageBacking.authenticationMethod", "isToMember": true, "text": "#authenticationMethod", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.StorageBacking.AuthenticationMethod.PASSWORD", "isToMember": true, "text": "AuthenticationMethod#PASSWORD"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "authentication_method", "value": ["PASSWORD"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.publish_info",
                                    "documentation": "PublishInfo vCD-e API",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "PublishInfo vCD-e API"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Includable": {"value": "true"},
                                        "Crud": {"value": "true"},
                                        "Create": {"value": "OPTIONAL"},
                                        "Read": {"value": "REQUIRED"},
                                        "Update": {"value": "OPTIONAL"}
                                    },
                                    "fingerprint": "cf4648318102864f1d02db990b6aa70070b8249d",
                                    "enumerations": [
                                        {
                                            "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.publish_info.authentication_method",
                                            "documentation": "Authn method enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Authn method enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "fingerprint": "0bd131beab220c4ba8581c51b3ffce10603f3571",
                                            "values": [
                                                {
                                                    "documentation": "basic authn",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "basic authn"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "BASIC"
                                                }
                                                ,
                                                {
                                                    "documentation": "no authn",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "no authn"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "NONE"
                                                }
                                            ]
                                        }
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "authentication_method",
                                            "documentation": "authn method",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "authn method"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"},
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.publish_info.authentication_method"}
                                        }
                                        ,
                                        {
                                            "name": "password",
                                            "documentation": "pasword\nThis field is optional and it is only relevant when the value of InventoryServiceHelper.PublishInfo.authentication-method is BASIC.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "pasword"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.PublishInfo.authenticationMethod", "isToMember": true, "text": "#authenticationMethod", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.PublishInfo.AuthenticationMethod.BASIC", "isToMember": true, "text": "AuthenticationMethod#BASIC"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "authentication_method", "value": ["BASIC"]},
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "OPTIONAL"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                        ,
                                        {
                                            "name": "published",
                                            "documentation": "published\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "published"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                        ,
                                        {
                                            "name": "publish_url",
                                            "documentation": "publish URL",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "publish URL"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "URI"}
                                        }
                                        ,
                                        {
                                            "name": "user_name",
                                            "documentation": "user name\nThis field is optional and it is only relevant when the value of InventoryServiceHelper.PublishInfo.authentication-method is BASIC.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.PublishInfo.authenticationMethod", "isToMember": true, "text": "#authenticationMethod", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.combos.InventoryServiceHelper.PublishInfo.AuthenticationMethod.BASIC", "isToMember": true, "text": "AuthenticationMethod#BASIC"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "authentication_method", "value": ["BASIC"]},
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "OPTIONAL"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.vm_policy_params",
                                    "documentation": "A tuple representation of a VM and its desired Policies, along with any associated parameters.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "A tuple representation of a VM and its desired Policies, along with any associated parameters."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"},
                                        "Crud": {"value": "true"}
                                    },
                                    "fingerprint": "42fd463fcd152b28bcf0326971153ebe990004e0",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "vm_id",
                                            "documentation": "Identifier of the VM, Optional when the VM is not yet created\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It must be provided for the update operation.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.VirtualMachine.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Identifier of the VM, Optional when the VM is not yet created"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.VirtualMachine"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.VirtualMachine"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "OPTIONAL"},
                                                "Read": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"},
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.VirtualMachine"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "policy_params",
                                            "documentation": "Map of Policy ID to SinglePolicyParams across different Policies desired by this VM.\nThis field must be provided for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.Policy. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.Policy.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map of Policy ID to SinglePolicyParams across different Policies desired by this VM."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.Policy"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.Policy"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "REQUIRED"},
                                                "Read": {"value": "UNUSED"},
                                                "Update": {"value": "OPTIONAL"},
                                                "Resource": {"value": "com.vmware.Policy"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.combos.inventory_service_helper.single_policy_params"}}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.single_policy_params",
                                    "documentation": "Parameters for an individual Policy desired by the VM.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Parameters for an individual Policy desired by the VM."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "FieldsOptionalByDefault": {"value": "true"},
                                        "Crud": {"value": "true"},
                                        "Create": {"value": "REQUIRED"},
                                        "Read": {"value": "UNUSED"},
                                        "Update": {"value": "OPTIONAL"}
                                    },
                                    "fingerprint": "e6fd9bdf741e7f70e95d34e19944afcd3f388abf",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "policy_id",
                                            "documentation": "Identifier of the Policy in this association.\nThis field must be provided for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.Policy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.Policy.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Identifier of the Policy in this association."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.Policy"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.Policy"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.Policy"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "policy_value",
                                            "documentation": "The desired value of this Policy. This is extension specific. PolicyValue is typically implemented with a constraint on the PolicyOptions that are available for a ProvisioningPolicy. This is typically Extension specific, and that's why PolicyValue is modeled a completely opaque object to the PBM system. The conceptual modeling of PolicyValue is to enable specifying policy requirements for a VM in this manner: {Provisioning Policy Foo := Policy Value } For e.g. {Location := Palo Alto || Fremont} {Anti-Affinity Policy := {Group-1, Group-2}}\nThis field must be provided for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "The desired value of this Policy. This is extension specific. PolicyValue is typically implemented with a constraint on the PolicyOptions that are available for a ProvisioningPolicy. This is typically Extension specific, and that's why PolicyValue is modeled a completely opaque object to the PBM system. The conceptual modeling of PolicyValue is to enable specifying policy requirements for a VM in this manner: {Provisioning Policy Foo := Policy Value } For e.g. {Location := Palo Alto || Fremont} {Anti-Affinity Policy := {Group-1, Group-2}}"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                        ,
                                        {
                                            "name": "remove",
                                            "documentation": "Optional flag indicating whether the Policy association is to be removed for this VM.\nThis field is not used for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Optional flag indicating whether the Policy association is to be removed for this VM."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Create": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.tag_policy_value",
                                    "documentation": "TagBasedPolicyValue represents a specific instance of a Policy. ProvisioningPolicies are consumed by Vms via TagBasedPolicyValue. TagBasedPolicyValue is typically implemented with a constraint on the PolicyTags that are available for a Policy. The conceptual modeling of TagBasedPolicyValue is to enable specifying policy requirements for a VM in this manner: {Policy Foo := Tag Based Policy Value } For e.g. {Location := Palo Alto || Fremont}",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "TagBasedPolicyValue represents a specific instance of a Policy. ProvisioningPolicies are consumed by Vms via TagBasedPolicyValue. TagBasedPolicyValue is typically implemented with a constraint on the PolicyTags that are available for a Policy. The conceptual modeling of TagBasedPolicyValue is to enable specifying policy requirements for a VM in this manner: {Policy Foo := Tag Based Policy Value } For e.g. {Location := Palo Alto || Fremont}"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b4270cb136e4e09f1dab5e18ddbc560ef6327f07",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "policy_tag_id",
                                            "documentation": "Identifier of the desired Tag.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.TagPolicyOption. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.TagPolicyOption.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Identifier of the desired Tag."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.TagPolicyOption"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.TagPolicyOption"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.TagPolicyOption"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.combos.inventory_service_helper.anti_affinity_policy_value",
                                    "documentation": "AntiAffinityPolicyValue represents the value supported for an Anti-Affinity Provisioning Policy. It can specify one or more Availability Groups that a VM should be mapped to. The conceptual modeling of AntiAffinityPolicyValue is to enable specifying policy requirements for a VM in this manner: {Policy Foo := AntiAffinityPolicyValue } For e.g. {Location := Group1 || Group2}",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "AntiAffinityPolicyValue represents the value supported for an Anti-Affinity Provisioning Policy. It can specify one or more Availability Groups that a VM should be mapped to. The conceptual modeling of AntiAffinityPolicyValue is to enable specifying policy requirements for a VM in this manner: {Policy Foo := AntiAffinityPolicyValue } For e.g. {Location := Group1 || Group2}"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e6550bf374423c47a8a13d1a6d05c42d5a64377f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "anti_affinity_policy_id",
                                            "documentation": "Id of the AntiAffinityPolicy the VM wishes to subscribe to.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.AvailabilityGroup. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.AvailabilityGroup.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Id of the AntiAffinityPolicy the VM wishes to subscribe to."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.AvailabilityGroup"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.AvailabilityGroup"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.AvailabilityGroup"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.crud",
                    "documentation": "Contains tests for CRUD annotations. \n The CRUD annotations consist of the following: \n\n      @Crud \n   This marker declares a class to be a CRUD resource. This marker takes an optional value, which may be one of: \n     -  vmodl.crud.Style.FULL_UPDATE \n    -  vmodl.crud.Style.INCREMENTAL_UPDATE \n    -  vmodl.crud.Style.UNSPECIFIED \n :\n     @Create, @Read, @Update \n   This trio marks the access usage for a field as one of: \n     -  vmodl.crud.Usage.REQUIRED \n    -  vmodl.crud.Usage.OPTIONAL \n    -  vmodl.crud.Usage.UNUSED \n These annotations may also appear on the class, in which case the value is used as a default when there is not an explicit indication on a field. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for CRUD annotations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The CRUD annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Crud"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a class to be a CRUD resource. This marker takes an optional value, which may be one of: "},
                                                    {
                                                        "ul": [
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Style.FULL_UPDATE"},
                                                                    {"text": " "}
                                                                ]
                                                            }
,
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Style.INCREMENTAL_UPDATE"},
                                                                    {"text": " "}
                                                                ]
                                                            }
,
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Style.UNSPECIFIED"},
                                                                    {"text": " "}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Create"},
                                                    {"text": ", "},
                                                    {"atLiteral": "@Read"},
                                                    {"text": ", "},
                                                    {"atLiteral": "@Update"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This trio marks the access usage for a field as one of: "},
                                                    {
                                                        "ul": [
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Usage.REQUIRED"},
                                                                    {"text": " "}
                                                                ]
                                                            }
,
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Usage.OPTIONAL"},
                                                                    {"text": " "}
                                                                ]
                                                            }
,
                                                            {
                                                                "li": [
                                                                    {"text": " "},
                                                                    {"atCode": "vmodl.crud.Usage.UNUSED"},
                                                                    {"text": " "}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " These annotations may also appear on the class, in which case the value is used as a default when there is not an explicit indication on a field. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "9373a90425e7a3d3856920328bc34aafdd4bd248",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.crud.uber_CRUD",
                            "documentation": "Specifies a test interface for VMODL2 structure types that utilize the CRUD semantics.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 structure types that utilize the "},
                                            {
                                                "italic": [
                                                    {"text": "CRUD"}
                                                ]
                                            }
,
                                            {"text": " semantics."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "CanonicalName": {"value": "uber_CRUD"}
                            },
                            "fingerprint": "29e54f292e5d3eefad102226a001f70490b18daa",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.crud.uber_CRUD.thing",
                                    "documentation": "defines the thing",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "defines the thing"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Crud": {"value": "INCREMENTAL_UPDATE"}
                                    },
                                    "fingerprint": "6e661a80edd2027a69e238fe989c16ecc830c5f1",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_CR_RR_UR",
                                            "documentation": "string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RR_UO",
                                            "documentation": "string field\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RR_UU",
                                            "documentation": "string field\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RR_UR",
                                            "documentation": "string field\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RR_UR",
                                            "documentation": "string field\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RO_UR",
                                            "documentation": "string field\nThis field must be provided for the create operation. It is optional in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RU_UR",
                                            "documentation": "string field\nThis field must be provided for the create operation. It will not be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RO_UO",
                                            "documentation": "string field\nThis field is optional for the create operation. It is optional in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RO_UR",
                                            "documentation": "string field\nThis field is optional for the create operation. It is optional in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RO_UU",
                                            "documentation": "string field\nThis field is optional for the create operation. It is optional in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RO_UO",
                                            "documentation": "string field\nThis field must be provided for the create operation. It is optional in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RO_UO",
                                            "documentation": "string field\nThis field is not used for the create operation. It is optional in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RR_UO",
                                            "documentation": "string field\nThis field is optional for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RU_UO",
                                            "documentation": "string field\nThis field is optional for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RU_UU",
                                            "documentation": "string field\nThis field is not used for the create operation. It will not be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RU_UR",
                                            "documentation": "string field\nThis field is not used for the create operation. It will not be present in the result of the get or list operations. It must be provided for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It must be provided for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "REQUIRED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RU_UO",
                                            "documentation": "string field\nThis field is not used for the create operation. It will not be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CR_RU_UU",
                                            "documentation": "string field\nThis field must be provided for the create operation. It will not be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CO_RU_UU",
                                            "documentation": "string field\nThis field is optional for the create operation. It will not be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will not be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "UNUSED"},
                                                "Create": {"value": "OPTIONAL"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RR_UU",
                                            "documentation": "string field\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "string_CU_RO_UU",
                                            "documentation": "string field\nThis field is not used for the create operation. It is optional in the result of the get or list operations. It is not used for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It is optional in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "OPTIONAL"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "UNUSED"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "list",
                                    "documentation": "list method",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list method"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "659b2893c3c740c366ec87c5a1fb51aad85b7013",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "a list of things",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "a list of things"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.crud.uber_CRUD.thing"}}
                                    }
                                }
                                ,
                                {
                                    "name": "get",
                                    "documentation": "get method",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "get method"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5af02cab77d8dac6bb2d90716083ba6acaf02d5b",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "the identifier of the thing\nThe parameter must be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the identifier of the thing"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when a thing with the given id cannot be found",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when a thing with the given id cannot be found"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "a thing",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "a thing"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.crud.uber_CRUD.thing"}
                                    }
                                }
                                ,
                                {
                                    "name": "create",
                                    "documentation": "create method",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "create method"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "34858532d7aa8ebce67b0b183da24da32c510725",
                                    "params": [
                                        {
                                            "name": "thing",
                                            "documentation": "the thing",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the thing"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.crud.uber_CRUD.thing"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "id of the thing created\nThe result will be an identifier for the resource type: vmodl.test.uber.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "id of the thing created"}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber"}
                                        },
                                        "type": {"category": "primitive", "primitive_type": "ID"}
                                    }
                                }
                                ,
                                {
                                    "name": "update",
                                    "documentation": "update method",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "update method"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7b6de5d58e776898a81d6d1e8e847606608c5c74",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "the identifier of the thing\nThe parameter must be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the identifier of the thing"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "thing",
                                            "documentation": "the thing",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the thing"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.crud.uber_CRUD.thing"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when a thing with the given id cannot be found",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when a thing with the given id cannot be found"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "delete method",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "delete method"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5d5a8a8677d4f48e52360852e917117564a7ae5a",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "the identifier of the thing\nThe parameter must be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the identifier of the thing"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when a thing with the given id cannot be found",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when a thing with the given id cannot be found"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.fobd",
                    "documentation": "Contains tests for FOBD (Fields Optional By Default) annotations. \n The FOBD annotations consist of the following: \n\n      @FieldsOptionalByDefault \n   This marker declares a class to be a FOBD structure. E.g., it effectively inverts the default semantic, where fields are required by default. :\n     @Required \n   This marker declares a field to be required. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for FOBD (Fields Optional By Default) annotations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The FOBD annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@FieldsOptionalByDefault"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a class to be a FOBD structure. E.g., it effectively inverts the default semantic, where fields are required by default. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Required"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a field to be required. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "d68027e77cc051da3c362cf5242c3b0f4a14cf12",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.fobd.uber_fobd_struct",
                            "documentation": "Specifies a test interface for VMODL2 structure types that utilize the FOBD (Fields Optional By Default) semantics.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 structure types that utilize the "},
                                            {
                                                "italic": [
                                                    {"text": "FOBD (Fields Optional By Default)"}
                                                ]
                                            }
,
                                            {"text": " semantics."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "FieldsOptionalByDefault": {"value": "true"}
                            },
                            "fingerprint": "0bf30820b76b783c96b01236438f5b2017371db8",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "boolean_optional",
                                    "documentation": "boolean field\nboolean reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "boolean field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "boolean reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                }
                                ,
                                {
                                    "name": "double_optional",
                                    "documentation": "double field\ndouble reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "double field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "double reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "double"}}
                                }
                                ,
                                {
                                    "name": "long_optional",
                                    "documentation": "long field\nlong reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "long field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "long reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                }
                                ,
                                {
                                    "name": "string_optional",
                                    "documentation": "String field\nString reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "String reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "date_time_optional",
                                    "documentation": "DateTime field\nDateTime reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "DateTime field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "DateTime reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                }
                                ,
                                {
                                    "name": "secret_optional",
                                    "documentation": "Secret field\nSecret reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Secret field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "Secret reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                }
                                ,
                                {
                                    "name": "uri_optional",
                                    "documentation": "URI field\nURI reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "URI field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "URI reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                }
                                ,
                                {
                                    "name": "enum_optional",
                                    "documentation": "field using enum\nenum reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using enum"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "enum reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.shared.shared_greek_enum"}}
                                }
                                ,
                                {
                                    "name": "list_string_optional",
                                    "documentation": "list field\nstring list reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "string list reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}}
                                }
                                ,
                                {
                                    "name": "structure_optional",
                                    "documentation": "field using other structure\nstructure reason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using other structure"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "structure reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}}
                                }
                                ,
                                {
                                    "name": "boolean_required",
                                    "documentation": "boolean field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "boolean field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "boolean"}
                                }
                                ,
                                {
                                    "name": "double_required",
                                    "documentation": "double field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "double field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "double"}
                                }
                                ,
                                {
                                    "name": "long_required",
                                    "documentation": "long field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "long field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "long"}
                                }
                                ,
                                {
                                    "name": "string_required",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "date_time_required",
                                    "documentation": "DateTime field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "DateTime field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "date_time"}
                                }
                                ,
                                {
                                    "name": "secret_required",
                                    "documentation": "Secret field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Secret field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "secret"}
                                }
                                ,
                                {
                                    "name": "uri_required",
                                    "documentation": "URI field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "URI field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "URI"}
                                }
                                ,
                                {
                                    "name": "enum_required",
                                    "documentation": "field using enum",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using enum"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.shared.shared_greek_enum"}
                                }
                                ,
                                {
                                    "name": "list_string_required",
                                    "documentation": "list field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "structure_required",
                                    "documentation": "field using other structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using other structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Required": {"value": "true"}
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}
                                }
                            ]
                        }
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.includes",
                    "documentation": "Contains tests for annotations that enable including structures in other structures (a more literal form of composition.) \n The include annotations consist of the following: \n\n      @Includable \n   This marker declares a class to be includable by another. An error will be reported for attempting to include a class without this marker. :\n     @Include(Foo.class) \n   This annotation includes the specified class in this one, where Foo.class is a reference to a class that is marked as includable. :\n     @HasFieldsOf(Foo.class) \n   This annotation constrains an element (field, parameter or method result) of type DynamicStructure, such that it must contain the field of the given type :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for annotations that enable including structures in other structures (a more literal form of composition.) "},
                                    {
                                        "paragraph": [
                                            {"text": " The "},
                                            {
                                                "italic": [
                                                    {"text": "include"}
                                                ]
                                            }
,
                                            {"text": " annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Includable"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a class to be includable by another. An error will be reported for attempting to include a class without this marker. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Include(Foo.class)"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This annotation includes the specified class in this one, where "},
                                                    {"atCode": "Foo.class"},
                                                    {"text": " is a reference to a class that is marked as includable. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@HasFieldsOf(Foo.class)"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This annotation constrains an element (field, parameter or method result) of type "},
                                                    {"atCode": "DynamicStructure"},
                                                    {"text": ", such that it must contain the field of the given type "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "c109ee1f8ea3f1154b2849b3f043e74715bb76bf",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.includes.another_composite_struct",
                            "documentation": "a structure type that includes another",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a structure type that includes another"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Include": {"value": "vmodl.test.uber.annotations.includes.partial_struct"}
                            },
                            "fingerprint": "b8fb5a2bb3b8b689a212e3552ba16a0555b51c39",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "composite_long",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "long"}
                                }
                                ,
                                {
                                    "name": "common_required",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "common_optional",
                                    "documentation": "field doc\nreason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.includes.partial_struct",
                            "documentation": "a common, includable structure type",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a common, includable structure type"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Includable": {"value": "true"}
                            },
                            "fingerprint": "1b2db941b17061dd222db92df65b27f937576365",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "common_required",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "common_optional",
                                    "documentation": "field doc\nreason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.includes.shared_composite_struct",
                            "documentation": "a structure type that includes another",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a structure type that includes another"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Include": {"value": "vmodl.test.uber.shared.shared_includable_struct"}
                            },
                            "fingerprint": "81b887ec9b0d09e1ea2398aff5f0cd329e17f3a8",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "composite_string",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "string_field",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.includes.simple_composite_struct",
                            "documentation": "a structure type that includes another",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a structure type that includes another"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Include": {"value": "vmodl.test.uber.annotations.includes.partial_struct"}
                            },
                            "fingerprint": "0adf88885490401f785eaaa61245fd10bfe4e75a",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "composite_string",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "common_required",
                                    "documentation": "field doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "common_optional",
                                    "documentation": "field doc\nreason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field doc"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.models",
                    "documentation": "Contains tests for annotations relating to (data) models. \n The models annotations consist of the following: \n\n      @Model \n   This marker declares a class to be a model structure. :\n     @ModelKey \n   This marker declares a field to be a model key. A model requires a least one key, with type ID. :\n     @ModelIndex \n   This marker declares a field to be a model index, which simply implies it is a searchable field. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for annotations relating to (data) models. "},
                                    {
                                        "paragraph": [
                                            {"text": " The "},
                                            {
                                                "italic": [
                                                    {"text": "models"}
                                                ]
                                            }
,
                                            {"text": " annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Model"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a class to be a model structure. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@ModelKey"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a field to be a model key. A model requires a least one key, with type "},
                                                    {"atCode": "ID"},
                                                    {"text": ". "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@ModelIndex"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a field to be a model index, which simply implies it is a searchable field. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "532a0a81f10edfa1c5eed31820b1c5056991f1a7",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.models.local_complex_model",
                            "documentation": "Test model with complex ID",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Test model with complex ID"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Model": {"value": "true"}
                            },
                            "fingerprint": "1780760e2175b2a0863cefd8586eff90574b4cc7",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "id",
                                    "documentation": "Id of the structure.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Id of the structure."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "ModelKey": {"value": "true"},
                                        "Resource": {"value": "vmodl.test.uber"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                                ,
                                {
                                    "name": "id2",
                                    "documentation": "Id of the structure.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Id of the structure."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "ModelKey": {"order": "2"},
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.models.local_model_with_array_of_ids",
                            "documentation": "Test structure with array of IDs",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Test structure with array of IDs"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Model": {"value": "true"}
                            },
                            "fingerprint": "2ca1e6082c4c001dd69bac8e2d33d6d49c9f9b97",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "id",
                                    "documentation": "Id of the structure.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Id of the structure."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "ModelKey": {"value": "true"},
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                                ,
                                {
                                    "name": "list_ofi_ds",
                                    "documentation": "list of IDs\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list of IDs"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                }
                                ,
                                {
                                    "name": "optional_list_ofi_ds",
                                    "documentation": "optional list of IDs\nreason\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "optional list of IDs"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                }
                                ,
                                {
                                    "name": "list_of_optionali_ds",
                                    "documentation": "list of optional IDs\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list of optional IDs"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                }
                                ,
                                {
                                    "name": "list_of_structure_with_id",
                                    "documentation": "list structure with ID",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list structure with ID"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.models.local_model_with_generics_of_ids",
                            "documentation": "Test structure with generics of IDs",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Test structure with generics of IDs"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Model": {"value": "true"}
                            },
                            "fingerprint": "3db37395c9037b46b0c1e072db7a9303d0eed1c9",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "id",
                                    "documentation": "Id of the structure.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Id of the structure."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "ModelKey": {"value": "true"},
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                                ,
                                {
                                    "name": "optional_set_of_ids",
                                    "documentation": "optional set of Ids\nreason\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "optional set of Ids"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will contain identifiers for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                }
                                ,
                                {
                                    "name": "optional_map_field_with_id",
                                    "documentation": "optional map with ID keys\nreason\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "optional map with ID keys"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the key in the "},
                                                {"atTerm": "field"},
                                                {"text": " "},
                                                {"atTerm": "map"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the key in the "},
                                                {"atTerm": "field"},
                                                {"text": " "},
                                                {"atTerm": "map"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber.foo"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": "vmodl.test.uber.foo"}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.models.local_simple_model",
                            "documentation": "Test model with single ID",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Test model with single ID"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Model": {"value": "true"}
                            },
                            "fingerprint": "1976635722227f6a90e0649feb67c199f5c02f53",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "id",
                                    "documentation": "Id of the structure.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Id of the structure."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be an identifier for the resource type: "},
                                                {"atCode": "vmodl.test.uber"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "ModelKey": {"value": "true"},
                                        "Resource": {"value": "vmodl.test.uber"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.models.uber_models",
                            "documentation": "Specifies a test interface for VMODL2 models.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 models."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "04e66856bbae0ec1a72d8044ecc0e29f4a36bced",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model",
                                    "documentation": "A test model structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "A test model structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "983dbebc7562fc1b5e6411325a04a68c6cecac49",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "the model key\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the model key"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "name",
                                            "documentation": "a model property",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a model property"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model",
                                    "documentation": "A test model structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "A test model structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "aa169a03ef6fe1ab707504d8eeec9620eb764e7e",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "primary",
                                            "documentation": "Primary ID - the model key\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary ID - the model key"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "foreign1",
                                            "documentation": "Other ID field\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Other ID field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelIndex": {"value": "true"},
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "foreign2",
                                            "documentation": "Third ID field\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.bar. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.bar.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Third ID field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.bar"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.bar"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.bar"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "string_field",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "ModelIndex": {"value": "true"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "nested",
                                            "documentation": "Reference to other structure",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Reference to other structure"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_complex_struct"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.models.uber_models.nested_model_with_optional_id",
                                    "documentation": "A test model with optional IDs",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "A test model with optional IDs"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "9bd89c2b81ea226009d6798712bd319ff3e1ee7a",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "primary",
                                            "documentation": "Primary ID - the model key\nreason\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary ID - the model key"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "foreign",
                                            "documentation": "Other ID field\nreason\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Other ID field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "test_local_simple_model",
                                    "documentation": "echo model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9e58059796450a3d5efbf8e22753deacd654944c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testLocalSimpleModel#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_optional_local_simple_model",
                                    "documentation": "echo optional model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c439c0bf7cc31484de9d93e546068b94a6569ef9",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\ninput good reason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testOptionalLocalSimpleModel#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "input good reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_simple_model"}}
                                    }
                                }
                                ,
                                {
                                    "name": "test_local_complex_model",
                                    "documentation": "echo model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "cd2a576c241d3d64bae5d5723ecc115118785227",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_complex_model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testLocalComplexModel#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_complex_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_optional_local_complex_model",
                                    "documentation": "echo optional model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ffc9db183eaed316f39fb2e50cec288251a3672f",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_complex_model"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\ninput good reason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testOptionalLocalComplexModel#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "input good reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.local_complex_model"}}
                                    }
                                }
                                ,
                                {
                                    "name": "test_nested_simple_model",
                                    "documentation": "echo model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "65ee05d85c64caea70a1355503025902f13ff157",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testNestedSimpleModel#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_optional_nested_simple_model",
                                    "documentation": "echo optional model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "41b52d7c3edc2f56d11951cd35b982f112cc8e7e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\ninput good reason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testOptionalNestedSimpleModel#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "input good reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_simple_model"}}
                                    }
                                }
                                ,
                                {
                                    "name": "test_nested_complex_model",
                                    "documentation": "echo model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d16fe3adc29e687d4ae1bab2cd9cc19cd53f3be1",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testNestedComplexModel#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_optional_nested_complex_model",
                                    "documentation": "echo optional model",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional model"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b10d047396974d267c3254b205f8a1528c2c2c4b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\ninput good reason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.models.UberModels.testOptionalNestedComplexModel#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "input good reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.models.uber_models.nested_complex_model"}}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations",
                    "documentation": "Contains tests for VMODL2 annotations. \n The tests herein are organized by sub-packages, which contain tests for a particular functionality in VMODL2. Each category may utilize one or more annotations, which will be spelled out by each category.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 annotations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The tests herein are organized by sub-packages, which contain tests for a particular functionality in VMODL2. Each category may utilize one or more annotations, which will be spelled out by each category."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "bf1abb52813fc5377c35a87840a045d50614666b",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.resources",
                    "documentation": "Contains tests for resource annotations. \n The resource annotations consist of the following: \n\n      @Resource \n   This marker associates any element of type ID to be of the given resource type. It may be declared directly on any element of type ID or, as a convenience, it may be declared on a containing class or interface. In the latter case, it implies a default resource type for any ID contained therein (unless explicitly overridden.) :\n     @IsOneOf({\"foo\", \"bar\")} \n   This annotation is used to constrain a polymorphic resource. :\n     @SymbolTableOnly \n   This marker is often used on an interface that strictly exists to declare resource type constants. In this case, the constants are symbols for the compiler only and they will be replaced by the literal value when producing the IDL model. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for resource annotations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The resource annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@Resource"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker associates any element of type "},
                                                    {"atCode": "ID"},
                                                    {"text": " to be of the given resource type. It may be declared directly on any element of type "},
                                                    {"atCode": "ID"},
                                                    {"text": " or, as a convenience, it may be declared on a containing class or interface. In the latter case, it implies a default resource type for any "},
                                                    {"atCode": "ID"},
                                                    {"text": " contained therein (unless explicitly overridden.) "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@IsOneOf({\"foo\", \"bar\""},
                                                    {"text": ")} "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This annotation is used to constrain a polymorphic resource. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@SymbolTableOnly"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker is often used on an interface that strictly exists to declare resource type constants. In this case, the constants are symbols for the compiler only and they will be replaced by the literal value when producing the IDL model. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "37a3dac7cab2570aac2d7c6cf15f3bd8de8c6b55",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.resources.local_struct_with_dynamic_id",
                            "documentation": "simple top level test structure for polymorphic resoruce ID support",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "simple top level test structure for polymorphic resoruce ID support"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "bade6dfcabfa025bbbd2abdad41a83ea77a62cd0",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "device_type",
                                    "documentation": "device type\nWhen clients pass a value of this structure as a parameter, the field must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "device type"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " must be one of "},
                                                {"atCode": "com.vmware.CDROM"},
                                                {"text": ", "},
                                                {"atCode": "com.vmware.floppy"},
                                                {"text": ", or "},
                                                {"atCode": "com.vmware.USB"},
                                                {"text": ". When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " will be one of "},
                                                {"atCode": "com.vmware.CDROM"},
                                                {"text": ", "},
                                                {"atCode": "com.vmware.floppy"},
                                                {"text": ", or "},
                                                {"atCode": "com.vmware.USB"},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "device_id",
                                    "documentation": "device ID\nWhen clients pass a value of this structure as a parameter, the field LocalStructWithDynamicId.device-type must contain the actual resource type. When operations return a value of this structure as a result, the field LocalStructWithDynamicId.device-type will contain the actual resource type.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "device ID"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "metadata": 
                                        {
                                            "docModel": [
                                                {"text": "When clients pass a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "parameter"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.resources.LocalStructWithDynamicId.deviceType", "isToMember": true, "text": "#deviceType", "tag": "name"}},
                                                {"text": " must contain the actual resource type. When "},
                                                {"atTerm": "operations"},
                                                {"text": " return a value of this "},
                                                {"atTerm": "structure"},
                                                {"text": " as a "},
                                                {"atTerm": "result"},
                                                {"text": ", the "},
                                                {"atTerm": "field"},
                                                {"text": " "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.resources.LocalStructWithDynamicId.deviceType", "isToMember": true, "text": "#deviceType", "tag": "name"}},
                                                {"text": " will contain the actual resource type."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "Resource": {"value": [], "typeHolder": "device_type"}
                                    },
                                    "type": {"category": "primitive", "primitive_type": "ID"}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource",
                            "documentation": "vAPI test types for dynamic resource ID support",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "vAPI test types for dynamic resource ID support"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "8f7e5ba599ee9c21d5a4d45387b3e8f449864f8a",
                            "constants": [
                                {
                                    "name": "REMOVABLE",
                                    "documentation": "Test array of constants for polymorphic resource IDs",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test array of constants for polymorphic resource IDs"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "String"},
                                    "value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]
                                }
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_model_with_dynamic_id",
                                    "documentation": "simple test model for polymorphic resoruce ID support",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "simple test model for polymorphic resoruce ID support"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "ead11b59b00dc75775478c54f9302d8da5190dc1",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "model_id",
                                            "documentation": "model ID\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.dynamic_resource_test. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.dynamic_resource_test.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "model ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.dynamic_resource_test"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.dynamic_resource_test"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Resource": {"value": "com.vmware.dynamic_resource_test"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "device_type",
                                            "documentation": "device type\nWhen clients pass a value of this structure as a parameter, the field must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "device_id",
                                            "documentation": "device ID\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_structure_with_dynamic_id",
                                    "documentation": "simple test structure for polymorphic resoruce ID support",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "simple test structure for polymorphic resoruce ID support"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "90ab330ad64564533ef6bae1b45380577202060a",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "device_id",
                                            "documentation": "device ID\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "device_type",
                                            "documentation": "device type\nWhen clients pass a value of this structure as a parameter, the field must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_any_resource_support",
                                    "documentation": "test structure for any resource type support",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test structure for any resource type support"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "826bf2aad45b264e621f463b82aec90296d5dfa8",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "resource_type",
                                            "documentation": "resource type",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "resource type"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "resource_id",
                                            "documentation": "resource ID\nWhen clients pass a value of this structure as a parameter, the field UberPolymorphicResource.TestAnyResourceSupport.resource-type must contain the actual resource type. When operations return a value of this structure as a result, the field UberPolymorphicResource.TestAnyResourceSupport.resource-type will contain the actual resource type.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "resource ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.resources.UberPolymorphicResource.TestAnyResourceSupport.resourceType", "isToMember": true, "text": "#resourceType", "tag": "name"}},
                                                        {"text": " must contain the actual resource type. When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.resources.UberPolymorphicResource.TestAnyResourceSupport.resourceType", "isToMember": true, "text": "#resourceType", "tag": "name"}},
                                                        {"text": " will contain the actual resource type."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": [], "typeHolder": "resource_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_resource",
                                    "documentation": "test object for bug 1059199",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test object for bug 1059199"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ad2756c49d922c540d26ec0004be62db485d25c6",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "resource_id",
                                            "documentation": "resource ID\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "resource ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "resource_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "resource_type",
                                            "documentation": "resource type\nWhen clients pass a value of this structure as a parameter, the field must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "resource type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "test_dynamic_id_support_without_type_holder",
                                    "documentation": "Test operation for polymorphic ID support.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for polymorphic ID support."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "569d285c6bae71b985c2bbcd33f62454711320c2",
                                    "params": [
                                        {
                                            "name": "device_type",
                                            "documentation": "device type\nThe parameter must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "device_id",
                                            "documentation": "device ID\nThe parameter must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_dynamic_id_support",
                                    "documentation": "Test operation for polymorphic ID support.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for polymorphic ID support."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "4a0edbe163a6a8bfa16d5d1b5646d41d0d7c7b58",
                                    "params": [
                                        {
                                            "name": "device_type",
                                            "documentation": "device type\nThe parameter must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device type"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "device_id",
                                            "documentation": "device ID\nThe parameter must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_model_with_dynamic_id_support",
                                    "documentation": "Test operation for polymorphic ID support.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for polymorphic ID support."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b725ce89f4e767629cb3e5d37cd803424af4b60e",
                                    "params": [
                                        {
                                            "name": "model",
                                            "documentation": "test model with dynamic ID",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test model with dynamic ID"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_model_with_dynamic_id"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_optional_model_with_dynamic_id_support",
                                    "documentation": "test operation with optional model with polymorphic ID.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test operation with optional model with polymorphic ID."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "be2d74338981aa8dc1d0550f679b23cd52c93660",
                                    "params": [
                                        {
                                            "name": "model",
                                            "documentation": "optional test model with dynamic ID\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "optional test model with dynamic ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_model_with_dynamic_id"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "apply_vm_policies",
                                    "documentation": "Test method for bug 1059199.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test method for bug 1059199."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b0edc7a7c9138b1bb2a4def4832457ea68859f42",
                                    "params": [
                                        {
                                            "name": "vm_id",
                                            "documentation": "VM ID\nThe parameter must be an identifier for the resource type: some.resource.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "VM ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "some.resource"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "some.resource"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "old_resource",
                                            "documentation": "old resource\nis not required when the VM is newly created",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "old resource"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "is not required when the VM is newly created"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.resources.uber_polymorphic_resource.test_resource"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.unions",
                    "documentation": "Contains tests for union annotations. \n The union annotations consist of the following: \n\n      @UnionTag \n   This marker declares a field or parameter to be a union tag, which is the discriminant of a union. The type of a union tag must be an enumeration. :\n     @UnionCase(tag=\"myTag\", value=\"FOO\" \n   This marker declares a field or parameter to be a union case, whose value is expected to be set only when the tag contains the value of this case. :\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for union annotations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The union annotations consist of the following: "}
                                        ]
                                    }
,
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@UnionTag"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a field or parameter to be a union tag, which is the discriminant of a union. The type of a union tag must be an enumeration. "}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": " "},
                                                    {"atLiteral": "@UnionCase(tag=\"myTag\", value=\"FOO\""},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "dt": [
                                                    {"text": " This marker declares a field or parameter to be a union case, whose value is expected to be set only when the tag contains the value of this case. "}
                                                ]
                                            }

                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "701672008c222c704e8daeb1c130a2913f84b537",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.annotations.unions.local_union_struct",
                            "documentation": "Top level Structure.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Top level Structure."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "498ff440f370b1f7cb652a8be351d917d17184aa",
                            "enumerations": [
                                {
                                    "name": "vmodl.test.uber.annotations.unions.local_union_struct.tag_enum",
                                    "documentation": "Enum defined inside a top level structure; used for union tag type.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Enum defined inside a top level structure; used for union tag type."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5c2b3914ca160e5ac30055e72e9b09e61c8dad0e",
                                    "values": [
                                        {
                                            "documentation": "enum constant - LONG",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum constant - LONG"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "LONG"
                                        }
                                        ,
                                        {
                                            "documentation": "enum constant - BOOLEAN",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum constant - BOOLEAN"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "BOOLEAN"
                                        }
                                        ,
                                        {
                                            "documentation": "enum constant - STRING",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum constant - STRING"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "STRING"
                                        }
                                        ,
                                        {
                                            "documentation": "enum constant - URI",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum constant - URI"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "URI"
                                        }
                                        ,
                                        {
                                            "documentation": "enum constant - NONE",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum constant - NONE"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "NONE"
                                        }
                                    ]
                                }
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "tag",
                                    "documentation": "Field of enum type.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Field of enum type."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "UnionTag": {"value": "true"}
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.local_union_struct.tag_enum"}
                                }
                                ,
                                {
                                    "name": "long_val",
                                    "documentation": "long field, in the union\nThis field is optional and it is only relevant when the value of LocalUnionStruct.tag is LONG.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "long field, in the union"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "This "},
                                                {"atTerm": "field"},
                                                {"text": " is optional and it is only relevant when the value of "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                {"text": " is "},
                                                {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.TagEnum.LONG", "isToMember": true, "text": "TagEnum#LONG"}},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "UnionCase": {"tag": "tag", "value": ["LONG"]}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                }
                                ,
                                {
                                    "name": "boolean_val",
                                    "documentation": "boolean field, in the union\nThis field is optional and it is only relevant when the value of LocalUnionStruct.tag is BOOLEAN.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "boolean field, in the union"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "This "},
                                                {"atTerm": "field"},
                                                {"text": " is optional and it is only relevant when the value of "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                {"text": " is "},
                                                {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.TagEnum.BOOLEAN", "isToMember": true, "text": "TagEnum#BOOLEAN"}},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "UnionCase": {"tag": "tag", "value": ["BOOLEAN"]}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                }
                                ,
                                {
                                    "name": "string_val",
                                    "documentation": "string field, in the union\nThis field is optional and it is only relevant when the value of LocalUnionStruct.tag is STRING.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "string field, in the union"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "This "},
                                                {"atTerm": "field"},
                                                {"text": " is optional and it is only relevant when the value of "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                {"text": " is "},
                                                {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.TagEnum.STRING", "isToMember": true, "text": "TagEnum#STRING"}},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "UnionCase": {"tag": "tag", "value": ["STRING"]}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "num_URI_fields",
                                    "documentation": "uri field, in the union\nThis field is optional and it is only relevant when the value of LocalUnionStruct.tag is URI.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "uri field, in the union"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "This "},
                                                {"atTerm": "field"},
                                                {"text": " is optional and it is only relevant when the value of "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                {"text": " is "},
                                                {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.TagEnum.URI", "isToMember": true, "text": "TagEnum#URI"}},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "UnionCase": {"tag": "tag", "value": ["URI"]}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                }
                                ,
                                {
                                    "name": "URI_val",
                                    "documentation": "uri field, in the union\nThis field is optional and it is only relevant when the value of LocalUnionStruct.tag is URI.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "uri field, in the union"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "This "},
                                                {"atTerm": "field"},
                                                {"text": " is optional and it is only relevant when the value of "},
                                                {"atName": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                {"text": " is "},
                                                {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.LocalUnionStruct.TagEnum.URI", "isToMember": true, "text": "TagEnum#URI"}},
                                                {"text": "."}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "CanonicalName": {"value": "URI_val"},
                                        "UnionCase": {"tag": "tag", "value": ["URI"]}
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                }
                                ,
                                {
                                    "name": "double_val",
                                    "documentation": "double field - out of the union",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "double field - out of the union"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "double"}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.unions.uber_unions",
                            "documentation": "Service for testing discriminated unions support in language bindings.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Service for testing discriminated unions support in language bindings."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "62850b2bb3eaceb0ea7602baf1d0845e192b0d10",
                            "constants": [
                            ],
                            "enumerations": [
                                {
                                    "name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum",
                                    "documentation": "Enum used for type of discriminated union tag",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Enum used for type of discriminated union tag"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e70d822d26396e0dd99a040aee0ef3a489df7295",
                                    "values": [
                                        {
                                            "documentation": "constant - LONG",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - LONG"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "LONG"
                                        }
                                        ,
                                        {
                                            "documentation": "constant - STRING",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - STRING"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "STRING"
                                        }
                                        ,
                                        {
                                            "documentation": "constant - NONE",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - NONE"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "NONE"
                                        }
                                    ]
                                }
                                ,
                                {
                                    "name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2",
                                    "documentation": "Enum used for type of discriminated union tag",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Enum used for type of discriminated union tag"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "de79c078a0d1a55024e509a154764547d0bc1edc",
                                    "values": [
                                        {
                                            "documentation": "constant - LOCAL",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - LOCAL"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "LOCAL"
                                        }
                                        ,
                                        {
                                            "documentation": "constant - REMOTE",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - REMOTE"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "REMOTE"
                                        }
                                        ,
                                        {
                                            "documentation": "constant - NONE",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "constant - NONE"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "NONE"
                                        }
                                    ]
                                }
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct",
                                    "documentation": "Test local structure with union",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test local structure with union"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a7a86cdabc38a416b60b3c4b72850bfdc741f68b",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "tag",
                                            "documentation": "enum field - union tag",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum field - union tag"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum"}
                                        }
                                        ,
                                        {
                                            "name": "long_val",
                                            "documentation": "long field\nThis field is optional and it is only relevant when the value of UberUnions.NestedTestStruct.tag is LONG.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum.LONG", "isToMember": true, "text": "NestedTestEnum#LONG"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "tag", "value": ["LONG"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                        ,
                                        {
                                            "name": "string_val",
                                            "documentation": "string field\nThis field is optional and it is only relevant when the value of UberUnions.NestedTestStruct.tag is STRING.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestStruct.tag", "isToMember": true, "text": "#tag", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum.STRING", "isToMember": true, "text": "NestedTestEnum#STRING"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "tag", "value": ["STRING"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct2",
                                    "documentation": "Test local struct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test local struct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "05168f1cf60e8e41dcf39f83eb6b2bbd02ecc42f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "test_enum",
                                            "documentation": "enum field - union tag",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum field - union tag"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2"}
                                        }
                                        ,
                                        {
                                            "name": "remote_host",
                                            "documentation": "remote host\nThis field is optional and it is only relevant when the value of UberUnions.NestedTestStruct2.test-enum is REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "remote host"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestStruct2.testEnum", "isToMember": true, "text": "#testEnum", "tag": "name"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "port",
                                            "documentation": "remote port\nThis field is optional and it is only relevant when the value of UberUnions.NestedTestStruct2.test-enum is one of LOCAL or REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "remote port"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestStruct2.testEnum", "isToMember": true, "text": "#testEnum", "tag": "name"}},
                                                        {"text": " is one of "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.LOCAL", "isToMember": true, "text": "NestedTestEnum2#LOCAL"}},
                                                        {"text": " or "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["LOCAL", "REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                        ,
                                        {
                                            "name": "all",
                                            "documentation": "JTB: test\nThis field is optional and it is only relevant when the value of UberUnions.NestedTestStruct2.test-enum is one of LOCAL, REMOTE, or NONE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "JTB: test"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atName": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestStruct2.testEnum", "isToMember": true, "text": "#testEnum", "tag": "name"}},
                                                        {"text": " is one of "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.LOCAL", "isToMember": true, "text": "NestedTestEnum2#LOCAL"}},
                                                        {"text": ", "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": ", or "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.NONE", "isToMember": true, "text": "NestedTestEnum2#NONE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["LOCAL", "REMOTE", "NONE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_nested_test_struct",
                                    "documentation": "Echoes a local\/nested structure value which contains a discriminated union.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echoes a local\/nested structure value which contains a discriminated union."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "8c9a59e4d4c343d7e4d17673fd738db8a67ef659",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.echoNestedTestStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_nested_test_struct2",
                                    "documentation": "Echoes a local\/nested structure value which contains a multi-value case discriminated union.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echoes a local\/nested structure value which contains a multi-value case discriminated union."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d29cd2d81905a808538d65a447ea1b6b22a001ac",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct2"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.echoNestedTestStruct2#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_struct2"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_test_struct",
                                    "documentation": "Echoes a top-level structure value which contains a discriminated union.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echoes a top-level structure value which contains a discriminated union."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "64ad268d844a30b00d45628d0d3071f58ebbb535",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.local_union_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.echoTestStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.unions.local_union_struct"}
                                    }
                                }
                                ,
                                {
                                    "name": "validate_union_params",
                                    "documentation": "Test method for the validity of the union in method parameters.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test method for the validity of the union in method parameters."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9ea0494da32037316cd8271fc2d862736637eac1",
                                    "params": [
                                        {
                                            "name": "test_enum",
                                            "documentation": "test enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum"}
                                        }
                                        ,
                                        {
                                            "name": "long_val",
                                            "documentation": "union case long value\nThis parameter is optional and it is only relevant when the value of testEnum is LONG.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case long value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams#testEnum"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum.LONG", "isToMember": true, "text": "NestedTestEnum#LONG"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["LONG"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                        ,
                                        {
                                            "name": "string_val",
                                            "documentation": "union case long value\nThis parameter is optional and it is only relevant when the value of testEnum is STRING.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case long value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams#testEnum"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum.STRING", "isToMember": true, "text": "NestedTestEnum#STRING"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["STRING"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "boolean_val",
                                            "documentation": "boolean value (not in union)",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "boolean value (not in union)"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "true if input union was in valid state",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if input union was in valid state"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "validate_union_params2",
                                    "documentation": "Test method for the validity of a multi-value case union in method parameters.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test method for the validity of a multi-value case union in method parameters."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e7301c31fb5fd9cc1663fee873636f8440f7d316",
                                    "params": [
                                        {
                                            "name": "test_enum",
                                            "documentation": "test enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2"}
                                        }
                                        ,
                                        {
                                            "name": "remote_host",
                                            "documentation": "union case remote host address\nThis parameter is optional and it is only relevant when the value of testEnum is REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case remote host address"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams2#testEnum"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "port",
                                            "documentation": "union case port\nThis parameter is optional and it is only relevant when the value of testEnum is one of LOCAL or REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case port"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams2#testEnum"}},
                                                        {"text": " is one of "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.LOCAL", "isToMember": true, "text": "NestedTestEnum2#LOCAL"}},
                                                        {"text": " or "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["LOCAL", "REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "true if input union was in valid state",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if input union was in valid state"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "validate_union_params3",
                                    "documentation": "Test method for the validity of a multi-value case union in method parameters.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test method for the validity of a multi-value case union in method parameters."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "231fd1445282143a9dff6d5386b1af70004e02a9",
                                    "params": [
                                        {
                                            "name": "test_enum",
                                            "documentation": "test enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "UnionTag": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.annotations.unions.uber_unions.nested_test_enum2"}
                                        }
                                        ,
                                        {
                                            "name": "remote_host",
                                            "documentation": "union case remote host address\nThis parameter is optional and it is only relevant when the value of testEnum is REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case remote host address"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams3#testEnum"}},
                                                        {"text": " is "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "port",
                                            "documentation": "union case port\nThis parameter is optional and it is only relevant when the value of testEnum is one of LOCAL or REMOTE.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "union case port"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " is optional and it is only relevant when the value of "},
                                                        {"atParamName": {"text": "testEnum", "resolved": "vmodl.test.uber.annotations.unions.UberUnions.validateUnionParams3#testEnum"}},
                                                        {"text": " is one of "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.LOCAL", "isToMember": true, "text": "NestedTestEnum2#LOCAL"}},
                                                        {"text": " or "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.annotations.unions.UberUnions.NestedTestEnum2.REMOTE", "isToMember": true, "text": "NestedTestEnum2#REMOTE"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "UnionCase": {"tag": "test_enum", "value": ["LOCAL", "REMOTE"]}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "true if input union was in valid state",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if input union was in valid state"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.constants",
                    "documentation": "Contains tests for VMODL2 constants. \n The VMODL2 specification allows for the declaration of certain constants within an interface or class. The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 constants. "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification allows for the declaration of certain constants within an interface or class. The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "7d46b616884b3cbf24fa3575c752c7969e1f7d70",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.constants.uber_constants",
                            "documentation": "Specifies a test interface for VMODL2 constants types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 constants types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "5642e82b42dc7b65827bfcdd2b0c54959039f801",
                            "constants": [
                                {
                                    "name": "CDROM",
                                    "documentation": "string constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "string constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "String"},
                                    "value": "com.vmware.CDROM"
                                }
                                ,
                                {
                                    "name": "FLOPPY",
                                    "documentation": "string constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "string constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "String"},
                                    "value": "com.vmware.floppy"
                                }
                                ,
                                {
                                    "name": "USB",
                                    "documentation": "string constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "string constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "String"},
                                    "value": "com.vmware.USB"
                                }
                                ,
                                {
                                    "name": "REMOVABLE",
                                    "documentation": "string array constant of constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "string array constant of constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "String"},
                                    "value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]
                                }
                                ,
                                {
                                    "name": "constant_string",
                                    "documentation": "String constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "String"},
                                    "value": "val"
                                }
                                ,
                                {
                                    "name": "constant_long",
                                    "documentation": "Long constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Long constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "Long"},
                                    "value": 1000000000000
                                }
                                ,
                                {
                                    "name": "constant_boolean",
                                    "documentation": "Boolean constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Boolean constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "Boolean"},
                                    "value": true
                                }
                                ,
                                {
                                    "name": "constant_double",
                                    "documentation": "Double constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Double constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "Double"},
                                    "value": 1.5
                                }
                                ,
                                {
                                    "name": "constant_double2",
                                    "documentation": "Double constant",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Double constant"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "Double"},
                                    "value": 1.5E-9
                                }
                                ,
                                {
                                    "name": "constant_strings",
                                    "documentation": "String array constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String array constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "String"},
                                    "value": ["a", "b"]
                                }
                                ,
                                {
                                    "name": "constant_longs",
                                    "documentation": "Long array constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Long array constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "Long"},
                                    "value": [100, 200]
                                }
                                ,
                                {
                                    "name": "constant_doubles",
                                    "documentation": "Long array constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Long array constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "Double"},
                                    "value": [1.5, 2.5]
                                }
                                ,
                                {
                                    "name": "constant_booleans",
                                    "documentation": "Boolean array constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Boolean array constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "Boolean"},
                                    "value": [true, false]
                                }
                                ,
                                {
                                    "name": "constant_strings_diff_pkg",
                                    "documentation": "String array constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String array constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "String"},
                                    "value": ["com.vmware.CDROM", "vmodl.test.uber.foo"]
                                }
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.constants.uber_constants.nested_struct_with_constant",
                                    "documentation": "Class to test constants inside Structures",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Class to test constants inside Structures"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0b819a1ee175d9e33f0df95da7e3ff739fe7553b",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                        {
                                            "name": "CONSTANT_STRING",
                                            "documentation": "Struct string constant",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Struct string constant"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "Primitive", "type": "String"},
                                            "value": "Hello"
                                        }
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_field",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Error",
                                    "name": "vmodl.test.uber.constants.uber_constants.nested_error_with_constant",
                                    "documentation": "Class to test constants inside Errors",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Class to test constants inside Errors"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "ErrorType": {"value": "Exception"}
                                    },
                                    "fingerprint": "2d6eeff02de62c958bc77c7633c66cf8e14c140c",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                        {
                                            "name": "CONSTANT_STRING",
                                            "documentation": "Error string constant",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Error string constant"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "Primitive", "type": "String"},
                                            "value": "Error"
                                        }
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_field",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.docs",
                    "documentation": "Example 1: Exercising various bits of markup. \n italic \n bold \n bold with ***stars*** \n  bold with internal spaces  \n underline \n Exponential: ex (superscript) \n Water: H2O (subscript) \n Entry point for a C program: int main(int argc, char *argv[]); \n HTML tags not supported by VMODL2: <em>, <strong>, <small> \n Example 2: Simple lists. \n Grocery list: \n\n   - Apples\n   - Oranges\n   - Grapes\n  \n First three elements: \n   1. Hydrogen\n   2. Helium\n   3. Lithium\n  \n Let's start at the very beginning -- a very good place to start: \n   DO:\n    A deer, a female deer\n   RE:\n    A drop of golden sun\n   MI:\n    A name I call myself\n   FA:\n    A long long way to run\n  \n Example 3: Nested lists. \n Michael Phelps' medals in 2012: \n\n   1.  Gold \n     - 100m Butterfly\n     - 200m Individual Medley\n     - 4x200m Freestyle Relay\n     - 4x100m Medley Relay\n  \n   2.  Silver \n     - 200m Butterfly\n     -  4x100m Freestyle Relay \n       Butterfly:\n        Nathan Adrian\n       Backstroke:\n        Michael Phelps\n       Breaststroke:\n        Cullen Jones\n       Freestyle:\n        Ryan Lochte\n  \n  \n   3.  Bronze \n  \n Example 4: Tables and inline markup. \n Mappings from HTML\/Javadoc to Sphinx reST: \n[dropped table ]\n \n Meet the Mets, meet the Mets, step right up and greet the Mets: [dropped table : 1969 National League East   ]\n Contains tests for VMODL2 documentation. \n The VMODL2 specification relies on Javadoc for our means of documenting the API. However, VMODL2 constrains the markup and javadoc tags used, in order to control the abstract doc model produced, which is then transformed to concreate syntax for each target language. The examples herein are meant to drive the testing of documentation processing by language toolkits.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Example 1: Exercising various bits of markup. "},
                                    {"breakline": true},
                                    {"text": " "},
                                    {
                                        "italic": [
                                            {"text": "italic"}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " "},
                                    {
                                        "bold": [
                                            {"text": "bold"}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " "},
                                    {
                                        "bold": [
                                            {"text": "bold with ***stars***"}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " "},
                                    {
                                        "bold": [
                                            {"text": " bold with internal spaces "}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " "},
                                    {
                                        "under": [
                                            {"text": "underline"}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " Exponential: e"},
                                    {
                                        "sup": [
                                            {"text": "x"}
                                        ]
                                    }
,
                                    {"text": " (superscript) "},
                                    {"breakline": true},
                                    {"text": " Water: H"},
                                    {
                                        "sub": [
                                            {"text": "2"}
                                        ]
                                    }
,
                                    {"text": "O (subscript) "},
                                    {"breakline": true},
                                    {"text": " Entry point for a C program: "},
                                    {"atCode": "int main(int argc, char *argv[]);"},
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " HTML tags not supported by VMODL2: "},
                                    {"atLiteral": "<em>, <strong>, <small>"},
                                    {"text": " "},
                                    {
                                        "paragraph": [
                                            {"text": " Example 2: Simple lists. "},
                                            {"breakline": true},
                                            {"text": " Grocery list: "}
                                        ]
                                    }
,
                                    {
                                        "ul": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Apples"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Oranges"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Grapes"}
                                                ]
                                            }
,
                                            {"text": " "}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " First three elements: "},
                                    {
                                        "ol": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Hydrogen"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Helium"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": "Lithium"}
                                                ]
                                            }
,
                                            {"text": " "}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " Let's start at the very beginning -- a very good place to start: "},
                                    {
                                        "dl": [
                                            {"text": " "},
                                            {
                                                "dt": [
                                                    {"text": "DO"}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": "A deer, a female deer"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "dt": [
                                                    {"text": "RE"}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": "A drop of golden sun"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "dt": [
                                                    {"text": "MI"}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": "A name I call myself"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "dt": [
                                                    {"text": "FA"}
                                                ]
                                            }
,
                                            {
                                                "dd": [
                                                    {"text": "A long long way to run"}
                                                ]
                                            }
,
                                            {"text": " "}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {
                                        "paragraph": [
                                            {"text": " Example 3: Nested lists. "},
                                            {"breakline": true},
                                            {"text": " Michael Phelps' medals in 2012: "}
                                        ]
                                    }
,
                                    {
                                        "ol": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " Gold "},
                                                    {
                                                        "ul": [
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": "100m Butterfly"}
                                                                ]
                                                            }
,
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": "200m Individual Medley"}
                                                                ]
                                                            }
,
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": "4x200m Freestyle Relay"}
                                                                ]
                                                            }
,
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": "4x100m Medley Relay"}
                                                                ]
                                                            }
,
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " Silver "},
                                                    {
                                                        "ul": [
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": "200m Butterfly"}
                                                                ]
                                                            }
,
                                                            {"text": " "},
                                                            {
                                                                "li": [
                                                                    {"text": " 4x100m Freestyle Relay "},
                                                                    {
                                                                        "dl": [
                                                                            {"text": " "},
                                                                            {
                                                                                "dt": [
                                                                                    {"text": "Butterfly"}
                                                                                ]
                                                                            }
,
                                                                            {
                                                                                "dd": [
                                                                                    {"text": "Nathan Adrian"}
                                                                                ]
                                                                            }
,
                                                                            {"text": " "},
                                                                            {
                                                                                "dt": [
                                                                                    {"text": "Backstroke"}
                                                                                ]
                                                                            }
,
                                                                            {
                                                                                "dd": [
                                                                                    {"text": "Michael Phelps"}
                                                                                ]
                                                                            }
,
                                                                            {"text": " "},
                                                                            {
                                                                                "dt": [
                                                                                    {"text": "Breaststroke"}
                                                                                ]
                                                                            }
,
                                                                            {
                                                                                "dd": [
                                                                                    {"text": "Cullen Jones"}
                                                                                ]
                                                                            }
,
                                                                            {"text": " "},
                                                                            {
                                                                                "dt": [
                                                                                    {"text": "Freestyle"}
                                                                                ]
                                                                            }
,
                                                                            {
                                                                                "dd": [
                                                                                    {"text": "Ryan Lochte"}
                                                                                ]
                                                                            }
,
                                                                            {"text": " "}
                                                                        ]
                                                                    }
,
                                                                    {"text": " "}
                                                                ]
                                                            }
,
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " Bronze "}
                                                ]
                                            }
,
                                            {"text": " "}
                                        ]
                                    }
,
                                    {"text": " "},
                                    {
                                        "paragraph": [
                                            {"text": " Example 4: Tables and inline markup. "},
                                            {"breakline": true},
                                            {"text": " Mappings from HTML\/Javadoc to Sphinx reST: "}
                                        ]
                                    }
,
                                    {
                                        "table": [
                                            {"text": " "},
                                            {
                                                "tbody": [
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"atLiteral": "<b>xxx<\/b>"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "**xxx**"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"atLiteral": "<i>xxx<\/i>"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "*xxx*"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"atLiteral": "<a href=xxx>yyy<\/a>"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"atLiteral": "`yyy <xxx>`_"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"atLiteral": "&#123;@code xxx&#125;"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "``xxx``"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }

                                        ]
                                    }
,
                                    {"text": " "},
                                    {"breakline": true},
                                    {"text": " Meet the Mets, meet the Mets, step right up and greet the Mets: "},
                                    {
                                        "table": [
                                            {"text": " "},
                                            {
                                                "caption": [
                                                    {"text": "1969 National League East"}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "thead": [
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "th": [
                                                                    {"text": "Team"}
                                                                ]
                                                            }
,
                                                            {
                                                                "th": [
                                                                    {"text": "W-L"}
                                                                ]
                                                            }
,
                                                            {
                                                                "th": [
                                                                    {"text": "GB"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {"text": " "},
                                            {
                                                "tbody": [
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Mets"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "100-62"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "--"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Cubs"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "92-70"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "8"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Pirates"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "88-74"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "12"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Cardinals"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "87-75"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "13"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Phillies"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "63-99"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "37"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "},
                                                    {
                                                        "tr": [
                                                            {
                                                                "td": [
                                                                    {"text": "Expos"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "52-110"}
                                                                ]
                                                            }
,
                                                            {
                                                                "td": [
                                                                    {"text": "48"}
                                                                ]
                                                            }

                                                        ]
                                                    }
,
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {"text": " "}
                                        ]
                                    }
,
                                    {"text": " Contains tests for VMODL2 documentation. "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification relies on Javadoc for our means of documenting the API. However, VMODL2 constrains the markup and javadoc tags used, in order to control the abstract doc model produced, which is then transformed to concreate syntax for each target language. The examples herein are meant to drive the testing of documentation processing by language toolkits."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "8620b6b33a022901cedae8e9fb3ed1591af316b1",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.enumerations",
                    "documentation": "Contains tests for VMODL2 enumerations. \n The VMODL2 specification allows for the declaration of enum types. The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 enumerations. "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification allows for the declaration of "},
                                            {"atCode": "enum"},
                                            {"text": " types. The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "0e2479a3628adda986d100e6e22028cc9bbaa021",
                    "enumerations": [
                        {
                            "name": "vmodl.test.uber.enumerations.top_level_enum",
                            "documentation": "test top-level enumumeration",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "test top-level enumumeration"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "f7c1ee3f8c7c1ea293b7184196d22840cd9ff077",
                            "values": [
                                {
                                    "documentation": "const foo",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const foo"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "FOO"
                                }
                                ,
                                {
                                    "documentation": "const bar",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const bar"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "BAR"
                                }
                            ]
                        }
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.enumerations.top_level_struct",
                            "documentation": "Provides a test class that holds a VMODL2 enumeration type.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Provides a test class that holds a VMODL2 enumeration type."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "60a3ebb77c3442c1083589dfaf73c0f02fce5fca",
                            "enumerations": [
                                {
                                    "name": "vmodl.test.uber.enumerations.top_level_struct.nested_in_struct_enum",
                                    "documentation": "test nested enumumeration within a class",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test nested enumumeration within a class"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "10b841f4e700a298bcf55fc04ca09a25e929b207",
                                    "values": [
                                        {
                                            "documentation": "const foo",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "const foo"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "FOO"
                                        }
                                        ,
                                        {
                                            "documentation": "const bar",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "const bar"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "BAR"
                                        }
                                    ]
                                }
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "fubar",
                                    "documentation": "enum ref",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "enum ref"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.top_level_struct.nested_in_struct_enum"}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.enumerations.uber_enumerations",
                            "documentation": "Specifies a test interface for VMODL2 enumeration types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 enumeration types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "87253a5ad8485bfb43eab02bcec86538add6a9c7",
                            "constants": [
                            ],
                            "enumerations": [
                                {
                                    "name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum",
                                    "documentation": "test nested enumumeration within an interface",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test nested enumumeration within an interface"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e2646d38b3d109b2c682f2c39832044ab3090009",
                                    "values": [
                                        {
                                            "documentation": "const one",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "const one"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "ONE"
                                        }
                                        ,
                                        {
                                            "documentation": "const two",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "const two"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "TWO"
                                        }
                                        ,
                                        {
                                            "documentation": "const three",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "const three"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "name": "THREE"
                                        }
                                    ]
                                }
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_struct",
                                    "documentation": "Provides a test class that holds a VMODL2 enumeration type.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Provides a test class that holds a VMODL2 enumeration type."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b4b3829702e742cbbea3f8c983c94ea3d75087b6",
                                    "enumerations": [
                                        {
                                            "name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_struct.nested_in_struct_in_service_enum",
                                            "documentation": "test nested enumumeration within a class",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test nested enumumeration within a class"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "fingerprint": "1688272695705ad615f01fd4945b4317405cdb8b",
                                            "values": [
                                                {
                                                    "documentation": "const foo",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "const foo"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "FOO"
                                                }
                                                ,
                                                {
                                                    "documentation": "const bar",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "const bar"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "BAR"
                                                }
                                            ]
                                        }
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "fubar",
                                            "documentation": "enum ref",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "enum ref"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_struct.nested_in_struct_in_service_enum"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_enum",
                                    "documentation": "echo an enumeration value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an enumeration value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "74bd0f0edb002d9c76066d7b133a66ce7c32fd47",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.enumerations.UberEnumerations.echoEnum#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_enum_optional",
                                    "documentation": "echo optional enum value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional enum value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3cc4c44d5a45c3df07823998e66fa3da8536e146",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.enumerations.UberEnumerations.echoEnumOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_enum_list",
                                    "documentation": "echo List of enum",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of enum"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d7de5be209562e73b539cff1dd5e803a8e5211dc",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.enumerations.UberEnumerations.echoEnumList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.enumerations.uber_enumerations.nested_in_service_enum"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_shared_enum",
                                    "documentation": "echo an enumeration value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an enumeration value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "adc175945ac974fff4cc080db3b15441602c638e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.shared.shared_english_enum"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.enumerations.UberEnumerations.echoSharedEnum#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.shared.shared_english_enum"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.errors",
                    "documentation": "Contains tests for VMODL2 error types (aka., exceptions). \n The VMODL2 specification allows for the declaration of Exception types. The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 error types (aka., exceptions). "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification allows for the declaration of "},
                                            {"atCode": "Exception"},
                                            {"text": " types. The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "d401ae938599faffa749b4afa91d97a1ece86cd4",
                    "enumerations": [
                    ],
                    "structures": [
                        {
                            "type": "Error",
                            "name": "vmodl.test.uber.errors.uber_custom_error",
                            "documentation": "a concrete custom error type",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a concrete custom error type"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "ac2eaa57012cf7861d53a65d40fda6fee24b3688",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "messages",
                                    "documentation": "holds a list of error messages",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "holds a list of error messages"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Error",
                            "name": "vmodl.test.uber.errors.uber_error",
                            "documentation": "a base custom error type",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a base custom error type"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "ErrorType": {"value": "Exception"}
                            },
                            "fingerprint": "caae381937f34c763fd38e876e2bfbbfed3451ff",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "messages",
                                    "documentation": "holds a list of error messages",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "holds a list of error messages"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Error",
                            "name": "vmodl.test.uber.errors.uber_yet_another_error",
                            "documentation": "a concrete custom error type",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "a concrete custom error type"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "67d197dae371f2afbcc8a2a0c69c9e3f3b756da5",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "counter",
                                    "documentation": "custom field in a custom error type",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "custom field in a custom error type"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "long"}
                                }
                                ,
                                {
                                    "name": "messages",
                                    "documentation": "holds a list of error messages",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "holds a list of error messages"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.errors.uber_error_reporting",
                            "documentation": "vAPI test interface for end-to-end error reporting",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "vAPI test interface for end-to-end error reporting"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "fa3133f3ec02f65ee54744ccc0837d1ff3b8a9a4",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "test_no_error",
                                    "documentation": "Test operation that does not report an error",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that does not report an error"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b5eedc6235ef3620f976e596b05457a279ac96d0",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_filter_errors",
                                    "documentation": "Test error reporting filter - ApiProvider decorator (like Authnentication filter which reports different errors)",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test error reporting filter - ApiProvider decorator (like Authnentication filter which reports different errors)"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "02334fe4271693b9a7a11f7a2115a734d79dfdad",
                                    "params": [
                                        {
                                            "name": "error_name",
                                            "documentation": "the cannonical name of the error to be reported by the filter",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the cannonical name of the error to be reported by the filter"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_operation_specific_error",
                                    "documentation": "Test operation that reports an operation-specific error (e.g. NotFound)",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that reports an operation-specific error (e.g. NotFound)"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "62706883d0233387fef7216b5bef94435b4dfd32",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "not used",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "not used"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "unconditioanlly reports this error",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "unconditioanlly reports this error"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_operation_multiple_errors",
                                    "documentation": "Test operation that declares multiple errors and reports different ones based on input",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that declares multiple errors and reports different ones based on input"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "03cdc2d7342c9cb68b3047060c55b496f5bb5c2f",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "determines reported error (1:NotFound, 2:ResourceInUse, 3:InvalidElementType)",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "determines reported error (1:NotFound, 2:ResourceInUse, 3:InvalidElementType)"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "for 1",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "for 1"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                        ,
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.resource_in_use",
                                            "name": "resource_in_use",
                                            "documentation": "for 2",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "for 2"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.resource_in_use"}
                                        }
                                        ,
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_element_type",
                                            "name": "invalid_element_type",
                                            "documentation": "for 3",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "for 3"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_element_type"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_undeclared_error",
                                    "documentation": "Test operation that reports an error that isn't specified in the errors clause which should result in the runtime reporting an InternalServerError",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that reports an error that isn't specified in the errors clause which should result in the runtime reporting an InternalServerError"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0c5173ebf9bd87a08d9ef9d070a3924a5e298584",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_binding_specific_error",
                                    "documentation": "Test operation that throws a programming language specific error which should result in the runtime reporting an InternalServerError",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that throws a programming language specific error which should result in the runtime reporting an InternalServerError"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3d4ffc48306a90f973ebb2cf1d6f3acffccc93c3",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "test_base_error",
                                    "documentation": "Test operation that reports the base Error type",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation that reports the base Error type"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "70b227405d32c8e97687b84a9317f4b49f2d4d7d",
                                    "params": [
                                        {
                                            "name": "report_derived_error",
                                            "documentation": "if true the operation will report NotFound which clients will see as InternalServerError because NotFound is not listed in the throws clause",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if true the operation will report "},
                                                            {"atLink": {"resolved": "com.vmware.vapi.std.errors.NotFound", "isToType": true, "text": "NotFound"}},
                                                            {"text": " which clients will see as InternalServerError because "},
                                                            {"atLink": {"resolved": "com.vmware.vapi.std.errors.NotFound", "isToType": true, "text": "NotFound"}},
                                                            {"text": " is not listed in the throws clause"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.error",
                                            "name": "error",
                                            "documentation": "if input is false",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if "},
                                                            {"atCode": "input"},
                                                            {"text": " is "},
                                                            {"atCode": "false"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.error"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.errors.uber_errors",
                            "documentation": "vAPI test interface for integration tests",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "vAPI test interface for integration tests"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "ed1290947f94fdedacd85f115e4bea46f6135053",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_error",
                                    "documentation": "echo an error",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an error"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0b780314e68c44830e846f03b927a7ebcf2ad3f4",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoError#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_error_optional",
                                    "documentation": "echo an optional error",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an optional error"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e00a28b4ec2c954adb8528506ac983a2b00bd380",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoErrorOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_error_list",
                                    "documentation": "echo a list of errors",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a list of errors"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "49b96ac400d2eeda8453908bc9bd0ef423446b78",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoErrorList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_any_error",
                                    "documentation": "echo any error",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo any error"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a87e1f645b9dbf77523f34ebc435f42160690026",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "exception"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoAnyError#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "exception"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_any_error_optional",
                                    "documentation": "echo any optional error",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo any optional error"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b7904e7b0e8b8dd2fd8de1d99ededf78db4732d0",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "exception"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoAnyErrorOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "exception"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_any_error_list",
                                    "documentation": "echo any list of errors",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo any list of errors"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "4bcbb2e13884ee077b31d1e373f0982ffd9620a4",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "exception"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.errors.UberErrors.echoAnyErrorList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "exception"}}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.generics",
                    "documentation": "Contains tests for VMODL2 generic types. \n The VMODL2 specification allows for the use of certain generic types. In particular, the focus is on the collection types, including: \n\n   -  vmodl.lang.List \n  -  vmodl.lang.Set \n  -  vmodl.lang.Map \n \n The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 generic types. "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification allows for the use of certain generic types. In particular, the focus is on the collection types, including: "}
                                        ]
                                    }
,
                                    {
                                        "ul": [
                                            {"text": " "},
                                            {
                                                "li": [
                                                    {"text": " "},
                                                    {"atCode": "vmodl.lang.List"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "li": [
                                                    {"text": " "},
                                                    {"atCode": "vmodl.lang.Set"},
                                                    {"text": " "}
                                                ]
                                            }
,
                                            {
                                                "li": [
                                                    {"text": " "},
                                                    {"atCode": "vmodl.lang.Map"},
                                                    {"text": " "}
                                                ]
                                            }

                                        ]
                                    }
,
                                    {"text": " "},
                                    {
                                        "paragraph": [
                                            {"text": " The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "42519018c6bb7598d93e7c2cc1b9690544731eca",
                    "enumerations": [
                        {
                            "name": "vmodl.test.uber.generics.local_enum",
                            "documentation": "local enum",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "local enum"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "116b93808d2b4da19193a8cf4bd5a99781354c9e",
                            "values": [
                                {
                                    "documentation": "what doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "what doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "WHAT"
                                }
                                ,
                                {
                                    "documentation": "ever doc",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "ever doc"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "EVER"
                                }
                            ]
                        }
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.generics.local_complex_struct",
                            "documentation": "local complex structure",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "local complex structure"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "236eae106857c545f8591ca6377efbf2e4145f8c",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "boolean_field",
                                    "documentation": "boolean field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "boolean field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "boolean"}
                                }
                                ,
                                {
                                    "name": "double_field",
                                    "documentation": "double field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "double field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "double"}
                                }
                                ,
                                {
                                    "name": "long_field",
                                    "documentation": "long field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "long field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "long"}
                                }
                                ,
                                {
                                    "name": "string_field",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "date_time_field",
                                    "documentation": "DateTime field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "DateTime field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "date_time"}
                                }
                                ,
                                {
                                    "name": "secret_field",
                                    "documentation": "Secret field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Secret field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "secret"}
                                }
                                ,
                                {
                                    "name": "uri_field",
                                    "documentation": "URI field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "URI field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "URI"}
                                }
                                ,
                                {
                                    "name": "enum_field",
                                    "documentation": "field using enum",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using enum"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.generics.local_enum"}
                                }
                                ,
                                {
                                    "name": "list_primitive_field",
                                    "documentation": "list field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "optional_primitive_field",
                                    "documentation": "optional String field\nreason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "optional String field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "structure_field",
                                    "documentation": "field using other structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using other structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_simple_struct"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.generics.local_simple_struct",
                            "documentation": "Simple structure used to test generics.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Simple structure used to test generics."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "482b3b175811ffa2bd9f5597c8244ea9a01fcf2b",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "name",
                                    "documentation": "name property",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "name property"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.generics.local_struct_with_secret_list",
                            "documentation": "Simple structure for testing list of secrets functionality.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Simple structure for testing list of secrets functionality."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "63e3c43b5d0289e918bcf3865f8dca096dfb930f",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "secret_list",
                                    "documentation": "List of Secret field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "List of Secret field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.generics.local_struct_with_secret_map",
                            "documentation": "Simple structure for testing map of string to secrets functionality.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Simple structure for testing map of string to secrets functionality."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "e5f902b2c9e2ad153a598ca13238f8005869f3aa",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "secret_map",
                                    "documentation": "Map of String to Secret field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Map of String to Secret field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                }
                            ]
                        }
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.generics.uber_generics",
                            "documentation": "Specifies a test interface for VMODL2 generic types. \n This interface defines more complex usages, where combinations of generic types are used and the generic types are nested within structures, etc. \n\n The simple usages are separated and covered by the other files in this package, which can be classifed as follows: \n\n   UberPrimitiveLists :\n     covers lists of all the primitive types \n  UberPrimitiveMaps :\n     covers maps of all the primitive types \n  UberPrimitiveSets :\n     covers sets of all the primitive types \n  UberStructureLists :\n     covers lists of various structure types \n  UberStructureMaps :\n     covers maps of various structure types \n",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 generic types. "},
                                            {
                                                "paragraph": [
                                                    {"text": " This interface defines more complex usages, where combinations of generic types are used and the generic types are nested within structures, etc. "}
                                                ]
                                            }
,
                                            {
                                                "paragraph": [
                                                    {"text": " The simple usages are separated and covered by the other files in this package, which can be classifed as follows: "}
                                                ]
                                            }
,
                                            {
                                                "dl": [
                                                    {"text": " "},
                                                    {
                                                        "dt": [
                                                            {"atLink": {"resolved": "vmodl.test.uber.generics.UberPrimitiveLists", "isToType": true, "text": "UberPrimitiveLists"}},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dd": [
                                                            {"text": " covers lists of all the primitive types "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dt": [
                                                            {"atLink": {"resolved": "vmodl.test.uber.generics.UberPrimitiveMaps", "isToType": true, "text": "UberPrimitiveMaps"}},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dd": [
                                                            {"text": " covers maps of all the primitive types "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dt": [
                                                            {"atLink": {"resolved": "vmodl.test.uber.generics.UberPrimitiveSets", "isToType": true, "text": "UberPrimitiveSets"}},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dd": [
                                                            {"text": " covers sets of all the primitive types "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dt": [
                                                            {"atLink": {"resolved": "vmodl.test.uber.generics.UberStructureLists", "isToType": true, "text": "UberStructureLists"}},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dd": [
                                                            {"text": " covers lists of various structure types "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dt": [
                                                            {"atLink": {"resolved": "vmodl.test.uber.generics.UberStructureMaps", "isToType": true, "text": "UberStructureMaps"}},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "dd": [
                                                            {"text": " covers maps of various structure types "}
                                                        ]
                                                    }

                                                ]
                                            }

                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "6b3f0c21ae68f2840c7130c7e68c325c57117fda",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct",
                                    "documentation": "Test structure with map and set field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test structure with map and set field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a6ac11e9e8cbdf5cb909b966542da9b7800d3270",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "set_field",
                                            "documentation": "Set field used for testing.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Set field used for testing."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "set_field_with_id",
                                            "documentation": "Set field used for testing.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: test_resource_id. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: test_resource_id.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Set field used for testing."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must contain identifiers for the resource type: "},
                                                        {"atCode": "test_resource_id"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will contain identifiers for the resource type: "},
                                                        {"atCode": "test_resource_id"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "test_resource_id"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "set_field_with_long",
                                            "documentation": "Set field used for testing.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Set field used for testing."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                        ,
                                        {
                                            "name": "map_field_with_string",
                                            "documentation": "Map field used for testing.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map field used for testing."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "map_field_with_id",
                                            "documentation": "Map field used for testing.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vmodl.test.uber.foo. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map field used for testing."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "map_field_with_long",
                                            "documentation": "Map field used for testing.\nWhen clients pass a value of this structure as a parameter, the value in the field map must be an identifier for the resource type: test_resource_long_id. When operations return a value of this structure as a result, the value in the field map will be an identifier for the resource type: test_resource_long_id.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map field used for testing."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "test_resource_long_id"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "test_resource_long_id"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "test_resource_long_id"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.generics.uber_generics.map_test_struct",
                                    "documentation": "Test structure with only map field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test structure with only map field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1958e3b151abb1902b83eb9e040bbcc09b14817b",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "map_field",
                                            "documentation": "Map field used for testing.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map field used for testing."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_nested_combo_struct_list",
                                    "documentation": "Test for complex list as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex list as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "aa3db89307c5206c449910b938feec930b425212",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberGenerics.echoNestedComboStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_nested_combo_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ec4342201326f68159759e1c15c85faeb0bc0072",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberGenerics.echoIdToNestedComboStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_generics.nested_combo_struct"}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.generics.uber_primitive_lists",
                            "documentation": "Specifies a test interface for VMODL2 List<T> types, where the item (T) is a primitive type.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 "},
                                            {"atLiteral": "List<T>"},
                                            {"text": " types, where the item ("},
                                            {"atCode": "T"},
                                            {"text": ") is a primitive type."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "9266651fe604b31c3d8e11828aed7f89d4efe8bf",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_boolean_list",
                                    "documentation": "echo List of Boolean",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of Boolean"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "90ed5559e52161c8e055e5e5151c385abde644ca",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoBooleanList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_double_list",
                                    "documentation": "echo List of Double",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of Double"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fe6748bdfd9e081bd1e16acebb4714e27e2ad06c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "double"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoDoubleList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "double"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_list",
                                    "documentation": "echo List of Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b297e60915c490aa2a630f8bcb67fa36272f1938",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoLongList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_list",
                                    "documentation": "echo List of String",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of String"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "86b6a3325f1cf31e9d00129bb9f2e717b58ab02b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoStringList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_binary_list",
                                    "documentation": "echo List of Binary",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of Binary"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f92b9c35cf2fd6ca6417aa6aad974294feb9aac0",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "binary"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoBinaryList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "binary"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_date_time_list",
                                    "documentation": "echo List of DateTime",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of DateTime"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f40af2441b476afa2b3d73895c91cf152ae918b1",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoDateTimeList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_list",
                                    "documentation": "echo List of ID",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of ID"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "15a26ae4097d7d008539a9c142a6c3a6f7781020",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nThe parameter must contain identifiers for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain identifiers for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe result will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoIdList#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will contain identifiers for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_secret_list",
                                    "documentation": "echo List of Secret",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of Secret"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a7d3e6572dd8e471b28388666b6fe312f2200ad8",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoSecretList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_uri_list",
                                    "documentation": "echo List of URI",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of URI"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "885590af76d4374db23d6194b560c5d411e89c9c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoUriList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_optional_list",
                                    "documentation": "echo optional List of Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional List of Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5b5688d80aaae3fcecd223ff0e18e1d41bf97709",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoLongOptionalList#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_list_optional",
                                    "documentation": "echo List of optional Long values",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of optional Long values"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a9faf713863625d3606b9b7b4f734c5a2b75fd4b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoLongListOptional#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_list_list",
                                    "documentation": "echo List of List of Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of List of Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9308f4857f6521a8cd03e0ee1583589a9094d0af",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoLongListList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_list_optional",
                                    "documentation": "echo List of optional String values",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of optional String values"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9dfc375a1487de943bf241625d7ad4468d930783",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoStringListOptional#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_list_optional_list",
                                    "documentation": "echo List of optional List of Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of optional List of Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1bbd68b61df2abba2b92ad519c61a7d78490525c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveLists.echoLongListOptionalList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.generics.uber_primitive_maps",
                            "documentation": "Specifies a test interface for VMODL2 Map<K,V> types, where the value (V) is any primitive type. \n The key (K) MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: \n\n   -  String \n  -  Long \n  -  ID \n",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 "},
                                            {"atLiteral": "Map<K,V>"},
                                            {"text": " types, where the value ("},
                                            {"atCode": "V"},
                                            {"text": ") is any primitive type. "},
                                            {
                                                "paragraph": [
                                                    {"text": " The key ("},
                                                    {"atCode": "K"},
                                                    {"text": ") MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: "}
                                                ]
                                            }
,
                                            {
                                                "ul": [
                                                    {"text": " "},
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "String"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "Long"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "ID"},
                                                            {"text": " "}
                                                        ]
                                                    }

                                                ]
                                            }

                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "985e0e79338d6e6ae16fdc86f4f9e3a3e76ea70f",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_string_to_boolean_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b98229fcb8148d87f7ca848d0a9cb14f884a2f93",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToBooleanMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_double_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7befd822cabfba439e9d1a0531be2a7b9237e121",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToDoubleMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_long_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "760b03237bdeb151f7a0bcb9a5b9413b0fa6805d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToLongMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_string_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7c2a957b3b4ca33a0a3140a185f7b1b8d6be8af9",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToStringMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_binary_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "744adebd54622a4bf2b5baaa5605f70424dbffab",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToBinaryMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_date_time_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "84a9eb815a290f3a7205c1e41206934cf589212d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToDateTimeMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_id_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3cf28c8c757b5e55ab31f453a68fee1b2037c9d2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe value in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe value in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToIdMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The value in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_secret_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d4b1765bfc97a84c0391cac5e1b89f9736d1d6cf",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToSecretMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_uri_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "00e4023cb5f62885f94a967dbd4a77b2cadc1cd8",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoStringToUriMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_boolean_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5b994d42cdd6ff9aadc31c19723443559294d751",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToBooleanMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_double_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "44f4d05d3fe49a8c41f1991e8913fd6ae920631d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToDoubleMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_long_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7df4ab6e028ee4781ae8906f85f0a6505bc931ac",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToLongMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_string_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9513c1a22474194ae005aa856a88c3848e3b2ff9",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToStringMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_binary_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "886d2720681b0244dd892d8575430d78e760f526",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToBinaryMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_date_time_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "93268d4e81e8d27d06b0fe7742668c3de9ece9e0",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToDateTimeMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_id_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "eccd242e3f41e13b46feb98e6c6c65bca39e7c11",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe value in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe value in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToIdMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The value in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_secret_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ba15e01ee6c7040d923ab5553ab0e81cc528c94d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToSecretMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_uri_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "54150003055ef50b9e429e93da1643391536941d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoLongToUriMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_boolean_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a845ac1b873e3685d1a76578dafda61a6e2ef330",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToBooleanMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "boolean"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_double_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "05e8830c804837f9c0c15dd6223074d5e9ae8260",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToDoubleMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "double"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_long_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "6370e6be7bd1ffb66095a8fc3361c176c2d0e7b2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToLongMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_string_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c73d07aa05d90c8d0365b3cc02cb9bf05e3ec882",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToStringMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_binary_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "6354df7e2c97abcb3d8095692ac4109cc982cdfd",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToBinaryMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "binary"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_date_time_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5f2c4d78b4150d0759599688073b584eb534d4d7",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToDateTimeMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "date_time"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_id_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "8e7470ac3d746c514b597d0d877a20fbe70f3637",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key and value in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key and value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key and value in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToIdMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key and value in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_secret_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "82cfc043c653b3582c2e662d1ab025e58ed45cdc",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToSecretMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "secret"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_uri_map",
                                    "documentation": "Test for simple map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a91a8f43d85674ea5921ce06dbd225a6116bbd93",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveMaps.echoIdToUriMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "URI"}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.generics.uber_primitive_sets",
                            "documentation": "Specifies a test interface for VMODL2 Set<T> types. \n The type (T) MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: \n\n   -  String \n  -  Long \n  -  ID \n",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 "},
                                            {"atLiteral": "Set<T>"},
                                            {"text": " types. "},
                                            {
                                                "paragraph": [
                                                    {"text": " The type ("},
                                                    {"atCode": "T"},
                                                    {"text": ") MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: "}
                                                ]
                                            }
,
                                            {
                                                "ul": [
                                                    {"text": " "},
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "String"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "Long"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "ID"},
                                                            {"text": " "}
                                                        ]
                                                    }

                                                ]
                                            }

                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "7edeec328dd263f53c299d6b9f8f8e169234e2b4",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_string_set",
                                    "documentation": "Test for simple set as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple set as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fc5d72419d959282b9193f5207283209a5a1a636",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoStringSet#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_set",
                                    "documentation": "Test for simple set as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple set as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bcb4e3d9751677a73da7ce5f998c8eec122dad0e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoLongSet#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_set",
                                    "documentation": "Test for simple set as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for simple set as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5f9efd417808c11efffe6278af597350036aa5e2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe parameter must contain identifiers for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain identifiers for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe result will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoIdSet#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will contain identifiers for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_optional_set",
                                    "documentation": "echo optional Set of String",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Set of String"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "95bb916e9bdb7194b26f597a6f3b76fbd70a0526",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "string"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoStringOptionalSet#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "string"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_optional_set",
                                    "documentation": "echo optional Set of Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Set of Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ff23dc719e1db000b5df235f500ea0e428584f4d",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoLongOptionalSet#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_optional_set",
                                    "documentation": "echo optional Set of ID",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Set of ID"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1e7fc062ec56fc945350f8d5b5d19e36fec1e56b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason\nThe parameter must contain identifiers for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain identifiers for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason\nThe result will contain identifiers for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberPrimitiveSets.echoIdOptionalSet#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will contain identifiers for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "generic", "generic_type": "Set", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.generics.uber_structure_lists",
                            "documentation": "Specifies a test interface for VMODL2 List<T> types, where the item (T) is a structure type.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 "},
                                            {"atLiteral": "List<T>"},
                                            {"text": " types, where the item ("},
                                            {"atCode": "T"},
                                            {"text": ") is a structure type."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "3bcdccd7d59430675c04f2560eb46f8fc532d1ef",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.generics.uber_structure_lists.nested_simple_struct",
                                    "documentation": "Nested simple structure used to test generics.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested simple structure used to test generics."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7141261ec1ae59e6cdd8cd81c02f4b9c300d4181",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name property",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name property"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_shared_empty_struct_list",
                                    "documentation": "echo List of SharedEmptyStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of SharedEmptyStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7b0ef289128afddefe578e5b68e8515ccaff6af2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_empty_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoSharedEmptyStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_empty_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_shared_simple_struct_list",
                                    "documentation": "echo List of SharedSimpleStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of SharedSimpleStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d85cd2fed28aa0401c84aa7f02983e7e25b4aed6",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoSharedSimpleStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_shared_complex_struct_list",
                                    "documentation": "echo List of SharedComplexStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of SharedComplexStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bc85e3f712985658ce5757b40a3fd5d879b0c637",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_complex_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoSharedComplexStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_complex_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_local_simple_struct_list",
                                    "documentation": "echo List of LocalSimpleStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of LocalSimpleStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "280b8d7bfe912a88603df6fef79f48b6603071ee",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoLocalSimpleStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_simple_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_local_complex_struct_list",
                                    "documentation": "echo List of LocalComplexStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of LocalComplexStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7a891b7983f003a6a01f5707e4f2a8b8646ae48a",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_complex_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoLocalComplexStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_complex_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_nested_simple_struct_list",
                                    "documentation": "echo List of NestedSimpleStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo List of NestedSimpleStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9708d4a168f40690c0e4e30308084c4a37aac09c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_structure_lists.nested_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureLists.echoNestedSimpleStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_structure_lists.nested_simple_struct"}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.generics.uber_structure_maps",
                            "documentation": "Specifies a test interface for VMODL2 Map<K,V> types, where the value (V) is a structure type. \n The key (K) MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: \n\n   -  String \n  -  Long \n  -  ID \n",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 "},
                                            {"atLiteral": "Map<K,V>"},
                                            {"text": " types, where the value ("},
                                            {"atCode": "V"},
                                            {"text": ") is a structure type. "},
                                            {
                                                "paragraph": [
                                                    {"text": " The key ("},
                                                    {"atCode": "K"},
                                                    {"text": ") MUST be a primitive type for equals\/hash reasons, as constrained by the VMODL2 spec. The VMODL2 spec further constrains the primitive type to one of the following: "}
                                                ]
                                            }
,
                                            {
                                                "ul": [
                                                    {"text": " "},
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "String"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "Long"},
                                                            {"text": " "}
                                                        ]
                                                    }
,
                                                    {
                                                        "li": [
                                                            {"text": " "},
                                                            {"atCode": "ID"},
                                                            {"text": " "}
                                                        ]
                                                    }

                                                ]
                                            }

                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "64bdcb5e09be8f3708ca033994b7983205c63942",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.generics.uber_structure_maps.nested_simple_struct",
                                    "documentation": "Nested simple structure used to test generics.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested simple structure used to test generics."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "04bcf8375871036c3a94d0a8059f6eb5ca22def0",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name property",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name property"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_string_to_shared_empty_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "372ac15fc90573e8b0226709fde446ba5ce9569b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_empty_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoStringToSharedEmptyStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_empty_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_shared_simple_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a760be09b6cdc7f1fd8027fd34bca7a6ce19ecdc",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoStringToSharedSimpleStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_to_shared_complex_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5bad8c5174f20c2129e030fc8b6e7c5f1be5b80e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_complex_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoStringToSharedComplexStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_complex_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_local_simple_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5a304c0df84ac6e7345594d2a0e6be88645c438e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoLongToLocalSimpleStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_simple_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_to_local_complex_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7fb4935563162757d4f9e2b9baedc9bbc9d7594a",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_complex_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoLongToLocalComplexStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "long"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.local_complex_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_to_nested_simple_struct_map",
                                    "documentation": "Test for complex map as argument and as return value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test for complex map as argument and as return value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b853560fe189f9d9c642fcd7fc552bb3aa86ab30",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.foo.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.foo"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.foo"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_structure_maps.nested_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe key in the result map will be an identifier for the resource type: vmodl.test.uber.foo.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.generics.UberStructureMaps.echoIdToNestedSimpleStructMap#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The key in the "},
                                                    {"atTerm": "result"},
                                                    {"text": " "},
                                                    {"atTerm": "map"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber.foo"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber.foo"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.generics.uber_structure_maps.nested_simple_struct"}}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.names",
                    "documentation": "Contains tests for VMODL2 names (or identifiers). \n The VMODL2 specification is based on Java syntax, so we rely on Java naming conventions for our type and member names. However, a VMODL2 model is only a metamodel and it is always transformed into a more concrete form, such as a language binding. Each target language has its own naming convention, which is often not the same as Java\/VMODL2. Therefore, every target language needs to be prepared to translate names to their naming convention and, further, to be ready to handle possible conflicts that might happen with their language keywords. \n\n The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 names (or identifiers). "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification is based on Java syntax, so we rely on Java naming conventions for our type and member names. However, a VMODL2 model is only a metamodel and it is always transformed into a more concrete form, such as a language binding. Each target language has its own naming convention, which is often not the same as Java\/VMODL2. Therefore, every target language needs to be prepared to translate names to their naming convention and, further, to be ready to handle possible conflicts that might happen with their language keywords. "}
                                        ]
                                    }
,
                                    {
                                        "paragraph": [
                                            {"text": " The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "0f95768eca26ad19c7bdb336090c0619a25fc186",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.names.uber_python_keywords",
                            "documentation": "Service that has names which clash with python keywords.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Service that has names which clash with python keywords."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "db5a0b383e9db992bec095c19f4dde8f55b29dff",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.names.uber_python_keywords.struct",
                                    "documentation": "Structure that has names which clash with python keywords",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Structure that has names which clash with python keywords"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7c7c138d7fc605ef74a6b9de0c36349449018813",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "from",
                                            "documentation": "from",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "from"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.names.uber_python_keywords.pass",
                                    "documentation": "Structure that has names which clash with python keywords",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Structure that has names which clash with python keywords"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "cc8e64684657e46fb3a34105a8e919a5e8eae442",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "struct",
                                            "documentation": "struct",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "struct"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.names.uber_python_keywords.struct"}
                                        }
                                        ,
                                        {
                                            "name": "struct1",
                                            "documentation": "struct1\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "struct1"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.names.uber_python_keywords.struct"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "lambda",
                                    "documentation": "Method name and parameters clash with python keyword",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Method name and parameters clash with python keyword"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "262cf223c91de563f4044b62a4da4d92286da398",
                                    "params": [
                                        {
                                            "name": "yield",
                                            "documentation": "doc",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "from",
                                            "documentation": "doc",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "struct",
                                            "documentation": "doc",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.names.uber_python_keywords.struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "doc",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "doc"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.names.uber_python_keywords.pass"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.primitives",
                    "documentation": "Contains tests for VMODL2 primitives. \n The VMODL2 specification defines a set of primitive (or built-in) types. \n\n The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 primitives. "},
                                    {
                                        "paragraph": [
                                            {"text": " The VMODL2 specification defines a set of primitive (or built-in) types. "}
                                        ]
                                    }
,
                                    {
                                        "paragraph": [
                                            {"text": " The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "e48c995fc6a93697799f1d6c97e4cb8331828a01",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.primitives.uber_primitives",
                            "documentation": "Specifies a test interface for all VMODL2 primitive types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for all VMODL2 primitive types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "611bc7a515839b8e3e743bcdf51e3f7cd77b5d71",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_nothing",
                                    "documentation": "void operation",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "void operation"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "67826d6f0a8ae714fe052f1a1771f1d1664e7dd8",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_boolean",
                                    "documentation": "echo a Boolean value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a Boolean value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d3990a096f4711227286532265d149b63053a0f0",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoBoolean#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_double",
                                    "documentation": "echo a Double value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a Double value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "de6eae0c07b47dba5532caf034da50a74e60fe26",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "double"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoDouble#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "double"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long",
                                    "documentation": "echo a Long value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a Long value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "ea41b4c24fcea41a327a9f59e5145023cb3ea173",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoLong#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "long"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string",
                                    "documentation": "echo a String value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a String value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "cd825fab7264d1e826d65ba3a3dc85a63597b7b2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoString#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "string"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_binary",
                                    "documentation": "echo a Binary value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a Binary value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5873867888db777b96d0048bdee6947a657511b1",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "binary"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoBinary#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "binary"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_date_time",
                                    "documentation": "echo a DateTime value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a DateTime value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "233ac03f1eff05c6b21e884876f136ca7499e247",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "date_time"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoDateTime#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "date_time"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id",
                                    "documentation": "echo an ID value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an ID value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "147853e6189461bfb53e3ff1346d4c6e95bb4174",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nThe parameter must be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nThe result will be an identifier for the resource type: vmodl.test.uber.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoId#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber"}
                                        },
                                        "type": {"category": "primitive", "primitive_type": "ID"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_opaque",
                                    "documentation": "echo an Opaque value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an Opaque value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "27d669bdaaf05005984d040b22317d19ffd299fd",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "opaque"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoOpaque#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "opaque"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_secret",
                                    "documentation": "echo a Secret value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo a Secret value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d7b6c2485c10f7e00475b7510ac5614fc737937b",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "secret"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoSecret#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "secret"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_uri",
                                    "documentation": "echo an URI value",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo an URI value"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "2be4d5fbdc9321e98494a3c8a27180aa93ae99ad",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "URI"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoUri#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "URI"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_boolean_optional",
                                    "documentation": "echo optional Boolean",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Boolean"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "17e74b352e1e3c342e926fc90869e7a2fa16ae1a",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoBooleanOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_double_optional",
                                    "documentation": "echo optional Double",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Double"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "2aa43d93a01553c2477489445b95a5bbef5b1845",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "double"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoDoubleOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "double"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_long_optional",
                                    "documentation": "echo optional Long",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Long"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "efd4853a67990019b279debdb19654c7a3f6f65a",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoLongOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_string_optional",
                                    "documentation": "echo optional String",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional String"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9e299d967c16499ba15bf48e1899e36c87b5ade7",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoStringOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_binary_optional",
                                    "documentation": "echo optional Binary",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Binary"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0303d10d889dd7e3d96a7a20e6812664b2a6e589",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "binary"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoBinaryOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "binary"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_date_time_optional",
                                    "documentation": "echo optional DateTime",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional DateTime"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "21ec792d1564564d3e2dfdb0dbe6c6faf951e23c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoDateTimeOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "date_time"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_id_optional",
                                    "documentation": "echo optional ID",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional ID"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fa21eeba8aac1cfd2c9d4c6ec6ef26cf473625e9",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason\nThe parameter must be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason\nThe result will be an identifier for the resource type: vmodl.test.uber.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoIdOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "vmodl.test.uber"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "vmodl.test.uber"}
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_secret_optional",
                                    "documentation": "echo optional Secret",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional Secret"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "42691461bbff87fb8171304dd20a2da2eea59404",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoSecretOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "secret"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_uri_optional",
                                    "documentation": "echo optional URI",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional URI"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "926b67189d847a52f5b1e38fa31e613c54a9bc6e",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.primitives.UberPrimitives.echoUriOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "URI"}}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.privileges",
                    "documentation": "",
                    "docModels": {
                    },
                    "metadata": {
                    },
                    "fingerprint": "5a1fcabdb6ed26aff43dc032aebd6ec19df2fff3",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.privileges.uber_privileges",
                            "documentation": "Sample test service for testing automatic generation of privilege documentation.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Sample test service for testing automatic generation of privilege documentation."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "586726047c69c3f0e88088566f5236a84dd79249",
                            "constants": [
                                {
                                    "name": "REMOVABLE",
                                    "documentation": "Resource type constants.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Resource type constants."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "List", "type": "String"},
                                    "value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]
                                }
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.get_spec",
                                    "documentation": "Get spec.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Get spec."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "78f2aa3b8ab7fa7a3b7ac7605f3dee706d4ddcd4",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "Primary key of the resource.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber.privilege. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Primary key of the resource."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "foreign_id",
                                            "documentation": "foreign id.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vapi.foreign. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vapi.foreign.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "foreign id."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.foreign"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.foreign"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.foreign"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.map_spec",
                                    "documentation": "Spec with Map field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Spec with Map field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "128def5f370d6c841241c0500730c0ae30a8190d",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "map_field",
                                            "documentation": "Map of IDs to get privileges assigned on.\nWhen clients pass a value of this structure as a parameter, the key and value in the field map must be an identifier for the resource type: vmodl.test.uber.privilege. When operations return a value of this structure as a result, the key and value in the field map will be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Map of IDs to get privileges assigned on."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the key and value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the key and value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.nested_spec",
                                    "documentation": "Nested spec.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested spec."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "15b322a42e3b09e0a5a9e349097beb8a4512d30d",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "get_spec",
                                            "documentation": "Get spec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Get spec."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.get_spec"}
                                        }
                                        ,
                                        {
                                            "name": "map_spec",
                                            "documentation": "Get spec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Get spec."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.map_spec"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.nested_map_spec",
                                    "documentation": "Nested map spec.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested map spec."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9953d7a959130f64a1a37730dfe463f0352ce2cf",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "get_spec",
                                            "documentation": "Get spec.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vmodl.test.uber.privilege and the value in the field map must contain all the attributes defined in UberPrivileges.GetSpec. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vmodl.test.uber.privilege and the value in the field map will contain all the attributes defined in UberPrivileges.GetSpec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Get spec."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": " and the value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec", "isToType": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec"}},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the key in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": " and the value in the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " will contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec", "isToType": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.privileges.uber_privileges.get_spec"},
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.nested_polymorphic_id_spec",
                                    "documentation": "Nested polymorphic id spec.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested polymorphic id spec."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b708caccb83c6b1b124a815c0d3db348c3f8c61f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "device_type",
                                            "documentation": "Device Type.\nWhen clients pass a value of this structure as a parameter, the field must be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be one of com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Device Type."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be one of "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "IsOneOf": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"]}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "device_id",
                                            "documentation": "device ID.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB. When operations return a value of this structure as a result, the field will be an identifier for one of these resource types: com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "device ID."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for one of these resource types: "},
                                                        {"atCode": "com.vmware.CDROM"},
                                                        {"text": ", "},
                                                        {"atCode": "com.vmware.floppy"},
                                                        {"text": ", or "},
                                                        {"atCode": "com.vmware.USB"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": ["com.vmware.CDROM", "com.vmware.floppy", "com.vmware.USB"], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.privileges.uber_privileges.nested_dynamic_id_spec",
                                    "documentation": "Nested dynamic id spec.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested dynamic id spec."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9b76e219e79691bcd812794bc0d59305b2da10a1",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "device_type",
                                            "documentation": "Device Type.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Device Type."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "device_id",
                                            "documentation": "Device ID.\nWhen clients pass a value of this structure as a parameter, the field UberPrivileges.NestedDynamicIdSpec.device-type must contain the actual resource type. When operations return a value of this structure as a result, the field UberPrivileges.NestedDynamicIdSpec.device-type will contain the actual resource type.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Device ID."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atName": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.NestedDynamicIdSpec.deviceType", "isToMember": true, "text": "#deviceType", "tag": "name"}},
                                                        {"text": " must contain the actual resource type. When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " "},
                                                        {"atName": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.NestedDynamicIdSpec.deviceType", "isToMember": true, "text": "#deviceType", "tag": "name"}},
                                                        {"text": " will contain the actual resource type."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": [], "typeHolder": "device_type"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "simple_operation",
                                    "documentation": "Operation to verify privilege documentation for operations without ID parameters.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires vapi.operation. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations without ID parameters."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "vapi.operation"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d44b48d240a6c79884d7666c2ec5d6eec3ea601d",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_id_parameter",
                                    "documentation": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the parameter id requires vapi.id.parameter. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithIdParameter#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.parameter"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d25acf0fd8fcccd0e9f329a1eec45ab58a729e9e",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found or foreignId is not found.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found or foreignId is not found."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_id_parameter2",
                                    "documentation": "Operation to verify privilege documentation for operations with a single ID parameter that has default privilege.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the parameter id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a single ID parameter that has default privilege."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithIdParameter2#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "26eaa5af1252aa250b5bf0ca29df3020dca4ecf7",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found or foreignId is not found.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found or foreignId is not found."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_id_parameters",
                                    "documentation": "Operation to verify privilege documentation for operations with a ID parameters that has defined and default privileges.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource com.vmware.vapi.foreign referenced by the parameter foreignId requires vapi.id.foreign.parameter. \n  -  The resource vmodl.test.uber.privilege referenced by the parameter id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a ID parameters that has defined and default privileges."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "foreignId", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithIdParameters#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.foreign.parameter"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithIdParameters#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d10dac0bfd850b61d305f792de19f30ada814415",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "foreign_id",
                                            "documentation": "another ID\nThe parameter must be an identifier for the resource type: com.vmware.vapi.foreign.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "another ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.foreign"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.foreign"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found or foreignId is not found.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found or foreignId is not found."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_map_parameters1",
                                    "documentation": "Operation to verify privilege documentation for operations with a map parameter whose key is ID.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of parameter idMap requires vapi.id.map.key. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a map parameter whose key is ID."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters1#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.map.key"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9297fc79729af2e22bfadffd66f149eef5835354",
                                    "params": [
                                        {
                                            "name": "id_map",
                                            "documentation": "a map whose key in an ID\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a map whose key in an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_map_parameters2",
                                    "documentation": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of parameter idMap requires vapi.id.map.value. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a map parameter whose value is ID."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters2#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.map.value"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bc255be2fea22205b2b99f3224a4170e166a7c7a",
                                    "params": [
                                        {
                                            "name": "id_map",
                                            "documentation": "a map whose value in an ID\nThe value in the parameter map must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a map whose value in an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_map_parameters3",
                                    "documentation": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of parameter idMap requires vapi.id.map.key. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of parameter idMap requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a map parameter whose value is ID."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters3#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.map.key"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters3#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "7b33aa6639a9423f8b116ccbe3a94bb879bb8fdd",
                                    "params": [
                                        {
                                            "name": "id_map",
                                            "documentation": "a map whose key and value in an ID\nThe key and value in the parameter map must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a map whose key and value in an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key and value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_map_parameters4",
                                    "documentation": "Operation to verify privilege documentation for operations with a map parameter whose value is ID.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of parameter idMap requires vapi.id.map.key. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of parameter idMap requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a map parameter whose value is ID."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters4#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.map.key"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "idMap", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithMapParameters4#idMap"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "70cee907da5576ad9a50272b52e85976b8524f44",
                                    "params": [
                                        {
                                            "name": "id_map",
                                            "documentation": "a map whose key and value in an ID\nThe key and value in the parameter map must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a map whose key and value in an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key and value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_struct_parameter1",
                                    "documentation": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires vapi.id.field. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.field"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d61b298f1bde2a8c1753fe9d81db5e1ab0980e1d",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is the get specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is the get specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.get_spec"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_struct_parameter2",
                                    "documentation": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires vapi.id.foreign.field. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.foreign.field"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "acc9d4fb57467a9c649bfea94f0df802599f50ee",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is the get specification\nThe parameter must contain all the attributes defined in UberPrivileges.GetSpec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is the get specification"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec", "isToType": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.privileges.uber_privileges.get_spec"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_struct_parameter3",
                                    "documentation": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires System.Read. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "81eac675e56ece5a616e88dc4f41079a3212093a",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is the get specification\nto demo this variation of the test case\nThe parameter must contain all the attributes defined in UberPrivileges.GetSpec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is the get specification"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "to demo this variation of the test case"}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec", "isToType": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.privileges.uber_privileges.get_spec"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_struct_parameter4",
                                    "documentation": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of parameter spec requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires System.Read. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "spec", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationWithStructParameter4#spec"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bb25dcea360a0ec2081b94132b94beaa9b7c7eeb",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is the get specification\nThe key in the parameter map must be an identifier for the resource type: vmodl.test.uber.privilege. The value in the parameter map must contain all the attributes defined in UberPrivileges.GetSpec.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is the get specification"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The key in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": ". The value in the "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " "},
                                                        {"atTerm": "map"},
                                                        {"text": " must contain all the "},
                                                        {"atTerm": "attributes"},
                                                        {"text": " defined in "},
                                                        {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec", "isToType": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec"}},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "HasFieldsOf": {"value": "vmodl.test.uber.privileges.uber_privileges.get_spec"},
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "ID"}, "map_value_type": {"category": "primitive", "primitive_type": "dynamic_structure"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_struct_parameter5",
                                    "documentation": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields in map.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of attribute UberPrivileges.MapSpec.map-field requires vapi.id.map.key.field. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of attribute UberPrivileges.MapSpec.map-field requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a structure parameter which has ID fields in map."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.map.key.field"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f6a8990120591511de70f17fba565abcdda64d2e",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is a specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is a specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.map_spec"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_mix",
                                    "documentation": "Operation with a mix of IDL constructs.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the parameter id requires vapi.id.parameter. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires vapi.id.field. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of attribute UberPrivileges.MapSpec.map-field requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of attribute UberPrivileges.MapSpec.map-field requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation with a mix of IDL constructs."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationMix#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.parameter"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.field"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "405a41c5fa6cad9d00bb974ab12a38d8e5249c1d",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "is an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "nested_spec",
                                            "documentation": "is a specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is a specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.nested_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_mix2",
                                    "documentation": "Operation with a mix of IDL constructs.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the parameter id requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the attribute UberPrivileges.GetSpec.id requires System.Read. \n  -  The resource com.vmware.vapi.foreign referenced by the attribute UberPrivileges.GetSpec.foreign-id requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map key of attribute UberPrivileges.MapSpec.map-field requires System.Read. \n  -  The resource vmodl.test.uber.privilege referenced by the map value of attribute UberPrivileges.MapSpec.map-field requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation with a mix of IDL constructs."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges.UberPrivileges.operationMix2#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.id", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.vapi.foreign"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.GetSpec.foreignId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.GetSpec#foreignId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " key of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "map"},
                                                                {"text": " value of "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.MapSpec.mapField", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.MapSpec#mapField"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b75d3d24d63c03b873b0ab913a670a4ea0410575",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "is an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "nested_map_spec",
                                            "documentation": "is a specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is a specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.nested_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_mix3",
                                    "documentation": "Operation with a mix of IDL constructs.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The resource com.vmware.CDROM, com.vmware.floppy, or com.vmware.USB referenced by the attribute UberPrivileges.NestedPolymorphicIdSpec.device-id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation with a mix of IDL constructs."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "com.vmware.CDROM"},
                                                                {"text": ", "},
                                                                {"atCode": "com.vmware.floppy"},
                                                                {"text": ", or "},
                                                                {"atCode": "com.vmware.USB"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.NestedPolymorphicIdSpec.deviceId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.NestedPolymorphicIdSpec#deviceId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1ecc172ff982c30eeff214a62d8c814d18f63607",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is a specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is a specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.nested_polymorphic_id_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "for some reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "for some reason"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_mix4",
                                    "documentation": "Operation with a mix of IDL constructs.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires System.Read. \n  -  The attribute UberPrivileges.NestedDynamicIdSpec.device-id requires System.Read. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation with a mix of IDL constructs."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }
,
                                                        {
                                                            "li": [
                                                                {"text": " The "},
                                                                {"atTerm": "attribute"},
                                                                {"text": " "},
                                                                {"atLink": {"resolved": "vmodl.test.uber.privileges.UberPrivileges.NestedDynamicIdSpec.deviceId", "isToMember": true, "text": "vmodl.test.uber.privileges.UberPrivileges.NestedDynamicIdSpec#deviceId"}},
                                                                {"text": " requires "},
                                                                {"atCode": "System.Read"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3f8a67c1ab3b1ec71dc8d49b56e058731483acee",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "is a specification",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "is a specification"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.privileges.uber_privileges.nested_dynamic_id_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "for some reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "for some reason"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.privileges_more",
                    "documentation": "",
                    "docModels": {
                    },
                    "metadata": {
                    },
                    "fingerprint": "3302d51d3ffebd742d1433df9c770d7825752737",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.privileges_more.more_privileges",
                            "documentation": "Sample test service for testing automatic generation of privilege documentation. \n This use case requires that there is no package default privilege for the operations, so we can test that everything works in this setup as well.\n",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Sample test service for testing automatic generation of privilege documentation. "},
                                            {
                                                "paragraph": [
                                                    {"text": " This use case requires that there is no package default privilege for the operations, so we can test that everything works in this setup as well."}
                                                ]
                                            }

                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "b1369d9dfa638aabfb6ca21c22aab01c709eac4a",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "simple_operation",
                                    "documentation": "Operation to verify privilege documentation for operations without ID parameters.\nif you do not have all of the privileges described as follows: \n   -  Operation execution requires vapi.operation. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations without ID parameters."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " "},
                                                                {"atTerm": "Operation"},
                                                                {"text": " execution requires "},
                                                                {"atCode": "vapi.operation"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d44b48d240a6c79884d7666c2ec5d6eec3ea601d",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "operation_with_id_parameter",
                                    "documentation": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege.\nif you do not have all of the privileges described as follows: \n   -  The resource vmodl.test.uber.privilege.more referenced by the parameter id requires vapi.id.parameter. \n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Operation to verify privilege documentation for operations with a single ID parameter that has defined privilege."}
                                                ]
                                            }
                                        ]
                                        ,
                                        "privilege": 
                                        {
                                            "docModel": [
                                                {"text": "if you do not have all of the privileges described as follows: "},
                                                {
                                                    "ul": [
                                                        {"text": " "},
                                                        {
                                                            "li": [
                                                                {"text": " The resource "},
                                                                {"atCode": "vmodl.test.uber.privilege.more"},
                                                                {"text": " referenced by the "},
                                                                {"atTerm": "parameter"},
                                                                {"text": " "},
                                                                {"atParamName": {"text": "id", "resolved": "vmodl.test.uber.privileges_more.MorePrivileges.operationWithIdParameter#id"}},
                                                                {"text": " requires "},
                                                                {"atCode": "vapi.id.parameter"},
                                                                {"text": ". "}
                                                            ]
                                                        }

                                                    ]
                                                }

                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d25acf0fd8fcccd0e9f329a1eec45ab58a729e9e",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "an ID\nThe parameter must be an identifier for the resource type: vmodl.test.uber.privilege.more.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an ID"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber.privilege.more"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber.privilege.more"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "if id is not found or foreignId is not found.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if id is not found or foreignId is not found."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.rest",
                    "documentation": "",
                    "docModels": {
                    },
                    "metadata": {
                    },
                    "fingerprint": "0056236cb301341f1ff56e36b3c6bc02521e5d81",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.rest.configuration",
                            "documentation": "Configuration for user service",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Configuration for user service"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "a17f751c830b3aa9edb4f83502c55c0b04a1b0b8",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.configuration.info",
                                    "documentation": "User Info",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e41a9d8a8cd02ce2216971664e0c6df633f73e34",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "max_users",
                                            "documentation": "max users",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "max users"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "min_age",
                                            "documentation": "min age",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "min age"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "num_users",
                                            "documentation": "num users",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "num users"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.configuration.update_spec",
                                    "documentation": "User Info update spec",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info update spec"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e20f51455f80d02df063d20b34a4ad047ced996e",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "max_users",
                                            "documentation": "max users\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "max users"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                        ,
                                        {
                                            "name": "min_age",
                                            "documentation": "min age\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "min age"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "long"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.configuration.set_spec",
                                    "documentation": "User Info set spec",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info set spec"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "798b8f0cb6969af66bea68fa881830b3ef2c42fc",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "max_users",
                                            "documentation": "max users",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "max users"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "min_age",
                                            "documentation": "min age",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "min age"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "get",
                                    "documentation": "Create User. \n POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=get TODO: GET \/com\/vmware\/vapi\/test\/rest\/configuration\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Create User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=get"},
                                                            {"text": " TODO: "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest\/configuration"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "372751e2bdc5d8e5c5b76479ceee6d07737e7695",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "info result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "info result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.configuration.info"}
                                    }
                                }
                                ,
                                {
                                    "name": "update",
                                    "documentation": "Update User. \n POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=update TODO: PATCH \/com\/vmware\/vapi\/test\/rest\/configuration\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Update User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=update"},
                                                            {"text": " TODO: "},
                                                            {"atCode": "PATCH \/com\/vmware\/vapi\/test\/rest\/configuration"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3109611cb0e449ac3b4fb6ee160fb4bcbc5db103",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "update spec param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "update spec param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.configuration.update_spec"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "set",
                                    "documentation": "Set User. \n POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=set TODO: PUT \/com\/vmware\/vapi\/test\/rest\/configuration\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Set User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "POST \/com\/vmware\/vapi\/test\/rest\/configuration?~action=set"},
                                                            {"text": " TODO: "},
                                                            {"atCode": "PUT \/com\/vmware\/vapi\/test\/rest\/configuration"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "4f324484ffb33164ba581b9d7833557ff2b2f371",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "set spec param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "set spec param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.configuration.set_spec"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.rest.crud_user",
                            "documentation": "User service",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "User service"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "73438b95e1d4897c7ef81da4df25343302e12bd5",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.crud_user.user_model",
                                    "documentation": "User Info",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "Crud": {"value": "true"},
                                        "Model": {"value": "true"}
                                    },
                                    "fingerprint": "af003ae2ee00a6c7245a9264f91083343d74480c",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "id\nThis field is not used for the create operation. It will always be present in the result of the get or list operations. It is not used for the update operation.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vapi.test.user. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "id"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " is not used for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is not used for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "ModelKey": {"value": "true"},
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "UNUSED"},
                                                "Update": {"value": "UNUSED"},
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "name",
                                            "documentation": "name\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email\nThis field must be provided for the create operation. It will always be present in the result of the get or list operations. It is optional for the update operation.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "This "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be provided for the "},
                                                        {"atCode": "create"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": ". It will always be present in the "},
                                                        {"atTerm": "result"},
                                                        {"text": " of the "},
                                                        {"atCode": "get"},
                                                        {"text": " or "},
                                                        {"atCode": "list"},
                                                        {"text": " "},
                                                        {"atTerm": "operations"},
                                                        {"text": ". It is optional for the "},
                                                        {"atCode": "update"},
                                                        {"text": " "},
                                                        {"atTerm": "operation"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Read": {"value": "REQUIRED"},
                                                "Create": {"value": "REQUIRED"},
                                                "Update": {"value": "OPTIONAL"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.crud_user.filter_spec",
                                    "documentation": "Filter spec for list",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Filter spec for list"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1315957daa4e722ed6ca3ba74ef443d75bdb05c4",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "is_active",
                                            "documentation": "Filter active users\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Filter active users"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "boolean"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "create",
                                    "documentation": "Create User. \n POST \/com\/vmware\/vapi\/test\/rest\/crud-user\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Create User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "POST \/com\/vmware\/vapi\/test\/rest\/crud-user"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c3bc5aebe381e219c6082d5f68ae9f2b769c8bba",
                                    "params": [
                                        {
                                            "name": "user",
                                            "documentation": "user model param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user model param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument",
                                            "name": "invalid_argument",
                                            "documentation": "when there is a problem with the input spec",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when there is a problem with the input spec"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "user model result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "user model result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "get",
                                    "documentation": "Get User. \n GET \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Get User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fb7e879e284cfe84503d648623df25558616b90d",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "user model result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "user model result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "list",
                                    "documentation": "List User. \n GET \/com\/vmware\/vapi\/test\/rest\/crud-user GET \/com\/vmware\/vapi\/test\/rest\/crud-user?filter.is_active=True\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "List User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest\/crud-user"},
                                                            {"text": " "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest\/crud-user?filter.is_active=True"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "6c219b63d1ab8b6f8660ad10ab4db4c687065991",
                                    "params": [
                                        {
                                            "name": "filter",
                                            "documentation": "filter param\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "filter param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.filter_spec"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "list of user model result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "list of user model result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}}
                                    }
                                }
                                ,
                                {
                                    "name": "update",
                                    "documentation": "Update User. \n PATCH \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Update User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "PATCH \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e989cf125f35f8047adf6d1546eb7255c26fe71b",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "user",
                                            "documentation": "user model param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user model param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "user model result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "user model result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.crud_user.user_model"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "Delete User. \n DELETE \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Delete User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "DELETE \/com\/vmware\/vapi\/test\/rest\/crud-user\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bfa84b83a4661e0acabc8c040ce0e9000c8e395f",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.rest.filter",
                            "documentation": "Service to test query parameters functionality",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Service to test query parameters functionality"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "90dab77a22133d52ab4928c5c4ec5ff7c0671e05",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.filter.simple_struct",
                                    "documentation": "simple struct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "simple struct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "aef1bbd14e7a33d38a59979af6ba2362ea5c90df",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_field",
                                            "documentation": "string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "long_field",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.filter.complex_struct",
                                    "documentation": "complex struct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "complex struct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0d2f8ee89e24fd6f2b0552b6b99af1fa7d82e832",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_field",
                                            "documentation": "string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "boolean_field",
                                            "documentation": "boolean field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "boolean field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                        ,
                                        {
                                            "name": "long_field",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "struct_field",
                                            "documentation": "struct field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "struct field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.filter.simple_struct"}
                                        }
                                        ,
                                        {
                                            "name": "optional_string",
                                            "documentation": "optional string field\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "optional string field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "list_string",
                                            "documentation": "list string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "list_list_long",
                                            "documentation": "list of list string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list of list string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "long"}}}
                                        }
                                        ,
                                        {
                                            "name": "map_simple",
                                            "documentation": "map of string string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "map of string string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "map_struct",
                                            "documentation": "map of string struct field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "map of string struct field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.filter.simple_struct"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "list",
                                    "documentation": "List. \n \/rest\/vmodl\/test\/uber\/rest\/filter?\nstruct.string_field=string&\nstruct.boolean_field=True&\nstruct.long_field=10&\nstruct.optional_string=string&\nstruct.struct_field.string_field=string&\nstruct.struct_field.long_field=10&\nstruct.list_string.1=string1&\nstruct.list_string.2=string2&\nstruct.list_list_long.1.1=string11&\nstruct.list_list_long.1.2=string12&\nstruct.list_list_long.2.1=string21&\nstruct.list_list_long.2.2=string22&\nstruct.map_simple.1.key=stringkey&\nstruct.map_simple.1.value=stringvalue&\nstruct.map_struct.1.key=stringkey&\nstruct.map_struct.1.value.string_field=string&\nstruct.map_struct.1.value.long_field=10\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "List. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "\/rest\/vmodl\/test\/uber\/rest\/filter?\nstruct.string_field=string&\nstruct.boolean_field=True&\nstruct.long_field=10&\nstruct.optional_string=string&\nstruct.struct_field.string_field=string&\nstruct.struct_field.long_field=10&\nstruct.list_string.1=string1&\nstruct.list_string.2=string2&\nstruct.list_list_long.1.1=string11&\nstruct.list_list_long.1.2=string12&\nstruct.list_list_long.2.1=string21&\nstruct.list_list_long.2.2=string22&\nstruct.map_simple.1.key=stringkey&\nstruct.map_simple.1.value=stringvalue&\nstruct.map_struct.1.key=stringkey&\nstruct.map_struct.1.value.string_field=string&\nstruct.map_struct.1.value.long_field=10"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a5a6cd1586fd5b29eefb7c86ed9a151ce38ece7d",
                                    "params": [
                                        {
                                            "name": "struct",
                                            "documentation": "struct input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "struct input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.filter.complex_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "output",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "output"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.filter.complex_struct"}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.rest.user",
                            "documentation": "User service",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "User service"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "bfb54b6ac66b3cb67c7b67ec35f01268fe35a092",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.user.info",
                                    "documentation": "User Info",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0ca557e518c147cdce086aa64c3f2436438eb73e",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.user.create_spec",
                                    "documentation": "User create spec",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User create spec"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "258cc46b89d167fa5f46cf9b06ced5249c5c8c74",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.user.update_spec",
                                    "documentation": "User update spec",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User update spec"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "844af969703bc3930dc1c271ce8f0d8bf09c38e9",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email\ngood reason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "good reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.rest.user.set_spec",
                                    "documentation": "User set spec",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User set spec"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "62eb0ada3246049a6f0a23d20838786863fe378a",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "name",
                                            "documentation": "name",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "create",
                                    "documentation": "Create User. \n POST \/com\/vmware\/vapi\/test\/rest\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Create User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "POST \/com\/vmware\/vapi\/test\/rest"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "99508b77c2f2c2cce0a3f076c20dd34a298e1e48",
                                    "params": [
                                        {
                                            "name": "spec",
                                            "documentation": "create spec param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "create spec param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.user.create_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument",
                                            "name": "invalid_argument",
                                            "documentation": "when there is a problem with the input spec",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when there is a problem with the input spec"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.invalid_argument"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "ID\nThe result will be an identifier for the resource type: com.vmware.vapi.test.user.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "ID"}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "com.vmware.vapi.test.user"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "com.vmware.vapi.test.user"}
                                        },
                                        "type": {"category": "primitive", "primitive_type": "ID"}
                                    }
                                }
                                ,
                                {
                                    "name": "get",
                                    "documentation": "Create User. \n GET \/com\/vmware\/vapi\/test\/rest\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Create User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "2e13bea7af6123907f8624863c73e3ed8de9e3d6",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "Info",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "Info"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.user.info"}
                                    }
                                }
                                ,
                                {
                                    "name": "list",
                                    "documentation": "List User. \n GET \/com\/vmware\/vapi\/test\/rest\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "List User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "GET \/com\/vmware\/vapi\/test\/rest"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b3ed6fb7bd19a87530dcb8a247ffb173e32198e6",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "list of ID\nThe result will contain identifiers for the resource type: com.vmware.vapi.test.user.",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "list of ID"}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will contain identifiers for the resource type: "},
                                                    {"atCode": "com.vmware.vapi.test.user"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "com.vmware.vapi.test.user"}
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                    }
                                }
                                ,
                                {
                                    "name": "update",
                                    "documentation": "Update User. \n PATCH \/com\/vmware\/vapi\/test\/rest\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Update User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "PATCH \/com\/vmware\/vapi\/test\/rest\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c9945d30a5c74b99c7a46e6ccdf40ee22991da7f",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "spec",
                                            "documentation": "update spec param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "update spec param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.user.update_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "set",
                                    "documentation": "Set User. \n PUT \/com\/vmware\/vapi\/test\/rest\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Set User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "PUT \/com\/vmware\/vapi\/test\/rest\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f62bc9cf8c534e96d28f39c0d2b3d193945777a7",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "spec",
                                            "documentation": "set spec param",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "set spec param"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.rest.user.set_spec"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "Delete User. \n DELETE \/com\/vmware\/vapi\/test\/rest\/<user_id>\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Delete User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " "},
                                                            {"atCode": "DELETE \/com\/vmware\/vapi\/test\/rest\/<user_id>"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "bfa84b83a4661e0acabc8c040ce0e9000c8e395f",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "register",
                                    "documentation": "Register User. \n {@code UE9TVCAvY29tL3Ztd2FyZS92YXBpL3Rlc3QvcmVzdC88dXNlcl9pZD4\/fmFjdGlvbj1yZWdpc3Rlcg==}\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Register User. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " {@code UE9TVCAvY29tL3Ztd2FyZS92YXBpL3Rlc3QvcmVzdC88dXNlcl9pZD4\/fmFjdGlvbj1yZWdpc3Rlcg==}"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "85122ff69fdfcc14ef98c578ef904cb500a69209",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id param\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id param"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when the user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when the user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "compare",
                                    "documentation": "Compares two Users and returns -1,0 or 1 based on whether the first user is better, equal or lower than the second user. \n {@code UE9TVCAvY29tL3Ztd2FyZS92YXBpL3Rlc3QvcmVzdC88dXNlcl9pZD4\/fmFjdGlvbj1jb21wYXJl}\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Compares two Users and returns -1,0 or 1 based on whether the first user is better, equal or lower than the second user. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " {@code UE9TVCAvY29tL3Ztd2FyZS92YXBpL3Rlc3QvcmVzdC88dXNlcl9pZD4\/fmFjdGlvbj1jb21wYXJl}"}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "1e6d6ee0abfa7b3171632db22cee0dae0d18f3ea",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "user id of first user\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id of first user"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "other_user_id",
                                            "documentation": "user id of second user\nThe parameter must be an identifier for the resource type: com.vmware.vapi.test.user.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "user id of second user"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.test.user"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.test.user"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.not_found",
                                            "name": "not_found",
                                            "documentation": "when either user id is unknown",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "when either user id is unknown"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.not_found"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "long value of -1,0 or 1",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "long value of -1,0 or 1"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "long"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.annotations.rest",
                    "documentation": "Copyright 2016 VMware, Inc. All rights reserved. Copyright 2016 VMware, Inc. All rights reserved.",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Copyright 2016 VMware, Inc. All rights reserved. Copyright 2016 VMware, Inc. All rights reserved."}
                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "72046952b2ec7d80d47480f10d724762f0971e0a",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.annotations.rest.custom_mappings_user",
                            "documentation": "",
                            "docModels": {
                            },
                            "metadata": {
                            },
                            "fingerprint": "bef4aa79bfd918ac3c1bbaca657eae0a9b8263ac",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info",
                                    "documentation": "User Info",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "User Info"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "85863d06a6d00b98bb3ec90b96f9e69dfbecabf3",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "id\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.test.User. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "id"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "name",
                                            "documentation": "name",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "name"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "email",
                                            "documentation": "email",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "email"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "create",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user", "method": "POST"}
                                    },
                                    "fingerprint": "882a55835b3a4b710d8ba37ae091420cb42cd534",
                                    "params": [
                                        {
                                            "name": "user",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "The result will be an identifier for the resource type: com.vmware.test.User.",
                                        "docModels": {
                                            "descriptions": [
                                            ]
                                            ,
                                            "metadata": 
                                            {
                                                "docModel": [
                                                    {"text": "The "},
                                                    {"atTerm": "result"},
                                                    {"text": " will be an identifier for the resource type: "},
                                                    {"atCode": "com.vmware.test.User"},
                                                    {"text": "."}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                            "Resource": {"value": "com.vmware.test.User"}
                                        },
                                        "type": {"category": "primitive", "primitive_type": "ID"}
                                    }
                                }
                                ,
                                {
                                    "name": "get",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user/{user_id}", "method": "GET"}
                                    },
                                    "fingerprint": "717baab01551a1742c3824f5b6f76be9eb4e331e",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"},
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info"}
                                    }
                                }
                                ,
                                {
                                    "name": "list",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user", "method": "GET"}
                                    },
                                    "fingerprint": "b357634abfcf8251c33de46d477a45df9093c5e2",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info"}}
                                    }
                                }
                                ,
                                {
                                    "name": "set",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user/{user_id}", "method": "PUT"}
                                    },
                                    "fingerprint": "1bd0056e5a5e33c49146fe909396ae362277f890",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"},
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "user_info",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.custom_mappings_user.user_info"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user/{user_id}", "method": "DELETE"}
                                    },
                                    "fingerprint": "c4f3619c4af51f5220cbec38aa814f57449becce",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"},
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "update_name",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/user/{user_id}/name/{user_name}", "method": "PATCH"}
                                    },
                                    "fingerprint": "6c649c60517645e3c79deda92fc959a25409ace3",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"},
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "user_name",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_name"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.annotations.rest.rest_annotations",
                            "documentation": "",
                            "docModels": {
                            },
                            "metadata": {
                            },
                            "fingerprint": "ab24c4975174e0bbc4acc3491b4f2143807162e3",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.annotations.rest.rest_annotations.model",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "4d7209ab8d3b90590a3a6a67800044cb587831d8",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "id",
                                            "documentation": "When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.test.User. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "ID"}}
                                        }
                                        ,
                                        {
                                            "name": "user_name",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "SerializationName": {"value": "user_name"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "company_id",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "SerializationName": {"value": "company_id"}
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "create",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users", "method": "POST", "headers": ["contentType=application/json", "contentType=application/xml"], "params": ["action1=id1", "action2=id2", "action3=id3"], "contentType": "application/json;version=5.7;class=com.vmware.vchs.iam.api.schema.v2.classes.user.User", "accept": "application/json;version=5.7;class=com.vmware.vchs.iam.api.schema.v2.classes.user.User"},
                                        "ResponseStatus": {"value": "201"}
                                    },
                                    "fingerprint": "7949e204f1f48d28fe572453ebd3b776fbb92bf5",
                                    "params": [
                                        {
                                            "name": "create_spec",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "RequestBody": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.rest_annotations.model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.rest_annotations.model"}
                                    }
                                }
                                ,
                                {
                                    "name": "get_it",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users", "method": "GET", "headers": "content-type=application/json", "params": "action=id"}
                                    },
                                    "fingerprint": "498752ca1d64cf11316903449ac8f8cff1966a2a",
                                    "params": [
                                        {
                                            "name": "id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "string"}
                                    }
                                }
                                ,
                                {
                                    "name": "get1",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users", "method": "POST", "headers": ["content-type=application/json", "accept"], "params": ["action1=id1", "id2"]}
                                    },
                                    "fingerprint": "695cf6760b409b7c6332debe1c49eeb68620625f",
                                    "params": [
                                        {
                                            "name": "id1",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "id2",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "string"}
                                    }
                                }
                                ,
                                {
                                    "name": "get",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users/{user_id}", "method": "GET"},
                                        "ResponseStatus": {"value": "200"}
                                    },
                                    "fingerprint": "2c61871ddf9232b341f7bb265364e401de6d9624",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "The parameter must be an identifier for the resource type: com.vmware.test.User.",
                                            "docModels": {
                                                "descriptions": [
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.test.User"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"},
                                                "Resource": {"value": "com.vmware.test.User"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.rest_annotations.model"}
                                    }
                                }
                                ,
                                {
                                    "name": "set",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users/{user_id}", "method": "PUT", "contentType": "application/json", "accept": "application/json;"},
                                        "ResponseStatus": {"value": "204"}
                                    },
                                    "fingerprint": "8704ea7a99b2f65d49cb81f256e265bf012cea63",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "update_spec",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "RequestBody": {"value": "true"}
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.annotations.rest.rest_annotations.model"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "",
                                    "docModels": {
                                    },
                                    "metadata": {
                                        "RequestMapping": {"value": "/test/Users/{user_id}/other/{action_id}", "method": "POST"},
                                        "ResponseStatus": {"value": "200"}
                                    },
                                    "fingerprint": "adf3c96b3ffd8bbbea433d3d09128c0b3b4c5a01",
                                    "params": [
                                        {
                                            "name": "user_id",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "user_id"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                        ,
                                        {
                                            "name": "action_id",
                                            "documentation": "",
                                            "docModels": {
                                            },
                                            "metadata": {
                                                "PathVariable": {"value": "action_id"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.security",
                    "documentation": "",
                    "docModels": {
                    },
                    "metadata": {
                    },
                    "fingerprint": "1cf5adff9b83b54989cf8944a3b1371bc0e58d0a",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.security.authentication",
                            "documentation": "Provides an authenticaion service for test purposes",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Provides an authenticaion service for test purposes"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "2286c5ee006c1a970736f1ecf460cc19745ceb06",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "authenticate_using_saml_token",
                                    "documentation": "Test operation for SAML authn (Bearer or Holder of Key token)",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for SAML authn (Bearer or Holder of Key token)"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "eb64ae76dc4f68d9150f5a9337583a19a26615af",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "true if SAML security context is detected on the provider side",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if SAML security context is detected on the provider side"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "authenticate_using_oauth",
                                    "documentation": "Test operation for OAuth2 authn.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for OAuth2 authn."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "284c345205e99ae99b76b32d0ec4ee4182352a40",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "true if OAuth2 context is detected on the provider side",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if OAuth2 context is detected on the provider side"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "authenticate_using_user_pass",
                                    "documentation": "Test operation for user\/pass authn.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation for user\/pass authn."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c4b6b17d8c8750e5ee163d5b2ce2943ca0a444cd",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "true if user\/pass security context is detected in the service implementation and there is an authentication result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if user\/pass security context is detected in the service implementation and there is an authentication result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                                ,
                                {
                                    "name": "authenticate_using_user_pass_or_no_auth",
                                    "documentation": "Test operation marked both for no authentication (or) user\/pass authentication.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Test operation marked both for no authentication (or) user\/pass authentication."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9fd6bded3e4aa88b3e797d0e10565e8ff6a0dedd",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "true if user\/pass security context is detected in the service implementation and there is an authentication result",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"atCode": "true"},
                                                        {"text": " if user\/pass security context is detected in the service implementation and there is an authentication result"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "boolean"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.security.authorization",
                            "documentation": "Provides an authorization service for test purposes.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Provides an authorization service for test purposes."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "89a252c50edb729fd8051f0e085634f2c6364076",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.security.authorization.struct",
                                    "documentation": "Defines a nested structure with an ID field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Defines a nested structure with an ID field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "b37328b6d7464baafbb37ead964ea7cc72429f3b",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "structure_id",
                                            "documentation": "The structure ID.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vapi.authorization.structure. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vapi.authorization.structure.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "The structure ID."}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.authorization.structure"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.authorization.structure"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.authorization.structure"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.security.authorization.structures",
                                    "documentation": "Defines a nested structure with a Map field.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Defines a nested structure with a Map field."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "d07d06aa4336d5a77ad141039d2e929ab5d2a5cb",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "struct_map",
                                            "documentation": "The structure Map to Authorization.Struct values.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "The structure Map to "},
                                                            {"atLink": {"resolved": "vmodl.test.uber.security.Authorization.Struct", "isToType": true, "text": "Struct"}},
                                                            {"text": " values."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.security.authorization.struct"}}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "authorize",
                                    "documentation": "Authorizes the user for the given resource.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Authorizes the user for the given resource."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "93a3ba67b3b984e7929f78c03717dfbb13fbd40f",
                                    "params": [
                                        {
                                            "name": "default_resource",
                                            "documentation": "an ID of a default resource\nThe parameter must be an identifier for the resource type: com.vmware.vapi.authorization.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an "},
                                                            {"atTerm": "ID"},
                                                            {"text": " of a default resource"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.authorization"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.authorization"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                        ,
                                        {
                                            "name": "named_id",
                                            "documentation": "an ID of a named resource\nThe parameter must be an identifier for the resource type: com.vmware.vapi.named_resource.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "an "},
                                                            {"atTerm": "ID"},
                                                            {"text": " of a named resource"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "The "},
                                                        {"atTerm": "parameter"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "com.vmware.vapi.named_resource"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "com.vmware.vapi.named_resource"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "authorize_default",
                                    "documentation": "Authorizes the user for an operation without any resource parameters.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Authorizes the user for an operation without any resource parameters."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "a6d20a5e3c25b416608bf6e571c1fac6eb1085e9",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "authorize_nested",
                                    "documentation": "Authorizes the user for the given resource specified in a nested structure.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Authorizes the user for the given resource specified in a nested structure."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "fb24cc76eed0db94de941ebe35028b0d7157be06",
                                    "params": [
                                        {
                                            "name": "structs",
                                            "documentation": "the Authorization.Structures",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "the "},
                                                            {"atLink": {"resolved": "vmodl.test.uber.security.Authorization.Structures", "isToType": true, "text": "Structures"}}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.security.authorization.structures"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "authorize_map",
                                    "documentation": "Authorizes the user for the given resource specified in the nested structure present in the map value.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Authorizes the user for the given resource specified in the nested structure present in the map value."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "0468b3c2202361e857dda27db4565a6f72fcb28e",
                                    "params": [
                                        {
                                            "name": "struct_map",
                                            "documentation": "a map of Authorization.Struct values",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "a "},
                                                            {"atTerm": "map"},
                                                            {"text": " of "},
                                                            {"atLink": {"resolved": "vmodl.test.uber.security.Authorization.Struct", "isToType": true, "text": "Struct"}},
                                                            {"text": " values"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Map", "map_key_type": {"category": "primitive", "primitive_type": "string"}, "map_value_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.security.authorization.struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.security.session",
                            "documentation": "Provides an test service that echos back session ID from security context.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Provides an test service that echos back session ID from security context."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "32c53beb563d380f37e85cfaf8ab834fefb4e12a",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                            ],
                            "operations": [
                                {
                                    "name": "echo_session_id",
                                    "documentation": "Returns sessionId as found in request's SecurityContext.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Returns sessionId as found in request's SecurityContext."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "9f40f1c064cc0eaf1a3939a947afcbd5abb0f832",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "session ID from request's security context",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "session ID from request's security context"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "string"}
                                    }
                                }
                                ,
                                {
                                    "name": "login",
                                    "documentation": "Login with SSO token; returns session identifier.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Login with SSO token; returns session identifier."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "2f992f7b59f333d4998f16f03d60ff8f3280ee14",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "new session ID",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "new session ID"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "string"}
                                    }
                                }
                                ,
                                {
                                    "name": "no_authn",
                                    "documentation": "Login with NoAuthentication security scheme.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Login with NoAuthentication security scheme."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e156f64e95c41f61b096b797887e76cd7255cbab",
                                    "params": [
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                                ,
                                {
                                    "name": "create",
                                    "documentation": "Login with SSO token; returns session identifier.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Login with SSO token; returns session identifier."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "01d7cf373188b65d01e7c5a84fb900f02fa58084",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the authentication requirements are not met.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the authentication requirements are not met."}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "new session ID",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "new session ID"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "secret"}
                                    }
                                }
                                ,
                                {
                                    "name": "delete",
                                    "documentation": "Terminates the validity of a session token. This is the equivalent of log out. \n A session identifier is expected as part of the request.\n",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Terminates the validity of a session token. This is the equivalent of log out. "},
                                                    {
                                                        "paragraph": [
                                                            {"text": " A session identifier is expected as part of the request."}
                                                        ]
                                                    }

                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "e133c702021592aa7bc2a8dc71e1d5e09b63b04c",
                                    "params": [
                                    ],
                                    "errors": [
                                        {
                                            "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated",
                                            "name": "unauthenticated",
                                            "documentation": "if the session id is missing from the request",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "if the session id is missing from the request"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "com.vmware.vapi.std.errors.unauthenticated"}
                                        }
                                    ],
                                    "result": {
                                        "documentation": "",
                                        "docModels": {
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "void"}
                                    }
                                }
                            ]
                        }
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.shared",
                    "documentation": "Contains tests for VMODL2 shared types. \n VMODL2 allows for the declaration of top-level types, which may be shared across packages. \n\n The examples here are meant to test the proper code generation and use for a target language. In general, these examples are to be used from other test packages, so testing of \"import\" functionality may be done for each target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 shared types. "},
                                    {
                                        "paragraph": [
                                            {"text": " VMODL2 allows for the declaration of top-level types, which may be shared across packages. "}
                                        ]
                                    }
,
                                    {
                                        "paragraph": [
                                            {"text": " The examples here are meant to test the proper code generation and use for a target language. In general, these examples are to be used from other test packages, so testing of \"import\" functionality may be done for each target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "32d76d960da3d1214cb85bf1cd53429de22989c2",
                    "enumerations": [
                        {
                            "name": "vmodl.test.uber.shared.shared_english_enum",
                            "documentation": "shared enumumeration",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared enumumeration"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "89e92bc8b8a07a5217ba0b37de15456ebd1ec9eb",
                            "values": [
                                {
                                    "documentation": "const one",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const one"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "ONE"
                                }
                                ,
                                {
                                    "documentation": "const two",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const two"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "TWO"
                                }
                                ,
                                {
                                    "documentation": "const three",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const three"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "THREE"
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.shared.shared_greek_enum",
                            "documentation": "shared enumumeration",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared enumumeration"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "84bc998cdd441db6f999f71faceb8b693726cf1c",
                            "values": [
                                {
                                    "documentation": "const alpha",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const alpha"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "ALPHA"
                                }
                                ,
                                {
                                    "documentation": "const beta",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const beta"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "BETA"
                                }
                                ,
                                {
                                    "documentation": "const gamma",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "const gamma"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "name": "GAMMA"
                                }
                            ]
                        }
                    ],
                    "structures": [
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.shared.shared_complex_struct",
                            "documentation": "shared complex structure",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared complex structure"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "70f48806612c8a6fdb2488187a0a3f106c933ec9",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "boolean_field",
                                    "documentation": "boolean field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "boolean field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "boolean"}
                                }
                                ,
                                {
                                    "name": "double_field",
                                    "documentation": "double field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "double field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "double"}
                                }
                                ,
                                {
                                    "name": "long_field",
                                    "documentation": "long field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "long field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "long"}
                                }
                                ,
                                {
                                    "name": "string_field",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                                ,
                                {
                                    "name": "date_time_field",
                                    "documentation": "DateTime field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "DateTime field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "date_time"}
                                }
                                ,
                                {
                                    "name": "secret_field",
                                    "documentation": "Secret field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Secret field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "secret"}
                                }
                                ,
                                {
                                    "name": "uri_field",
                                    "documentation": "URI field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "URI field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "URI"}
                                }
                                ,
                                {
                                    "name": "enum_field",
                                    "documentation": "field using enum",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using enum"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.shared.shared_greek_enum"}
                                }
                                ,
                                {
                                    "name": "list_primitive_field",
                                    "documentation": "list field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "list field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "optional_primitive_field",
                                    "documentation": "optional String field\nreason",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "optional String field"}
                                                ]
                                            }
                                        ]
                                        ,
                                        "optionalReason": 
                                        {
                                            "docModel": [
                                                {"text": "reason"}
                                            ]
                                        }
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                }
                                ,
                                {
                                    "name": "structure_field",
                                    "documentation": "field using other structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "field using other structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.shared.shared_simple_struct"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.shared.shared_empty_struct",
                            "documentation": "shared empty structure (without fields)",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared empty structure (without fields)"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "b5c02747439ac7d06710b1195156fc69aec36cc0",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.shared.shared_includable_struct",
                            "documentation": "shared includable structure",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared includable structure"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                                "Includable": {"value": "true"}
                            },
                            "fingerprint": "595d1cf97557f74caac3a925c031ec6b79219957",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "string_field",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.shared.shared_simple_struct",
                            "documentation": "shared simple structure",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "shared simple structure"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "32e924be9b65f6463234221afb0aadee66c260e2",
                            "enumerations": [
                            ],
                            "constants": [
                            ],
                            "fields": [
                                {
                                    "name": "string_field",
                                    "documentation": "String field",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String field"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "primitive", "primitive_type": "string"}
                                }
                            ]
                        }
                        ,
                        {
                            "type": "Structure",
                            "name": "vmodl.test.uber.shared.shared_struct_with_constants",
                            "documentation": "test structure with constants",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "test structure with constants"}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "5f6d01da18e4e52e4f88ffd5650cccba64ab8076",
                            "enumerations": [
                            ],
                            "constants": [
                                {
                                    "name": "struct_constant_string",
                                    "documentation": "String constant in structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "String constant in structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "String"},
                                    "value": "val"
                                }
                                ,
                                {
                                    "name": "struct_constant_long",
                                    "documentation": "Long constant in structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Long constant in structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "type": {"category": "Primitive", "type": "Long"},
                                    "value": 100
                                }
                            ],
                            "fields": [
                            ]
                        }
                    ],
                    "services": [
                    ]
                }
                ,
                {
                    "name": "vmodl.test.uber.structures",
                    "documentation": "Contains tests for VMODL2 structures. \n VMODL2 allows for arbitrary data structures to be created, which is simply a class with a set of properties. The properties may be a primitive type, a structure type or a generic type that wraps either of the former types. \n\n The examples here are meant to test the proper code generation and use for a target language.\n",
                    "docModels": {
                        "descriptions": [
                            {
                                "docModel": [
                                    {"text": "Contains tests for VMODL2 structures. "},
                                    {
                                        "paragraph": [
                                            {"text": " VMODL2 allows for arbitrary data structures to be created, which is simply a class with a set of properties. The properties may be a primitive type, a structure type or a generic type that wraps either of the former types. "}
                                        ]
                                    }
,
                                    {
                                        "paragraph": [
                                            {"text": " The examples here are meant to test the proper code generation and use for a target language."}
                                        ]
                                    }

                                ]
                            }
                        ]
                    },
                    "metadata": {
                    },
                    "fingerprint": "39561c9ea05ab25f9ed28694635d0bace737ed10",
                    "enumerations": [
                    ],
                    "structures": [
                    ],
                    "services": [
                        {
                            "name": "vmodl.test.uber.structures.uber_dynamic",
                            "documentation": "Specifies a test interface for VMODL2 dynamic structure types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 dynamic structure types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "c9be422b42ebe9239709d01a7dc3fcfe28196e4a",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_dynamic.sample_struct",
                                    "documentation": "SampleStruct",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "SampleStruct"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "060a41ae05616472cf020a8fa00532bbb6dd1a2f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "foo",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "bar",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_dynamic_structure",
                                    "documentation": "Echo dynamic structure.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echo dynamic structure."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5324183813886b9e56b6a06f6e6b6368b16e65c2",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atCode": "input"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "primitive", "primitive_type": "dynamic_structure"}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.structures.uber_recursive",
                            "documentation": "Specifies a test interface for VMODL2 recursive structure types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 recursive structure types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "6ca73b9ee035c91725736f0b0bc8af72925f8830",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct",
                                    "documentation": "Structure that contains a circular type reference (to itself).",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Structure that contains a circular type reference (to itself)."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "be22ef0bcdfad7df0878d3da641b48372be78456",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "data",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "next",
                                            "documentation": "reference to itself\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "reference to itself"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}}
                                        }
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_self_recursive_struct",
                                    "documentation": "Echo structure.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echo structure."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "4d326f63a64c4a8e559a472c837ee94f072e9f98",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberRecursive.echoSelfRecursiveStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_self_recursive_struct_optional",
                                    "documentation": "Echo optional structure.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echo optional structure."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "77d2e5e033cc14b304efa81379be1546e75ae47c",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberRecursive.echoSelfRecursiveStructOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_self_recursive_struct_list",
                                    "documentation": "Echo list of structures.",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Echo list of structures."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c5c379f7a96f323a1103c70469cd2acac4937d31",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test input",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test input"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberRecursive.echoSelfRecursiveStructList#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_recursive.nested_self_recursive_struct"}}
                                    }
                                }
                            ]
                        }
                        ,
                        {
                            "name": "vmodl.test.uber.structures.uber_structures",
                            "documentation": "Specifies a test interface for VMODL2 structure types.",
                            "docModels": {
                                "descriptions": [
                                    {
                                        "docModel": [
                                            {"text": "Specifies a test interface for VMODL2 structure types."}
                                        ]
                                    }
                                ]
                            },
                            "metadata": {
                            },
                            "fingerprint": "1e4e597aea31df746d35dd426623990f9e6e1dec",
                            "constants": [
                            ],
                            "enumerations": [
                            ],
                            "structures": [
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_structures.nested_empty_struct",
                                    "documentation": "Empty structure (without fields)",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Empty structure (without fields)"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3899956a69866563ed1ae4a532f9112350857061",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct",
                                    "documentation": "simple test structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "simple test structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "33e2b61d899463e8ba22d5a447a0717fafc72dc7",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "string_field",
                                            "documentation": "string field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "string field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct",
                                    "documentation": "more complex test structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "more complex test structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f69a8f131bc56d9fe20f39d85fd96fc370cb8fe3",
                                    "enumerations": [
                                        {
                                            "name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct.test_enum",
                                            "documentation": "doc enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "doc enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "fingerprint": "2a6e0fc5ad8ed69b4f46ed5ff4940551cefa56b4",
                                            "values": [
                                                {
                                                    "documentation": "doc A",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "doc A"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "A"
                                                }
                                                ,
                                                {
                                                    "documentation": "doc B",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "doc B"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "B"
                                                }
                                                ,
                                                {
                                                    "documentation": "doc C",
                                                    "docModels": {
                                                        "descriptions": [
                                                            {
                                                                "docModel": [
                                                                    {"text": "doc C"}
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "metadata": {
                                                    },
                                                    "name": "C"
                                                }
                                            ]
                                        }
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "boolean_field",
                                            "documentation": "boolean field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "boolean field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "boolean"}
                                        }
                                        ,
                                        {
                                            "name": "string_field",
                                            "documentation": "String field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "string"}
                                        }
                                        ,
                                        {
                                            "name": "long_field",
                                            "documentation": "long field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "long field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "long"}
                                        }
                                        ,
                                        {
                                            "name": "double_field",
                                            "documentation": "double field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "double field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "double"}
                                        }
                                        ,
                                        {
                                            "name": "date_time_field",
                                            "documentation": "DateTime field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "DateTime field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "date_time"}
                                        }
                                        ,
                                        {
                                            "name": "uri_field",
                                            "documentation": "URI field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "URI field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "URI"}
                                        }
                                        ,
                                        {
                                            "name": "secret_field",
                                            "documentation": "Secret field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Secret field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "primitive", "primitive_type": "secret"}
                                        }
                                        ,
                                        {
                                            "name": "enum_field",
                                            "documentation": "field using enum",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "field using enum"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Enumeration", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct.test_enum"}
                                        }
                                        ,
                                        {
                                            "name": "list_primitive_field",
                                            "documentation": "list field",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "list field"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "List", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "optional_primitive_field",
                                            "documentation": "optional String field\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "optional String field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "primitive", "primitive_type": "string"}}
                                        }
                                        ,
                                        {
                                            "name": "structure_field",
                                            "documentation": "field using other structure",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "field using other structure"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_structures.nested_non_model_struct",
                                    "documentation": "Nested non-model structure with...",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "Nested non-model structure with..."}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "2249852d82d8580022323bae9a33888cf623e50f",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                    ],
                                    "fields": [
                                        {
                                            "name": "foreign1",
                                            "documentation": "...ID field\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vmodl.test.uber. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vmodl.test.uber.",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "...ID field"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "metadata": 
                                                {
                                                    "docModel": [
                                                        {"text": "When clients pass a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "parameter"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " must be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": ". When "},
                                                        {"atTerm": "operations"},
                                                        {"text": " return a value of this "},
                                                        {"atTerm": "structure"},
                                                        {"text": " as a "},
                                                        {"atTerm": "result"},
                                                        {"text": ", the "},
                                                        {"atTerm": "field"},
                                                        {"text": " will be an identifier for the resource type: "},
                                                        {"atCode": "vmodl.test.uber"},
                                                        {"text": "."}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "Resource": {"value": "vmodl.test.uber"}
                                            },
                                            "type": {"category": "primitive", "primitive_type": "ID"}
                                        }
                                    ]
                                }
                                ,
                                {
                                    "type": "Structure",
                                    "name": "vmodl.test.uber.structures.uber_structures.nested_struct_with_constants",
                                    "documentation": "test structure with constants",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "test structure with constants"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "5e18fb536b8d96e18607cdf873eeda980115fd36",
                                    "enumerations": [
                                    ],
                                    "constants": [
                                        {
                                            "name": "struct_constant_string",
                                            "documentation": "String constant in structure",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "String constant in structure"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "Primitive", "type": "String"},
                                            "value": "val"
                                        }
                                        ,
                                        {
                                            "name": "struct_constant_long",
                                            "documentation": "Long constant in structure",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "Long constant in structure"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "Primitive", "type": "Long"},
                                            "value": 100
                                        }
                                    ],
                                    "fields": [
                                    ]
                                }
                            ],
                            "operations": [
                                {
                                    "name": "echo_nested_simple_struct",
                                    "documentation": "echo structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "c4b634105bb6719ab538f6c49bf557f34a8d6fde",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberStructures.echoNestedSimpleStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_nested_simple_struct_optional",
                                    "documentation": "echo optional structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "6c78ece03e562c91c5797d8864be533048a65c77",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberStructures.echoNestedSimpleStructOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_simple_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_nested_complex_struct",
                                    "documentation": "echo structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "f00a67f1efc27c5406b5884ecd644210af448067",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberStructures.echoNestedComplexStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct"}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_nested_complex_struct_optional",
                                    "documentation": "echo optional structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo optional structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "3b171fdd415ad6815f0985e285eceee6f1d82dc8",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value\nreason",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                                ,
                                                "optionalReason": 
                                                {
                                                    "docModel": [
                                                        {"text": "reason"}
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct"}}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input\nreason",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberStructures.echoNestedComplexStructOptional#input"}}
                                                    ]
                                                }
                                            ]
                                            ,
                                            "optionalReason": 
                                            {
                                                "docModel": [
                                                    {"text": "reason"}
                                                ]
                                            }
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "generic", "generic_type": "Optional", "element_type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_complex_struct"}}
                                    }
                                }
                                ,
                                {
                                    "name": "echo_empty_struct",
                                    "documentation": "echo empty structure",
                                    "docModels": {
                                        "descriptions": [
                                            {
                                                "docModel": [
                                                    {"text": "echo empty structure"}
                                                ]
                                            }
                                        ]
                                    },
                                    "metadata": {
                                    },
                                    "fingerprint": "465ad2e27bc74443c4002095965e33e39ad93fd3",
                                    "params": [
                                        {
                                            "name": "input",
                                            "documentation": "test value",
                                            "docModels": {
                                                "descriptions": [
                                                    {
                                                        "docModel": [
                                                            {"text": "test value"}
                                                        ]
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                            },
                                            "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_empty_struct"}
                                        }
                                    ],
                                    "errors": [
                                    ],
                                    "result": {
                                        "documentation": "same as input",
                                        "docModels": {
                                            "descriptions": [
                                                {
                                                    "docModel": [
                                                        {"text": "same as "},
                                                        {"atParamName": {"text": "input", "resolved": "vmodl.test.uber.structures.UberStructures.echoEmptyStruct#input"}}
                                                    ]
                                                }
                                            ]
                                        },
                                        "metadata": {
                                        },
                                        "type": {"category": "user_defined", "user_defined_type": "Structure", "user_defined_type_name": "vmodl.test.uber.structures.uber_structures.nested_empty_struct"}
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}
